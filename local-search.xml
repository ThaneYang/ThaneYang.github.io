<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>11个有用的前端技巧</title>
    <link href="/2024/10/11%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7.html"/>
    <url>/2024/10/11%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-检测网络速度"><a href="#1-检测网络速度" class="headerlink" title="1. 检测网络速度"></a>1. 检测网络速度</h3><p>通过 JavaScript 的 <strong>Network Information API</strong>，可以检测用户的网络下载速度，从而动态调整页面加载的资源大小。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (navigator.connection) &#123;<br>    const downlink = navigator.connection.downlink;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`当前下载速度: <span class="hljs-subst">$&#123;downlink&#125;</span> Mbps`</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Network Information API 不被支持&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于在网络速度较慢时减少大文件加载有用。</p><h3 id="2-为移动端应用添加振动反馈"><a href="#2-为移动端应用添加振动反馈" class="headerlink" title="2. 为移动端应用添加振动反馈"></a>2. 为移动端应用添加振动反馈</h3><p>对于移动应用，可以使用 <strong>Vibrate API</strong> 来提供振动反馈，从而增强用户体验。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 振动 500 毫秒</span><br>if (navigator.vibrate) &#123;<br>    navigator<span class="hljs-selector-class">.vibrate</span>(<span class="hljs-number">500</span>);<br>&#125; else &#123;<br>    console<span class="hljs-selector-class">.log</span>(&quot;Vibrate API 不被支持&quot;);<br>&#125;<br><br><span class="hljs-comment">// 创建振动和暂停的模式</span><br>if (navigator.vibrate) &#123;<br>    navigator<span class="hljs-selector-class">.vibrate</span>([<span class="hljs-number">200</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能在移动设备中尤其有效，但要先检查下设备的兼容性。</p><h3 id="3-禁止文本粘贴"><a href="#3-禁止文本粘贴" class="headerlink" title="3. 禁止文本粘贴"></a>3. 禁止文本粘贴</h3><p>例如密码输入框，不希望用户粘贴文本。可以通过下面的代码实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text-input&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text-input&#x27;</span>);</span><br><span class="language-javascript">  input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;paste&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">    e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;禁止粘贴内容！&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个方法能够提高输入的安全性，但可能会影响用户体验。</p><h3 id="4-隐藏-DOM-元素"><a href="#4-隐藏-DOM-元素" class="headerlink" title="4. 隐藏 DOM 元素"></a>4. 隐藏 DOM 元素</h3><p>除了借助 JavaScript 来隐藏元素，HTML 的 <code>hidden</code> 属性也可以：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">hidden</span>&gt;</span>这个文本是不可见的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个属性与 <code>display: none;</code> 类似，会让元素从页面中消失。</p><h3 id="5-使用-inset-简化定位"><a href="#5-使用-inset-简化定位" class="headerlink" title="5. 使用 inset 简化定位"></a>5. 使用 <code>inset</code> 简化定位</h3><p>CSS 中使用 <code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code> 进行绝对定位有时显得冗长，可以使用 <code>inset</code> 来简化这个过程：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 原始方法 */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 使用 inset 简化 */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">inset</span>: <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>这不仅让 CSS 更简洁，还提高了代码的可读性。</p><h3 id="6-高级-console-调试技巧"><a href="#6-高级-console-调试技巧" class="headerlink" title="6. 高级 console 调试技巧"></a>6. 高级 console 调试技巧</h3><p>除了常见的 <code>console.log()</code>，还可以利用以下console 方法来调试：</p><ul><li><code>console.table()</code>：以表格形式展示数组或对象：</li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">const <span class="hljs-keyword">data</span> = [<br>    &#123; <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, age: <span class="hljs-number">25</span> &#125;,<br>    &#123; <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, age: <span class="hljs-number">30</span> &#125;<br>];<br>console.table(<span class="hljs-keyword">data</span>);<br></code></pre></td></tr></table></figure><ul><li><code>console.group()</code> 和 <code>console.groupEnd()</code>：将相关的日志进行分组：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.group(<span class="hljs-string">&#x27;调试日志&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;消息 1&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;消息 2&#x27;</span>);<br><span class="hljs-built_in">console</span>.groupEnd();<br></code></pre></td></tr></table></figure><ul><li><code>console.time()</code> 和 <code>console.timeEnd()</code>：测量代码执行的时间：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">time</span>(<span class="hljs-string">&#x27;代码运行时间&#x27;</span>);<br><span class="hljs-comment">// 模拟耗时代码</span><br><span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&#x27;代码运行时间&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>console.clear()：清空日志：</li></ul><p>我们已经在控制台输出了很多记录，可以使用console.clear()清空一下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.clear()<br></code></pre></td></tr></table></figure><h3 id="7-防止移动端下拉刷新"><a href="#7-防止移动端下拉刷新" class="headerlink" title="7. 防止移动端下拉刷新"></a>7. 防止移动端下拉刷新</h3><p>当用户在移动端使用应用时，可能会无意中触发下拉刷新。通过以下 CSS 属性，可以防止这个行为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  overscroll-behavior-<span class="hljs-attribute">y</span>: contain;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个属性同样适用于阻止模态框滚动到边界时滚动背景页面。</p><h3 id="8-让网页可编辑"><a href="#8-让网页可编辑" class="headerlink" title="8. 让网页可编辑"></a>8. 让网页可编辑</h3><p>使用 <code>contentEditable</code> 属性可以将整个网页变成可编辑的状态：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">document.body.contentEditable</span> = <span class="hljs-string">&#x27;true&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果只想让某个特定的元素可编辑，可以通过选中该元素然后设置其<code>contentEditable</code>属性为”true”：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;editableElement&quot;</span> contentEditable=<span class="hljs-string">&quot;true&quot;</span>&gt; 这里是可以编辑的文本内容。 &lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>这样，用户就可以在这个<code>&lt;div&gt;</code>元素中编辑文本了。</p><p>注意，这个功能可能会对页面结构和脚本产生影响，建议仅用于开发或调试阶段。</p><h3 id="9-使用-ID-生成全局变量"><a href="#9-使用-ID-生成全局变量" class="headerlink" title="9. 使用 ID 生成全局变量"></a>9. 使用 ID 生成全局变量</h3><p>HTML 元素的 <code>id</code> 会自动生成一个全局变量，可以直接在 JavaScript 中调用，而无需 <code>document.getElementById()</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDiv&quot;</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myDiv); <span class="hljs-comment">// 自动生成全局变量 myDiv</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>尽管这样做很方便，但在实际项目中应避免，仍然推荐使用 <code>document.getElementById()</code> 来保持代码的清晰性。</p><h3 id="10-平滑滚动效果"><a href="#10-平滑滚动效果" class="headerlink" title="10. 平滑滚动效果"></a>10. 平滑滚动效果</h3><p>通过 CSS 的 <code>scroll-behavior: smooth;</code> 属性，可以为网页添加平滑滚动效果，增强用户体验：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br>    scroll-behavior: smooth;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-使用-empty-选择器隐藏空元素"><a href="#11-使用-empty-选择器隐藏空元素" class="headerlink" title="11. 使用 :empty 选择器隐藏空元素"></a>11. 使用 :empty 选择器隐藏空元素</h3><p>CSS 的 <code>:empty</code> 选择器可以有效地选中并隐藏那些空的 HTML 元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:empty</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>这对保持页面干净整洁非常有用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端性能监控Performance大法</title>
    <link href="/2024/10/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7Performance%E5%A4%A7%E6%B3%95.html"/>
    <url>/2024/10/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7Performance%E5%A4%A7%E6%B3%95.html</url>
    
    <content type="html"><![CDATA[<p>关于前端性能指标，W3C 定义了强大的 <code>Performance</code> API，其中又包括了 <code>High Resolution Time</code> 、 <code>Frame Timing</code> 、 <code>Navigation Timing</code> 、 <code>Performance Timeline</code> 、<code>Resource Timing</code> 、 <code>User Timing</code> 等诸多具体标准。</p><p>本文主要涉及 <code>Navigation Timing</code> 以及 <code>Resource Timing</code>。截至到目前，各大主流浏览器均已完成了基础实现。</p><p><img src="http://yzwpic.weimayi.cn/img/16555cb55db3044e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png" alt="Navigation Timing Support"></p><p><img src="http://yzwpic.weimayi.cn/img/16555cb552cbfd9d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png" alt="Resource Timing Support"></p><p><code>Performance</code> API 功能众多，其中一项，就是将页面自身以及页面中各个资源的性能表现（时间细节）记录了下来。而我们要做的就是查询和使用。</p><blockquote><p>可以直接在浏览器，打开开发者模式，控制台中输入 performance ，查看相关 API。</p></blockquote><h3 id="1-页面加载"><a href="#1-页面加载" class="headerlink" title="1. 页面加载"></a>1. 页面加载</h3><p>有关页面加载的性能指标，可以在 <code>Navigation Timing</code> 中找到。<code>Navigation Timing</code> 包括了从请求页面起，到页面完成加载为止，各个环节的时间明细。</p><p>可以通过以下方式获取 <code>Navigation Timing</code> 的具体内容：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> navTimes = performance.getEntriesByType(<span class="hljs-string">&#x27;navigation&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><code>getEntriesByType</code> 是我们获取性能数据的一种方式。<code>performance</code> 还提供了 <code>getEntries</code> 以及 <code>getEntriesByName</code> 等其他方式，详细文档见：<a href="www.w3.org/TR/performa">www.w3.org/TR/performa</a>。</p></blockquote><p>返回结果是一个数组，其中的元素结构如下所示：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">activationStart:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">connectEnd:</span> <span class="hljs-number">64.80000019073486</span><br><span class="hljs-symbol">connectStart:</span> <span class="hljs-number">37.90000009536743</span><br><span class="hljs-symbol">criticalCHRestart:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">decodedBodySize:</span> <span class="hljs-number">244211</span><br><span class="hljs-symbol">deliveryType:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">domComplete:</span> <span class="hljs-number">943.3000001907349</span><br><span class="hljs-symbol">domContentLoadedEventEnd:</span> <span class="hljs-number">568.8000001907349</span><br><span class="hljs-symbol">domContentLoadedEventStart:</span> <span class="hljs-number">568.5</span><br><span class="hljs-symbol">domInteractive:</span> <span class="hljs-number">482.40000009536743</span><br><span class="hljs-symbol">domainLookupEnd:</span> <span class="hljs-number">37.90000009536743</span><br><span class="hljs-symbol">domainLookupStart:</span> <span class="hljs-number">37.90000009536743</span><br><span class="hljs-symbol">duration:</span> <span class="hljs-number">943.4000000953674</span><br><span class="hljs-symbol">encodedBodySize:</span> <span class="hljs-number">43525</span><br><span class="hljs-symbol">entryType:</span> <span class="hljs-string">&quot;navigation&quot;</span><br><span class="hljs-symbol">fetchStart:</span> <span class="hljs-number">5.5</span><br><span class="hljs-symbol">firstInterimResponseStart:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">initiatorType:</span> <span class="hljs-string">&quot;navigation&quot;</span><br><span class="hljs-symbol">loadEventEnd:</span> <span class="hljs-number">943.4000000953674</span><br><span class="hljs-symbol">loadEventStart:</span> <span class="hljs-number">943.4000000953674</span><br><span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;https://juejin.cn/post/6844903662020460552&quot;</span><br><span class="hljs-symbol">nextHopProtocol:</span> <span class="hljs-string">&quot;h2&quot;</span><br><span class="hljs-symbol">notRestoredReasons:</span> null<br><span class="hljs-symbol">redirectCount:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">redirectEnd:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">redirectStart:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">renderBlockingStatus:</span> <span class="hljs-string">&quot;non-blocking&quot;</span><br><span class="hljs-symbol">requestStart:</span> <span class="hljs-number">65.09999990463257</span><br><span class="hljs-symbol">responseEnd:</span> <span class="hljs-number">222.5</span><br><span class="hljs-symbol">responseStart:</span> <span class="hljs-number">192.59999990463257</span><br><span class="hljs-symbol">responseStatus:</span> <span class="hljs-number">200</span><br><span class="hljs-symbol">secureConnectionStart:</span> <span class="hljs-number">51</span><br><span class="hljs-symbol">startTime:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">transferSize:</span> <span class="hljs-number">43825</span><br><span class="hljs-symbol">type:</span> <span class="hljs-string">&quot;navigate&quot;</span><br><span class="hljs-symbol">unloadEventEnd:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">unloadEventStart:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">workerStart:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>关于各个字段的时间含义，<a href="https://w3c.github.io/navigation-timing/">Navigation Timing Level 2</a> 给出了详细说明：</p><p><img src="http://yzwpic.weimayi.cn/img/16555cb56942d42b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png" alt="Navigation Timing attributes"></p><p>读取 <code>domComplete</code>:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">const</span> [&#123; <span class="hljs-attribute">domComplete</span> &#125;] = performance.getEntriesByType(<span class="hljs-string">&#x27;navigation&#x27;</span>)<br></code></pre></td></tr></table></figure><p>到此，我们获得了准确的页面加载时间。</p><h3 id="2-资源加载"><a href="#2-资源加载" class="headerlink" title="2. 资源加载"></a>2. 资源加载</h3><p>资源加载对应的性能指标，可以在 <code>Resource Timing</code>中找到。它包含了页面中各个资源从发送请求起，到完成加载为止，各个环节的时间细节，和 <code>Navigation Timing</code> 十分类似。</p><p>获取资源加载时间的关键字为 <code>&#39;resource&#39;</code>, 具体方式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">performance<span class="hljs-selector-class">.getEntriesByType</span>(<span class="hljs-string">&#x27;resource&#x27;</span>)<br></code></pre></td></tr></table></figure><p>返回结果通常是一个很长的数组，因为包含了页面上所有资源的加载信息。</p><p><img src="http://yzwpic.weimayi.cn/img/image-20241029183919175.png" alt="image-20241029183919175"></p><p>每条信息的具体结构为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">connectEnd:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">connectStart:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">decodedBodySize:</span> <span class="hljs-number">208476</span><br><span class="hljs-symbol">deliveryType:</span> <span class="hljs-string">&quot;cache&quot;</span><br><span class="hljs-symbol">domainLookupEnd:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">domainLookupStart:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">duration:</span> <span class="hljs-number">16.800000190734863</span><br><span class="hljs-symbol">encodedBodySize:</span> <span class="hljs-number">32054</span><br><span class="hljs-symbol">entryType:</span> <span class="hljs-string">&quot;resource&quot;</span><br><span class="hljs-symbol">fetchStart:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">firstInterimResponseStart:</span> <span class="hljs-number">209.90000009536743</span><br><span class="hljs-symbol">initiatorType:</span> <span class="hljs-string">&quot;link&quot;</span><br><span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;https://lf-web-assets.juejin.cn/obj/juejin-web/xitu_juejin_web/static/bytedesign.min.css&quot;</span><br><span class="hljs-symbol">nextHopProtocol:</span> <span class="hljs-string">&quot;h2&quot;</span><br><span class="hljs-symbol">redirectEnd:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">redirectStart:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">renderBlockingStatus:</span> <span class="hljs-string">&quot;blocking&quot;</span><br><span class="hljs-symbol">requestStart:</span> <span class="hljs-number">208.80000019073486</span><br><span class="hljs-symbol">responseEnd:</span> <span class="hljs-number">219.90000009536743</span><br><span class="hljs-symbol">responseStart:</span> <span class="hljs-number">209.90000009536743</span><br><span class="hljs-symbol">responseStatus:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">secureConnectionStart:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">serverTiming:</span> [PerformanceServerTiming]<br><span class="hljs-symbol">startTime:</span> <span class="hljs-number">203.09999990463257</span><br><span class="hljs-symbol">transferSize:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">workerStart:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>我们关注的是资源加载的耗时情况，可以通过如下形式获得：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> [&#123; startTime, responseEnd &#125;] = performance.getEntriesByType(<span class="hljs-string">&#x27;resource&#x27;</span>)<br><span class="hljs-keyword">const</span> loadTime = responseEnd - startTime<br></code></pre></td></tr></table></figure><p>同 <code>Navigation Timing</code> 相似，关于 <code>startTime</code> 、 <code>fetchStart</code>、<code>connectStart</code> 和 <code>requestStart</code> 的区别， <a href="https://www.w3.org/TR/resource-timing/">Resource Timing Level 2</a> 给出了详细说明：</p><p><img src="http://yzwpic.weimayi.cn/img/16555cb56690c745~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png" alt="Resource Timing attributes"></p><p>实际业务中，并非所有资源加载时间都需要关注，假设只返回超过10s的资源加载情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SEC</span> = <span class="hljs-number">1000</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TIMEOUT</span> = <span class="hljs-number">10</span> * <span class="hljs-variable constant_">SEC</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">setTime</span> = (<span class="hljs-params">limit = TIMEOUT</span>) =&gt; <span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> time &gt;= limit<br><span class="hljs-keyword">const</span> isTimeout = <span class="hljs-title function_">setTime</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getLoadTime</span> = (<span class="hljs-params">&#123; startTime, responseEnd &#125;</span>) =&gt; responseEnd - startTime<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getName</span> = (<span class="hljs-params">&#123; name &#125;</span>) =&gt; name<br><span class="hljs-keyword">const</span> resourceTimes = performance.<span class="hljs-title function_">getEntriesByType</span>(<span class="hljs-string">&#x27;resource&#x27;</span>)<br><span class="hljs-keyword">const</span> getTimeoutRes = resourceTimes<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">isTimeout</span>(<span class="hljs-title function_">getLoadTime</span>(item)))<br>  .<span class="hljs-title function_">map</span>(getName)<br></code></pre></td></tr></table></figure><p>至此，我们介绍了两个主要的前端性能检测指标，<strong>页面加载</strong>和<strong>资源加载</strong>，分别通过<code>Navigation Timing</code>和<code>Resource Timing</code>来获取，通过监控这两个性能指标，就可以满足简单的前端性能检测。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue双向绑定原理</title>
    <link href="/2024/06/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86.html"/>
    <url>/2024/06/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<p>Vue 双向绑定原理是<strong>通过数据劫持结合发布者-订阅者模式来实现的</strong>。以下是对Vue双向绑定原理的详细解释：</p><ol><li><strong>数据劫持（Data Reactivity）</strong>:<ul><li>Vue使用 <code>Object.defineProperty</code>（Vue 2.x）或 <code>Proxy</code>（Vue 3.x）方法来劫持各个属性的setter和getter，从而在数据发生变动时通知Vue实例。</li></ul></li><li><strong>依赖收集（Dependency Tracking）</strong>:<ul><li>当数据被读取时（ getter 被调用），Vue 会对组件实例进行依赖收集，将依赖于这些数据的Watcher存储到Dep（消息中心）中，以便之后能够触发更新。</li></ul></li><li><strong>派发更新（Dispatching Updates）</strong>:<ul><li>当数据变化时（setter 被调用），Vue 会遍历Dep（消息中心），并通知所有依赖于这个数据的Watcher，调用它的更新函数，重新渲染组件。</li></ul></li><li><strong>指令系统（Directive System）</strong>:<ul><li>Vue 的 <code>v-model</code> 指令用于创建双向数据绑定。在内部，Vue 会为 <code>v-model</code> 绑定的 input 元素添加事件监听器（通常是 <code>input</code> 事件）。</li><li>当输入事件触发时，Vue 会执行绑定的事件处理器，这个处理器会更新组件的数据，从而间接更新数据对象。</li></ul></li><li><strong>渲染函数（Render Functions）</strong>:<ul><li>Vue 将模板通过AST转换为渲染函数，这个函数能够返回虚拟 DOM 树，包括创建虚拟节点（VNode），以及对数据变化的响应逻辑。</li><li>当数据变化时，Vue 会重新执行渲染函数，生成新的虚拟 DOM 树，并与旧的虚拟 DOM 树进行比较，然后更新实际的 DOM。</li></ul></li><li><strong>异步更新队列（Async Update Queue）</strong>:<ul><li>Vue 在同一事件循环中可能会遇到多次数据变化，为了避免不必要的重复渲染，Vue 会将所有数据变化收集到一个异步队列中。</li><li>在下一个事件循环“tick”中，Vue 刷新队列并执行实际的 DOM 更新。</li></ul></li></ol><h5 id="发布者-订阅者模式"><a href="#发布者-订阅者模式" class="headerlink" title="发布者-订阅者模式"></a><strong>发布者-订阅者模式</strong></h5><ul><li><strong>Observer（监听器）</strong>：Observer负责监听模型数据的变化，当数据发生变化时，它会通知订阅者。</li><li><strong>Watcher（订阅者）</strong>：Watcher作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图。</li><li><strong>Dep（消息中心）</strong>：Dep是一个消息中心，用来管理多个Watcher，确保数据变化时能够通知所有相关的Watcher。</li></ul><h5 id="MVVM架构"><a href="#MVVM架构" class="headerlink" title="MVVM架构"></a><strong>MVVM架构</strong></h5><ul><li><strong>ViewModel</strong>：ViewModel负责将模型和视图关联起来，实现数据的双向流动。它包含两个主要部分：监听器（Observer）和解析器（Compiler）。监听器负责监听模型数据的变化，而解析器则负责解析视图中的指令，并根据指令模板替换数据，同时绑定更新函数。</li></ul><p>Vue 的双向绑定实现机制确保了视图和数据之间的同步，同时避免了直接操作 DOM 的需要，这使得我们可以更加专注于应用逻辑，而不是数据和视图之间的同步问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue编译器架构</title>
    <link href="/2024/06/vue%E7%BC%96%E8%AF%91%E6%A8%A1%E7%89%88%E7%9A%84%E8%BF%87%E7%A8%8B.html"/>
    <url>/2024/06/vue%E7%BC%96%E8%AF%91%E6%A8%A1%E7%89%88%E7%9A%84%E8%BF%87%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<p>Vue 编译器架构的主要任务是<strong>将VUE模板转换为可执行的 JavaScript 代码</strong>。Vue.js 作为一个流行的前端框架，其核心特性之一就是能够通过简洁的模板语法来构建用户界面。这个过程涉及以下步骤：</p><ol><li><strong>模板到AST的转换（Parsing）</strong><ul><li><strong>词法分析</strong>：Vue 编译器首先会对模板字符串进行词法分析，将其分解成一个个词法单元（Token）。这些词法单元代表了模板中的各种元素，如标签、属性、文本等。</li><li><strong>语法分析</strong>：在词法分析的基础上，编译器会进行语法分析，将这些词法单元组织成一个抽象语法树（AST）。AST 是一种用节点表示程序结构的树状数据结构，每个节点代表模板中的一个具体元素。</li></ul></li><li><strong>优化（Optimization）</strong>：<ul><li>在生成 AST 后，Vue 编译器会对 AST 进行静态分析和优化，标记静态节点。静态节点是指在渲染过程中不会发生变化的节点。这一步有助于提高渲染性能。</li></ul></li><li><strong>渲染函数代码生成（Code Generation）</strong>：<ul><li>优化后的 AST 会被转换为渲染函数，这个函数能够返回虚拟 DOM 树，包括创建虚拟节点（VNode），以及对数据变化的响应逻辑。</li><li><strong>响应式系统的集成</strong><ul><li><strong>数据绑定</strong>：在编译过程中，Vue 编译器会将模板中的动态数据与 Vue 实例的数据进行绑定。这样，当数据发生变化时，视图会自动更新。</li><li><strong>指令处理</strong>：Vue 模板中可以使用各种指令（如 v-if、v-for 等）来控制元素的渲染。编译器会识别这些指令，并生成相应的逻辑代码。</li></ul></li></ul></li><li><strong>静态提升（Static Hoisting）</strong>：<ul><li>Vue 编译器还会进行静态提升，将静态节点提升到渲染函数外部，避免重复创建和销毁静态节点，从而提高性能。</li></ul></li><li><strong>内联模板（Inline Templates）</strong>：<ul><li>对于内联模板，Vue 编译器会将其直接嵌入到组件中，避免额外的编译步骤。</li></ul></li></ol><p>总的来说，Vue 编译器架构是一个高度模块化、灵活且高效的系统，通过将模板转换为高效的渲染函数，使得 Vue 应用能够以更高效的方式渲染和更新视图。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack的构建流程</title>
    <link href="/2024/05/webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.html"/>
    <url>/2024/05/webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<p>Webpack 是一个现代 JavaScript 应用程序的静态模块打包器（bundler），它能够将项目中的所有依赖项（包括 JavaScript、图片、CSS 等）打包成一个或多个 bundle。以下是 Webpack 构建流程的基本步骤：</p><ol><li><strong>初始化</strong>：<ul><li>Webpack 首先会读取 <code>webpack.config.js</code> 配置文件，这是整个构建过程的起点。</li></ul></li><li><strong>编译</strong>（Compilation）：<ul><li>Webpack 会创建一个编译对象（Compiler），用于存储最终生成的资源和各种模块。</li></ul></li><li><strong>依赖图构建</strong>（Building the Dependency Graph）：<ul><li>Webpack 从入口文件（entry point）开始，递归地解析文件中的所有依赖项，构建一个依赖图（dependency graph）。这个过程中会使用到 Loader 和 Parser。</li></ul></li><li><strong>加载器处理</strong>（Loaders Processing）：<ul><li>当 Webpack 遇到不同的资源类型时，会使用相应的加载器（loaders）来处理这些资源。Loaders 允许你在编译时处理文件，例如将 Sass 转换为 CSS，或者将图片转换为 Data URL。</li></ul></li><li><strong>编译模块</strong>（Compiling Modules）：<ul><li>通过编译器（Compiler）处理完所有依赖项后，Webpack 会将它们转换成一个具有依赖关系的模块。</li></ul></li><li><strong>优化</strong>（Optimization）：<ul><li>Webpack 会使用各种插件（plugins）来优化依赖图，例如 Tree Shaking（移除未引用的代码）、Scope Hoisting（作用域提升）、代码分割（Code Splitting）等。</li></ul></li><li><strong>输出</strong>（Output）：<ul><li>完成优化后，Webpack 会将最终的依赖图输出到一个或多个 bundle 文件中，这些文件会被输出到指定的输出目录（output directory）。</li></ul></li><li><strong>持久化缓存</strong>（Persistent Caching）：<ul><li>Webpack 会使用文件系统来缓存编译结果，这样在下一次构建时可以提高构建速度。</li><li>工作原理<ul><li><strong>缓存构建结果</strong>：Webpack 5 会将首次构建的 Module、Chunk、ModuleGraph 等对象序列化后保存到硬盘中。这些对象包含了构建过程中的关键信息，如模块依赖关系、编译结果等。</li><li><strong>复用缓存</strong>：在后续的构建中，Webpack 会检查文件的内容哈希或时间戳，如果文件没有发生变化，则直接使用缓存副本，跳过编译操作。</li><li><strong>缓存失效策略</strong>：如果项目的配置文件或其他依赖项发生变化，缓存会失效，Webpack 将执行完整的构建流程。</li></ul></li></ul></li><li><strong>监听文件变化</strong>（Watch for File Changes）：<ul><li>如果在配置中启用了监听模式（watch mode），Webpack 会监听文件系统的变化，并在文件发生变化时重新执行构建过程。</li></ul></li><li><strong>使用插件</strong>（Using Plugins）：<ul><li>在整个构建过程中，Webpack 插件（plugins）可以用来执行各种任务，如提供额外的资源、改变输出结果等。</li></ul></li></ol><p>Webpack 的构建流程是高度可配置的，开发者可以根据项目的需要选择合适的加载器和插件来定制构建过程。这种灵活性使得 Webpack 成为现代前端工程化中不可或缺的工具之一。</p>]]></content>
    
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序底层原理</title>
    <link href="/2024/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html"/>
    <url>/2024/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<p>微信小程序底层原理主要基于其独特的双线程模型和一系列优化策略，以确保在移动端上提供接近原生应用的性能和用户体验。下面介绍一下小程序底层原理的一些大概：</p><ol><li><strong>双线程模型</strong><ul><li><strong>逻辑层与视图层的分离</strong>：小程序采用双线程模型，将逻辑层（App Service）和视图层（View）分离开来。逻辑层负责处理<strong>数据请求、业务逻辑</strong>等，而视图层则专注于<strong>页面的渲染和展示</strong>。</li><li><strong>逻辑层与视图层的通信</strong>：逻辑层和视图层之间的通信通过微信客户端提供的<code>WeixinJSBridge</code>来实现。这个桥梁将小程序的运行环境和微信客户端（Native）连接起来，负责在渲染进程和逻辑进程之间传递数据和事件。<ul><li><strong>setData</strong>：逻辑层通过调用<code>setData</code>函数将数据传递到视图层。这是逻辑层更新视图层数据的主要方式，每次调用<code>setData</code>都会触发一次线程间的通信。当数据更新频繁或传递数据量较大时可能会出现性能问题。因此，小程序的优化手段中有一个就是尽量减少<code>setData</code>的调用。</li><li><strong>事件系统</strong>：视图层的事件（如用户点击）会通过事件系统发送给逻辑层。在WXML中，开发者可以为元素绑定事件处理函数，当事件发生时，对应的逻辑层中的事件处理函数会被调用。</li><li><strong>Native中转</strong>： 逻辑层发送的网络请求也经由Native转发。这意味着逻辑层和视图层的通信会经过微信的客户端（Native）做中转，逻辑层发送网络请求也经由Native转发。</li></ul></li><li><strong>数据绑定和响应式原理</strong>：小程序支持数据绑定，逻辑层通过<code>setData</code>方法将数据变化通知到视图层，触发视图层页面更新；视图层则将触发的事件通知到逻辑层进行业务处理。这一机制类似于Vue.js或React的响应式原理，通过数据劫持和发布-订阅模式实现。</li><li><strong>双向通信通道</strong>： JSBridge作为JavaScript与Native之间的桥梁，实现了双向通信。这意味着JavaScript可以调用Native的功能，同时Native也可以向JavaScript发送消息，如回溯调用结果、消息推送等。<ul><li><strong>JavaScript调用Native</strong>：<ul><li><strong>注入API</strong>：通过WebView提供的接口，向JavaScript的Context中注入对象或方法，使得JavaScript在调用这些注入的对象或方法时，可以直接执行相应的Native代码逻辑。</li><li><strong>拦截URL Scheme</strong>：Web端通过某种方式（例如iframe.src）发送URL Scheme请求，Native拦截到请求并根据URL Scheme进行相关操作。</li></ul></li><li><strong>Native调用JavaScript</strong>： Native端可以通过执行JavaScript代码来调用JavaScript中的函数。例如，在Android中，可以使用<code>webView.loadUrl(&quot;javascript:someFunction()&quot;)</code>来调用JavaScript中的<code>someFunction</code>。</li></ul></li></ul></li><li><strong>运行环境</strong><ul><li><strong>内置解析器</strong>：小程序并非运行在浏览器中，而是运行在微信客户端自定义的内置解析器上。这个解析器基于浏览器内核重构，但并非完整的浏览器对象，因此小程序中没有DOM和BOM的相关API。</li><li><strong>Webview实例</strong>：在Android端，微信小程序使用WebView进行页面渲染；在iOS端，微信小程序则使用WKWebView。</li><li><strong>多Webview实例</strong>：由于小程序可能包含多个页面，每个页面都有自己的Webview实例来执行渲染任务。这些Webview实例在独立的进程中运行，确保了页面间的隔离性和安全性。</li></ul></li><li><strong>性能优化</strong><ul><li><strong>Skyline渲染引擎</strong>：为了进一步提升渲染性能，微信小程序引入了Skyline渲染引擎。Skyline创建了一条独立的渲染线程来负责Layout、Composite和Paint等渲染任务，从而减轻了JS逻辑对渲染的阻塞。</li><li><strong>组件下沉与预编译</strong>：Skyline环境下，部分内置组件（如scroll-view、swiper等）被下沉到原生实现，以提升性能和交互体验。同时，WXSS样式表在构建时会被预编译为二进制文件，避免了运行时解析的开销。</li><li><strong>长列表按需渲染</strong>：针对长列表场景，Skyline优化了scroll-view组件的渲染策略，只渲染可视区域内的节点，并通过lazy mount机制优化首次渲染性能。</li></ul></li><li><strong>开发框架与工具</strong><ul><li><strong>开发框架</strong>：微信小程序提供了一套完整的开发框架，包括逻辑层和视图层的API接口、组件系统、事件系统等。开发者可以使用这套框架快速构建小程序应用。</li><li><strong>开发工具</strong>：微信官方提供了小程序开发者工具，该工具基于NW.js技术实现，集成了代码编辑、调试、预览等功能，方便开发者进行小程序的开发和测试。</li></ul></li></ol><p>本文大致介绍了微信小程序的底层原理，包括双线程模型、双向通信通道、内置的解析器、Skyline渲染引擎等。</p>]]></content>
    
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序如何实现自动发布</title>
    <link href="/2024/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83.html"/>
    <url>/2024/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83.html</url>
    
    <content type="html"><![CDATA[<p>微信小程序官方提供了小程序持续集成&#x2F;持续部署（CI&#x2F;CD）工具 <code>miniprogram-ci</code>，可以实现小程序自动发布。步骤如下：</p><h5 id="配置项目和依赖"><a href="#配置项目和依赖" class="headerlink" title="配置项目和依赖"></a>配置项目和依赖</h5><p>在项目中安装 <code>miniprogram-ci</code> 和 <code>simple-git</code> 等 npm 包，并在项目根目录下配置相关的文件和脚本。</p><h5 id="获取秘钥文件"><a href="#获取秘钥文件" class="headerlink" title="获取秘钥文件"></a>获取秘钥文件</h5><p>打开<a href="https://mp.weixin.qq.com/">微信小程序管理平台</a>，开发设置，小程序代码上传，下载秘钥文件private.xxx.key</p><p><img src="http://yzwpic.weimayi.cn/img/image-20241030100427808.png" alt="image-20241030100427808"></p><h5 id="编写上传脚本"><a href="#编写上传脚本" class="headerlink" title="编写上传脚本"></a>编写上传脚本</h5><p>在项目中新建目录miniprogram-ci，将秘钥文件private.xxx.key放入目录下，同时新建upload.js</p><p>代码如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const ci = require(<span class="hljs-string">&#x27;miniprogram-ci&#x27;</span>)<br>const path = require(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDateTime</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">date</span>.getFullYear();<br>  <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>;<br>  m = m &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + m) : m;<br>  <span class="hljs-keyword">var</span> d = <span class="hljs-built_in">date</span>.getDate();<br>  d = d &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + d) : d;<br>  <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">date</span>.getHours();<br>  h = h &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + h) : h;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">minute</span> = <span class="hljs-built_in">date</span>.getMinutes();<br>  <span class="hljs-built_in">minute</span> = <span class="hljs-built_in">minute</span> &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">minute</span>) : <span class="hljs-built_in">minute</span>;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">second</span> = <span class="hljs-built_in">date</span>.getSeconds();<br>  <span class="hljs-built_in">second</span> = <span class="hljs-built_in">second</span> &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">second</span>) : <span class="hljs-built_in">second</span>;<br>  <span class="hljs-keyword">return</span> y + <span class="hljs-string">&#x27;-&#x27;</span> + m + <span class="hljs-string">&#x27;-&#x27;</span> + d + <span class="hljs-string">&#x27; &#x27;</span> + h + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">minute</span> + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">second</span>;<br>&#125;;<br><br>let desc = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&#x27;development&#x27;</span>) &#123;<br>  desc = <span class="hljs-string">`在 <span class="hljs-subst">$&#123;formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())&#125;</span> 提交【测试】版本`</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  desc = <span class="hljs-string">`在 <span class="hljs-subst">$&#123;formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())&#125;</span> 提交【正式】版本`</span><br>&#125;<br><br>; <span class="hljs-function">(<span class="hljs-params">async (</span>) =&gt;</span> &#123;<br>  const project = <span class="hljs-keyword">new</span> ci.Project(&#123;<br>    <span class="hljs-attr">appid</span>: <span class="hljs-string">&#x27;小程序APPID&#x27;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;miniProgram&#x27;</span>,<br>    <span class="hljs-attr">projectPath</span>: <span class="hljs-string">&#x27;the/project/path&#x27;</span>,<br>    <span class="hljs-attr">privateKeyPath</span>: path.join(__dirname, <span class="hljs-string">&#x27;./private.xxx.key&#x27;</span>),<br>    <span class="hljs-attr">ignores</span>: [<span class="hljs-string">&#x27;node_modules/**/*&#x27;</span>],<br>  &#125;)<br>  const uploadResult = await ci.upload(&#123;<br>    project,<br>    <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>    desc,<br>    <span class="hljs-attr">setting</span>: &#123;<br>      <span class="hljs-attr">es6</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">es7</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minify</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">onProgressUpdate</span>: <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>,<br>    <span class="hljs-attr">threads</span>: <span class="hljs-number">4</span>,<br>  &#125;)<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(uploadResult)<br>&#125;)()<br></code></pre></td></tr></table></figure><p>打开项目根目录package.json，新增代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;upload:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=development &amp;&amp; node ./miniprogram-ci/upload&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;upload:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=production &amp;&amp; node ./miniprogram-ci/upload&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="执行上传操作"><a href="#执行上传操作" class="headerlink" title="执行上传操作"></a>执行上传操作</h5><p>执行以下命令行，自动上传到微信小程序管理平台。在上传过程中，可以通过回调函数获取到上传进度。</p><figure class="highlight plaintext"><figcaption><span>run upload</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm run upload:dev<br></code></pre></td></tr></table></figure><h5 id="自动化触发"><a href="#自动化触发" class="headerlink" title="自动化触发"></a>自动化触发</h5><p>将上述脚本与 CI&#x2F;CD 系统（如 GitLab CI、Jenkins 等）结合，实现代码提交后自动触发构建和发布流程。例如，在 GitLab CI 中，可以配置 <code>.gitlab-ci.yml</code> 文件来定义构建和部署任务</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ci.html">微信小程序官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何有效缓解拖延症</title>
    <link href="/2024/04/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E7%BC%93%E8%A7%A3%E6%8B%96%E5%BB%B6%E7%97%87.html"/>
    <url>/2024/04/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E7%BC%93%E8%A7%A3%E6%8B%96%E5%BB%B6%E7%97%87.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://yzwpic.weimayi.cn/img/image-20230308155228987.png" alt="image-20230308155228987"></p><p>其实我也是一个拖延症“重度患者”</p><p>包括这个PPT，你们可能也猜不到，我是一直拖到昨天晚上才做好的</p><h4 id="什么是拖延症"><a href="#什么是拖延症" class="headerlink" title="什么是拖延症"></a>什么是拖延症</h4><p>比如，明天项目上线，今天狂敲代码，加班拼命改bug</p><p>比如，明明白天能干完的，一定要拖到下班后再做</p><p>比如，干活前先酝酿心情，先刷会朋友圈或者微博</p><p>比如，早上起床，拖拖拉拉的一直起不来，闹钟要定好几个</p><h4 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h4><p>你们在日常生活中，都有哪些拖延症</p><h5 id="拖延怪圈"><a href="#拖延怪圈" class="headerlink" title="拖延怪圈"></a>拖延怪圈</h5><p><img src="http://yzwpic.weimayi.cn/img/image-20230309104914510.png" alt="image-20230309104914510"></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308155854859.png" alt="image-20230308155854859"></p><p>明日复明日，明日何其多</p><p>我生待明日，万事成蹉跎</p><h4 id="为什么会有拖延症"><a href="#为什么会有拖延症" class="headerlink" title="为什么会有拖延症"></a>为什么会有拖延症</h4><p>拖延的原因有很多，说几个常见的</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230321183913018.png" alt="image-20230321183913018"></p><h5 id="逃避压力型（恐惧失败或者害怕面对糟糕的结果）"><a href="#逃避压力型（恐惧失败或者害怕面对糟糕的结果）" class="headerlink" title="逃避压力型（恐惧失败或者害怕面对糟糕的结果）"></a>逃避压力型（恐惧失败或者害怕面对糟糕的结果）</h5><p>一想到要做的事，就觉得难、闹心，每分每秒都是煎熬，害怕做不好让人笑话，所以能躲一会儿是一会儿</p><p>比如，在读书的时候，你可能会被期待着通过考一个高分，来证明你是一个好学生；</p><p>在公司里，你可能会被期待着通过高质量地完成一个方案，来证明你是一个好员工；</p><p>在成家后，你可能被期待着通过把家里人都照顾好，来证明你是一个好丈夫、好妈妈等等。</p><p>这些期待，就是压力。担心自己做不好，于是心生畏惧，迟迟不肯行动。</p><p>比方说，领导要求小王写个方案，当小王把“做不好这个方案”与“在同事面前丢脸”这两件事情联系起来的时候，就可能就会因为害怕这个糟糕的后果，迟迟不愿意采取行动。</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308160524684.png" alt="image-20230308160524684"></p><p>跟鸵鸟一样，把头埋起来，欺骗自己</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230309105025017.png" alt="image-20230309105025017"></p><h5 id="追求完美型（完美主义）"><a href="#追求完美型（完美主义）" class="headerlink" title="追求完美型（完美主义）"></a>追求完美型（完美主义）</h5><p><img src="http://yzwpic.weimayi.cn/img/image-20230308160748606.png" alt="image-20230308160748606"></p><p>不做则已，要做就做到极致</p><p>没有十足的把握，绝不动手，结果就一拖再拖</p><p>比如：现在的工作明明没有上升空间了，但是你就是告诉自己，要跳槽，得提前做好准备把</p><p>所以你一边所谓的准备，一边能拖一天是一天</p><p>比如：让你来做分享，你可能一直在准备，总觉得还没准备好</p><p>内心潜台词：我还没准备好</p><h5 id="寻找刺激型"><a href="#寻找刺激型" class="headerlink" title="寻找刺激型"></a>寻找刺激型</h5><p><img src="http://yzwpic.weimayi.cn/img/image-20230308161007214.png" alt="image-20230308161007214"></p><p>他们觉得自己天生就是来拯救世界的，所以总给自己加戏</p><p>好多事就是故意压着不做，非等到最后火烧眉毛了，再玩命搏一把</p><p>要的就是演出绝地逢生，力挽狂澜式的英雄归来</p><p>比如，考试还有一个月，天天玩，等到考试头一天，熬个通宵，第二天早上八点直接进考场，要的就是一个奇迹</p><p>这种就是篮球比赛，绝杀看多了</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230321184008552.png" alt="image-20230321184008552"></p><h4 id="如何摆脱拖延症"><a href="#如何摆脱拖延症" class="headerlink" title="如何摆脱拖延症"></a>如何摆脱拖延症</h4><p>几个技巧解决日常生活中的拖延症</p><h5 id="一、三秒启动法"><a href="#一、三秒启动法" class="headerlink" title="一、三秒启动法"></a>一、三秒启动法</h5><p>这招用于早起非常有效，闹钟一响，喊个一二三，然后马上坐起来，不要给自己思考的时间，把自己当做一台机器，冷漠而听话的机器</p><h5 id="二、2分钟原则"><a href="#二、2分钟原则" class="headerlink" title="二、2分钟原则"></a>二、2分钟原则</h5><p>凡是2分钟内可以完成的事，立刻去做不要犹豫</p><p>我们的大脑都擅长分析处理，不擅长记忆，所以不要给大脑反应的机会，通俗点说就是趁大脑不注意，就已经把事情做了</p><p>例如：</p><p>1.吃完饭立刻洗碗，分分钟的事</p><p>2.用好东西，物归原处，下次再找轻松很多</p><p>3.想给谁打电话，立刻打</p><h5 id="三、5分钟原则"><a href="#三、5分钟原则" class="headerlink" title="三、5分钟原则"></a>三、5分钟原则</h5><p>不要管是否能够完成，先做5分钟，然后再决定要不要继续做下去</p><p>这5分钟要求注意力高度集中，做着做着你可能就发现已经进入了工作状态</p><p>开动前给自己一个5分钟高度集中精神工作的时刻，全力以赴，迅速进入工作状态</p><p>例如：</p><p>1.看书，先开始看个5分钟</p><p>2.写作，从标题开始写</p><p>3.整理书柜，从眼前这本书开始</p><h5 id="四、随时记录"><a href="#四、随时记录" class="headerlink" title="四、随时记录"></a>四、随时记录</h5><p>任何时候的灵感、想法、思路等一切东西，觉得有用就务必记录下来，因为分分钟你就可能忘记，只有记录下来才有实现的可能。</p><p>例如：</p><p>1.关于工作的想法</p><p>2.关于给亲人的礼物</p><p>3.创作</p><h5 id="五、做好自己该做的事（针对逃避压力型）"><a href="#五、做好自己该做的事（针对逃避压力型）" class="headerlink" title="五、做好自己该做的事（针对逃避压力型）"></a>五、做好自己该做的事（针对逃避压力型）</h5><p><strong>ABC原理</strong></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230309105717391.png" alt="image-20230309105717391"></p><p>“A”是事件的发生</p><p>“B”是你对这件事的看法</p><p>“C”是带来的压力状况</p><p>我们总希望通过改变”A“，来改变”C”</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230309110432988.png" alt="image-20230309110432988"></p><p>当你月薪1万，你就惦记2万</p><p>当你月薪2万，就会惦记3万</p><p>你的压力，永远不会在你赚了更多钱，或者改变了某种状况以后，变得更少</p><p>怎么办？</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230309110638186.png" alt="image-20230309110638186"></p><p>”B“就是你对这件事的看法，也就是你的世界观，价值观</p><p>佛教对B的解读</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230309110958465.png" alt="image-20230309110958465"></p><p>佛教的人四大皆空</p><p>佛教讲的是一切皆有因果</p><p>你遇到的事，好或者不好，早就定了，没什么好纠结的</p><p>孔夫子对B的解读</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230309111119109.png" alt="image-20230309111119109"></p><p>你该努力的努力了，其他的，随他去吧</p><h5 id="六、拆解任务"><a href="#六、拆解任务" class="headerlink" title="六、拆解任务"></a>六、拆解任务</h5><p>把一个大目标，分解成一个个更容易完成的任务。</p><p>项目管理里，有一个非常有名的工作方法，叫做WBS，也就是工作分解结构</p><p>WBS：Work Breakdown Structure，就是工作分解结构。把一个大项目，分解成比较小的、容易管理和交付的工作包</p><p>WBS</p><p><a href="https://baijiahao.baidu.com/s?id=1722151683664818477&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1722151683664818477&amp;wfr=spider&amp;for=pc</a></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230321204401293.png" alt="image-20230321204401293"></p><p>有一个小故事，就是将这种工作方法的：</p><p>有一天，有一个老钟表对一个小钟表说：你一年要摆31536000下</p><p>小钟表说：这么多怎么可能呢</p><p>老钟表说：忘掉那个数字，你只需要一秒钟摆一下就可以了</p><p>小钟表：一秒钟摆一下不难啊</p><p>一年过去了，他成功的摆了3000多万下</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308162649096.png" alt="image-20230308162649096"></p><p>绝大时候，你的拖延是因为一整个大任务摆在你面前，想想就觉得太难了，所以你就习惯性的逃避</p><p>试一试，把任务拆分</p><p>比如这次的演讲，我觉得一上来就弄一个PPT太难了，我就先列一个目录，然后根据目录来写章节，最后再整理成PPT</p><p>比如你要出个系列教程，一上来让你写太难了，你可以从一篇篇的小文章开始写起，写的多了，将他们集合在一起，就是一篇系列教程</p><p>最开始的任务不要排的太满，难度太大，这样你很可能完不成，会导致你产生抵触情绪</p><p>初期可以给自己安排简单轻松的任务，慢慢增加任务量，逐渐让自己适应</p><p>”完成好于完美“</p><p>所以，有计划了就去做，有灵感了就去做，不要让拖延症拖了后腿。</p><p>比如把大象装冰箱，总共分几步</p><p>第一步：把冰箱门打开</p><p>第二步：把大象放进去</p><p>第三步：把冰箱门关上</p><h5 id="七、明确优先级"><a href="#七、明确优先级" class="headerlink" title="七、明确优先级"></a>七、明确优先级</h5><p>按时间四象限法则，给任务分类，并排序。确定任务的优先级。</p><p>时间管理工具：时间四象限</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230321183648950.png" alt="image-20230321183648950"></p><h5 id="第一，不重要不紧急的事，少做"><a href="#第一，不重要不紧急的事，少做" class="headerlink" title="第一，不重要不紧急的事，少做"></a>第一，不重要不紧急的事，少做</h5><p>iphone手机指纹解锁，机构调查的结果，一天80次</p><p>可能就是为了数一下朋友圈里的赞，或者随便打开什么APP，看一眼然后再关掉</p><p>绝大部分人的时间就是这样被浪费掉的</p><p>只有两种状态：一、疲于应对 二、虚度光阴</p><p>有效的办法，就是把手机放远一点</p><h5 id="第二、紧急不重要的事，快做"><a href="#第二、紧急不重要的事，快做" class="headerlink" title="第二、紧急不重要的事，快做"></a>第二、紧急不重要的事，快做</h5><p>有些小事，没那么重要，可是不做又不行</p><p>订外卖、发快递这些小事</p><p>有效的办法，就是快速做，别想，别合计，别占用精力</p><p>像订外卖，有些人，特别是选择困难的，可能要挑选个半天，我之前就弄了一个表格，周一到周五，这样我就可以不用思考，快速下单</p><h5 id="第三、重要不紧急的事，早做"><a href="#第三、重要不紧急的事，早做" class="headerlink" title="第三、重要不紧急的事，早做"></a>第三、重要不紧急的事，早做</h5><p>当你发现有重要有紧急的事特别多，原因只有一个，就是”重要不紧急的事“，你从来不早做</p><p>比如：客户bug提了好多次了，没有早点解决，等出了大问题了，才去处理</p><h5 id="工作中，70-80-的时间都应该被用来处理”重要不紧急“的事情"><a href="#工作中，70-80-的时间都应该被用来处理”重要不紧急“的事情" class="headerlink" title="工作中，70%-80%的时间都应该被用来处理”重要不紧急“的事情"></a>工作中，70%-80%的时间都应该被用来处理”重要不紧急“的事情</h5><p>否则就要不断处理又重要又紧急的事</p><h5 id="八、完成比完美更重要（针对追求完美型）"><a href="#八、完成比完美更重要（针对追求完美型）" class="headerlink" title="八、完成比完美更重要（针对追求完美型）"></a>八、完成比完美更重要（针对追求完美型）</h5><p>不要拖到一切都准备好再开始，我们永远等不到那时候，别定太高的标准，别提前给自己设障碍，一旦决定了就去做，一旦做了就要看到结果。</p><p>就像今天这份ppt一样，我不可能翻阅资料，把所有的拖延症的原因都一一列举出来，也不可能等我翻阅各种书籍，所以我只列了三个，但这并不影响我做完这份ppt，不影响我的分享</p><h5 id="九、回归初心"><a href="#九、回归初心" class="headerlink" title="九、回归初心"></a>九、回归初心</h5><p>我们在最后关头停止拖延，常常是因为外在的压力，比如领导的指令，比如学校的要求，比如项目截止时间，我们总是忘记，完成一件事情的意义是为了自己，为了自己的生活，为了自己的梦想</p><p>比起做这件事情，我们更应该关心的是，自己从做事的过程中学到了什么，提升了什么，成长了什么</p><p>当你意识到这一点，你就能找到动力重新开始工作</p><p>其实拖延最大的坏处不是耽误时间，而是使人变的犹豫，丧失信心，你会不断怀疑自己，觉得前途茫茫，人生无望。</p><p>执行力是拉开人与人之间差距的关键</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>什么是拖延症</p><p>拖延症的三个成因</p><p>以及解决拖延症的几个方法</p><p>希望对你有所帮助</p><p>分享一个网站</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件产品版本管理</title>
    <link href="/2024/03/%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html"/>
    <url>/2024/03/%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>版本管理，是对软件开发过程中特定功能的集合或特定代码构建结果进行管理。版本号是一个产品的表示，在一个产品的生命周期中具有唯一性。内部的版本管理可以帮助研发、测试、产品、工程等各部门对产品执行严格的定义，避免出现因版本不一致而造成沟通问题和项目延迟。</p><h3 id="版本管理工具："><a href="#版本管理工具：" class="headerlink" title="版本管理工具："></a>版本管理工具：</h3><p>GITLAB</p><h3 id="版本命名规则："><a href="#版本命名规则：" class="headerlink" title="版本命名规则："></a>版本命名规则：</h3><p>版本命名一般由三个部分组成，第一主版本号，第二次版本号，第三阶段版本号；</p><h3 id="版本号修改规则："><a href="#版本号修改规则：" class="headerlink" title="版本号修改规则："></a>版本号修改规则：</h3><p>主版本号为一个需求立项的项目版本号，主版本号一般在项目架构大改、整体改版或者累计功能较多时才会变更；主版本号加 1；主版本号一般由项目经理或者项目全体成员决定更改；</p><p>次版本号为一个项目需求迭代更改时进行变更，例如跑小二一期开发、数字党建三期开发等；主版本号不变，次版本号加 1，后面的版本号复位为 0；次版本号一般由项目经理或者项目全体成员决定更改；</p><p>阶段版本号为做了一些小功能修复和修改时进行变更，例如部分应用上下架、邀请函增加工作单位及职务字段等；阶段版本号一般由开发人员决定更改；</p><h3 id="项目流程："><a href="#项目流程：" class="headerlink" title="项目流程："></a>项目流程：</h3><ol><li><p>首先项目经理了解项目整体需求，梳理项目需求和目标；</p></li><li><p>产品经理根据项目需求和目标，进行原型设计；</p></li><li><p>根据原型做WBS（工作任务分解），分解后将需求分派给UI设计师，开发人员，测试人员，运维人员，预估项目开发时间、上线时间，通过语雀做项目进度计划，同时标注该项目的版本号；</p></li><li><p>项目开发测试通过之后，通知需求方验收；</p></li><li><p>通过验收之后，发布项目，通知需求方，并邮件通知全体成员。</p></li></ol><h3 id="分支管理："><a href="#分支管理：" class="headerlink" title="分支管理："></a>分支管理：</h3><h4 id="1-master分支"><a href="#1-master分支" class="headerlink" title="1.master分支"></a>1.master分支</h4><p>存放的应该是随时可供在生产环境中部署的代码<br>当项目开发完成，并且通过测试和验收之后，需要将develop分支合并到master分支，再将master分支部署到正式环境。同时，每一次部署，都要标记版本号标签（TAG）。该分支，由管理员负责维护。</p><h4 id="2-develop分支"><a href="#2-develop分支" class="headerlink" title="2.develop分支"></a>2.develop分支</h4><p>develop分支是共有的开发分支<br>测试环境始终发布develop分支，开发人员需要将各自的feature分支合并至该分支，再将develop分支发布到测试环境。<br>分支命名：develop</p><h4 id="3-feature分支"><a href="#3-feature分支" class="headerlink" title="3.feature分支"></a>3.feature分支</h4><p>在开发一项新的软件功能的时候使用，这个分支上的代码变更最终合并回develop分支<br>分支命名：feature&#x2F;分支说明-日期<br>例如：接到一个数字党建三期的开发任务，就从develop分支拉出一个分支，并命名为：featrue&#x2F;digitalParty3-20220801。然后在该分支下进行开发，开发结束，将该分支合并至develop分支（此时的代码必须为可运行的，不能影响到他人），整体开发结束后删掉该feature分支。<br>开发人员的每一个新功能开发都应该在该类分支下进行。<br>生命周期：开发一个新功能开始，完成新功能开发并合并回develop分支结束。</p><h4 id="4-hotfix分支"><a href="#4-hotfix分支" class="headerlink" title="4.hotfix分支"></a>4.hotfix分支</h4><p>在master分支发现bug时，在master的分支上派生出一个hotfix分支，修改完成后，合并至master分支，合并完成，删除该hotfixes分支。<br>分支命名：hotfix&#x2F;分支说明-日期<br>示例：hotfix&#x2F;digitalPartyBug-20220801<br>生命周期：发现master分支bug开始，完成master分支bug结束。</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发的优化策略</title>
    <link href="/2024/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5.html"/>
    <url>/2024/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5.html</url>
    
    <content type="html"><![CDATA[<p>在微信小程序的开发过程中，性能和用户体验是衡量产品质量的重要指标。我根据以往的实战经验，总结一下微信小程序性能优化的策略。</p><h3 id="一、为什么需要性能优化？"><a href="#一、为什么需要性能优化？" class="headerlink" title="一、为什么需要性能优化？"></a>一、为什么需要性能优化？</h3><p>在快节奏的现代生活中，用户对移动应用的响应速度和流畅度有着极高的要求。性能优化不仅是提升用户体验的关键，还能有效降低服务器压力、减少流量消耗。一个经过良好优化的小程序，能够在保证功能丰富的同时，提供更加稳定、快速的服务。</p><h3 id="二、代码层面的优化策略"><a href="#二、代码层面的优化策略" class="headerlink" title="二、代码层面的优化策略"></a>二、代码层面的优化策略</h3><h4 id="1-使用第三方框架进行开发"><a href="#1-使用第三方框架进行开发" class="headerlink" title="1. 使用第三方框架进行开发"></a>1. 使用第三方框架进行开发</h4><p>比如使用Uniapp进行小程序开发，可以有效提升开发效率，还能支持多端发布。</p><p>打包时，框架利用webpack等构建工具进行代码压缩和混淆，可以有效减小代码体积，提高加载速度。压缩后的代码去除了不必要的空格、注释和冗余代码，使得文件更加紧凑；而混淆则通过改变变量名、函数名等方式，增加了代码的复杂度，提高了反编译的难度，从而保护了代码的安全。</p><h4 id="2-资源懒加载"><a href="#2-资源懒加载" class="headerlink" title="2. 资源懒加载"></a>2. 资源懒加载</h4><p>对于非首屏资源（如图片、视频等），可以采用懒加载的方式，仅在用户滚动到相关位置时再进行加载。这样可以减少初始加载时间，提升首屏渲染速度。此外，对于大型资源文件，利用分片加载或者放到CDN上提高加载速度。</p><h3 id="三、性能调优实践"><a href="#三、性能调优实践" class="headerlink" title="三、性能调优实践"></a>三、性能调优实践</h3><h4 id="1-启动速度优化"><a href="#1-启动速度优化" class="headerlink" title="1. 启动速度优化"></a>1. 启动速度优化</h4><p>减少全局数据的初始化时间，将不常用的页面进行分包，独立加载，可以显著提升小程序的启动速度。</p><h4 id="2-页面渲染加速"><a href="#2-页面渲染加速" class="headerlink" title="2. 页面渲染加速"></a>2. 页面渲染加速</h4><p>使用<code>wx:key</code>优化列表渲染，确保每个组件都有唯一的key值，以便WebView能够更高效地更新DOM。避免在<code>setData</code>中大量更新无关数据，仅更新需要变化的部分，可以减少数据的传输量和渲染时间。</p><h4 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3. 内存管理"></a>3. 内存管理</h4><p>在页面卸载或组件销毁时，应该主动清理定时器、监听器等资源，防止内存泄漏。</p><h3 id="四、网络请求与数据处理优化"><a href="#四、网络请求与数据处理优化" class="headerlink" title="四、网络请求与数据处理优化"></a>四、网络请求与数据处理优化</h3><h4 id="1-合并请求与缓存策略"><a href="#1-合并请求与缓存策略" class="headerlink" title="1. 合并请求与缓存策略"></a>1. 合并请求与缓存策略</h4><p>减少HTTP请求次数是提升性能的关键之一。可以通过合并相似请求、使用缓存策略等方式来降低网络开销。对于频繁请求的数据，可以考虑在客户端或服务器端进行缓存，以避免重复请求带来的性能损耗。</p><h4 id="2-数据处理优化"><a href="#2-数据处理优化" class="headerlink" title="2. 数据处理优化"></a>2. 数据处理优化</h4><p>在数据处理方面，应尽量避免在主线程上进行复杂的计算任务。可以利用Web Worker等技术将耗时任务放到后台线程中执行，以免阻塞主线程导致界面卡顿。</p><h3 id="五、用户体验优化技巧"><a href="#五、用户体验优化技巧" class="headerlink" title="五、用户体验优化技巧"></a>五、用户体验优化技巧</h3><h4 id="1-交互设计优化"><a href="#1-交互设计优化" class="headerlink" title="1. 交互设计优化"></a>1. 交互设计优化</h4><p>合理的交互设计能够提升用户的操作效率和满意度。例如，扩大点击区域范围、使用清晰的按钮标签、提供适当的反馈提示、优化表单输入体验等。</p><p>还可以在页面数据加载时展示骨架屏动画，提升等待时的视觉反馈。</p><h4 id="2-性能监测与持续迭代"><a href="#2-性能监测与持续迭代" class="headerlink" title="2. 性能监测与持续迭代"></a>2. 性能监测与持续迭代</h4><p>利用微信开发者工具的性能面板监测CPU、内存使用情况以及FPS等指标。根据监测结果进行针对性的优化并持续迭代。</p><p><img src="http://yzwpic.weimayi.cn/img/image-20241031111850747.png" alt="image-20241031111850747"></p>]]></content>
    
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpak中babel-loader的工作流程</title>
    <link href="/2024/02/webpak%E4%B8%ADbabel-loader%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.html"/>
    <url>/2024/02/webpak%E4%B8%ADbabel-loader%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<p><code>babel-loader</code> 负责将 JavaScript 代码转换为向后兼容的代码，以便可以在不同环境中运行。<code>babel-loader</code> 在 Webpack 构建过程中的处理步骤主要包括：</p><ol><li><strong>解析（Parsing）</strong>：<ul><li><code>babel-loader</code> 首先读取文件系统中的源文件，获取源代码。</li></ul></li><li><strong>配置（Configuration）</strong>：<ul><li>根据项目中的 <code>.babelrc</code> 或 <code>babel.config.js</code> 配置文件，<code>babel-loader</code> 确定需要应用的 Babel 预设（presets）和插件（plugins）。</li></ul></li><li><strong>转换（Transformation）</strong>：<ul><li>使用 Babel 预设和插件对源代码进行转换。包括语法转换（如将 ES6+ 代码转换为 ES5）、代码压缩、模块化处理等。</li></ul></li><li><strong>Polyfill（垫片）</strong>：<ul><li>如果配置了相应的 polyfills，<code>babel-loader</code> 会在转换过程中添加必要的垫片代码，以支持那些在目标环境中不可用的 JavaScript 功能。</li></ul></li><li><strong>生成（Generation）</strong>：<ul><li>转换后的代码被生成为新的 JavaScript 代码，这些代码是兼容目标环境的。</li></ul></li><li><strong>缓存（Caching）</strong>：<ul><li><code>babel-loader</code> 会将转换结果缓存起来。如果文件没有发生变化，<code>babel-loader</code> 会直接从缓存中读取结果，避免重复的转换工作。</li></ul></li><li><strong>返回结果（Returning Results）</strong>：<ul><li>处理完所有步骤后，<code>babel-loader</code> 将转换后的代码返回给 Webpack，Webpack 会将这些代码作为模块的一部分加入到最终的打包文件中。</li></ul></li></ol><p><code>babel-loader</code> 确保 JavaScript 代码可以被转换并优化，以适应不同的运行环境。</p>]]></content>
    
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx解决跨域问题</title>
    <link href="/2024/02/Nginx%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html"/>
    <url>/2024/02/Nginx%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Cookie简介"><a href="#一、Cookie简介" class="headerlink" title="一、Cookie简介"></a>一、Cookie简介</h3><h4 id="1、Cookie是什么"><a href="#1、Cookie是什么" class="headerlink" title="1、Cookie是什么"></a>1、Cookie是什么</h4><p>cookie是由网络服务器存储在你电脑硬盘上的一个txt类型的小文件，它和你的网络浏览行为有关，所以存储在你电脑上的cookie就好像你的一张身份证，你电脑上的cookie和其他电脑上的cookie是不一样的。</p><h4 id="2、Cookie与Session的区别"><a href="#2、Cookie与Session的区别" class="headerlink" title="2、Cookie与Session的区别"></a>2、Cookie与Session的区别</h4><p>session机制采用的是在服务器端保持状态的方案，而cookie机制则是在客户端保持状态的方案，cookie又叫会跟踪机制。打开一次浏览器到关闭浏览器算是一次会话。</p><p>HTTP协议是一种无状态协议，在数据交换完毕后，服务器端和客户端的链接就会关闭，每次交换数据都需要建立新的链接。此时，服务器无法从链接上跟踪会话。cookie可以跟踪会话，弥补HTTP无状态协议的不足。</p><h4 id="3、Cookie是前后端共享的"><a href="#3、Cookie是前后端共享的" class="headerlink" title="3、Cookie是前后端共享的"></a>3、Cookie是前后端共享的</h4><p>因为在发起请求的时候会带上Cookie，在后端我们可以使用getCookies()的方法来获取这次请求中的Cookies。</p><h3 id="二、Cookie的使用场景"><a href="#二、Cookie的使用场景" class="headerlink" title="二、Cookie的使用场景"></a>二、Cookie的使用场景</h3><p>登录，通过Cookie来检查登录状态，并且可以通过Cookie的过期时间来设置多长时间内不用重复登录设置客户端风格，其实这就是为什么不同电脑登录同一个账号设置的风格无法更新过来的原因以及其他对安全性要求不高的信息保存场景</p><h3 id="三、Cookie的跨域问题"><a href="#三、Cookie的跨域问题" class="headerlink" title="三、Cookie的跨域问题"></a>三、Cookie的跨域问题</h3><h4 id="1、什么是跨域问题？"><a href="#1、什么是跨域问题？" class="headerlink" title="1、什么是跨域问题？"></a>1、什么是跨域问题？</h4><p>首先我们打开一个页面按F12</p><p><img src="http://yzwpic.weimayi.cn/img/image-20240612100115665.png" alt="image-20240612100115665"></p><p>在应用中我们可以找到Cookie，其中的Domain就是Cookie所述的域名，跨域就是默认情况下Cookie是无法被携带到其他域名下的当一个请求url的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面url不同即为跨域</p><table><thead><tr><th>当前页面url</th><th>被请求页面url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td><td>跨域</td><td>协议不同（http&#x2F;https）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td>跨域</td><td>主域名不同（test&#x2F;baidu）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://blog.test.com/">http://blog.test.com/</a></td><td>跨域</td><td>子域名不同（www&#x2F;blog）</td></tr><tr><td><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td><td><a href="http://www.test.com:7001/">http://www.test.com:7001/</a></td><td>跨域</td><td>端口号不同（8080&#x2F;7001）</td></tr></tbody></table><h4 id="2、Cookie的属性"><a href="#2、Cookie的属性" class="headerlink" title="2、Cookie的属性"></a>2、Cookie的属性</h4><table><thead><tr><th></th><th><strong>Cookie的属性</strong></th></tr></thead><tbody><tr><td>名称</td><td>Cookie的name</td></tr><tr><td>值</td><td>Cookie的value</td></tr><tr><td>Domain</td><td>Cookie的域。如果设成xxx.com(一级域名)，那么子域名x.xxx.com(二级域名)，都可以使用xxx.com的Cookie</td></tr><tr><td>Path</td><td>Cookie的路径。如果设为&#x2F;，则同域名全部路径均可使用该Cookie。如果设为&#x2F;xxx&#x2F;，则只有路径为&#x2F;xxx&#x2F;可以使用该Cookie。</td></tr><tr><td>Expires &#x2F; Max-Age</td><td>Cookie的超时时间。如果值为时间，则在到达指定时间后Cookie失效。如果值为Session(会话)，Cookie会同Session一起失效，当整个浏览器关闭的时候Cookie失效。</td></tr><tr><td>Size</td><td>Cookie的大小。</td></tr><tr><td>HttpOnly</td><td>值为true时，Cookie只会在Http请求头中存在，不能通过doucment.cookie(JavaScript)访问Cookie。</td></tr><tr><td>Secure</td><td>值为true时，只能通过https来传输Cookie。</td></tr><tr><td>SameSite</td><td>值为Strict，完全禁止第三方Cookie，跨站时无法使用Cookie。值为Lax，允许在跨站时使用Get请求携带Cookie，下面有一个表格介绍Lax的Cookie使用情况。值为None，允许跨站跨域使用Cookie，前提是将Secure属性设置为true。Priority ：Cookie的优先级。值为Low&#x2F;Medium&#x2F;High，当Cookie数量超出时，低优先级的Cookie会被优先清除。</td></tr></tbody></table><h4 id="3、如何解决跨域问题"><a href="#3、如何解决跨域问题" class="headerlink" title="3、如何解决跨域问题"></a>3、如何解决跨域问题</h4><p>这里介绍一个比较常用的方式就是使用Nginx进行反向代理。</p><p>我们只需要配置nginx，在一个服务器上配置多个前缀来转发http&#x2F;https请求到多个真实的服务器即可。这样，这个服务器上所有url都是相同的域 名、协议和端口。因此，对于浏览器来说，这些url都是同源的，没有跨域限制。而实际上，这些url实际上由物理服务器提供服务。</p><p>在 nginx 中配置反向代理服务器，将客户端的请求转发到后端服务器，并在转发过程中添加相应的响应头。例如，假设前端服务器运行在 <a href="http://frontend.example.com,后端服务器运行在/">http://frontend.example.com，后端服务器运行在</a> <a href="http://backend.example.com,则可以在/">http://backend.example.com，则可以在</a> nginx 中配置如下的反向代理服务器：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> frontend.example.com;<br><br>    <span class="hljs-section">location</span> /api &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://backend.example.com;<br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin http://frontend.example.com;<br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Credentials <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述配置中，location &#x2F;api 将客户端请求中的 &#x2F;api 转发到后端服务器的对应接口。<br><code>add_header Access-Control-Allow-Origin http://frontend.example.com</code> 表示允许来自 <a href="http://frontend.example.com/">http://frontend.example.com</a> 的跨域请求。<br><code>add_header Access-Control-Allow-Credentials true </code>表示允许跨域请求携带 cookie。</p><p>设置相应的响应头在响应头中添加相应的跨域设置，以允许客户端发送跨域请求和携带 cookie。例如，添加 Access-Control-Allow-Origin 和 Access-Control-Allow-Credentials 头部：Access-Control-Allow-Origin: <a href="http://frontend.example.com/">http://frontend.example.com</a></p><p>Access-Control-Allow-Credentials: true这样客户端在向后端服务器发送请求时，就能携带 cookie，并允许跨域请求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac用electron-forge打包exe包</title>
    <link href="/2024/01/mac%E7%94%A8electron-forge%E6%89%93%E5%8C%85exe%E5%8C%85.html"/>
    <url>/2024/01/mac%E7%94%A8electron-forge%E6%89%93%E5%8C%85exe%E5%8C%85.html</url>
    
    <content type="html"><![CDATA[<h4 id="导入-Forge到你的项目"><a href="#导入-Forge到你的项目" class="headerlink" title="导入 Forge到你的项目"></a>导入 Forge到你的项目</h4><p>将 Electron Forge 的 CLI 工具包安装到项目的 devDependencies 依赖中，然后使用现成的转化脚本将项目导入至 Electron Forge。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install --save-dev @electron-forge/cli<br>npx electron-forge <span class="hljs-keyword">import</span><br></code></pre></td></tr></table></figure><p>转换脚本完成后，Forge 会将一些脚本添加到您的 <code>package.json</code> 文件中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//...</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron-forge start&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;package&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron-forge package&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;make&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron-forge make&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><h4 id="打包exe包"><a href="#打包exe包" class="headerlink" title="打包exe包"></a>打包exe包</h4><p>首先在package.json，scripts里面新增</p><p>–arch x64代表64位，<br>–platform win32 代表windows包</p><blockquote><p>“package2”: “electron-forge package –arch x64 –platform win32”,<br>“make2”: “electron-forge make –arch x64 –platform win32”,</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"> &quot;description&quot;: &quot;test <span class="hljs-keyword">build</span> app<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>author<span class="hljs-string">&quot;: &quot;</span>Thaneyang<span class="hljs-string">&quot;,</span><br><span class="hljs-string"> &quot;</span>scripts<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">   &quot;</span><span class="hljs-keyword">start</span><span class="hljs-string">&quot;: &quot;</span>electron-forge <span class="hljs-keyword">start</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">   &quot;</span>package<span class="hljs-string">&quot;: &quot;</span>electron-forge package<span class="hljs-string">&quot;,</span><br><span class="hljs-string">   &quot;</span>package2<span class="hljs-string">&quot;: &quot;</span>electron-forge package --arch x64 --platform win32<span class="hljs-string">&quot;,</span><br><span class="hljs-string">   &quot;</span>make<span class="hljs-string">&quot;: &quot;</span>electron-forge make<span class="hljs-string">&quot;,</span><br><span class="hljs-string">   &quot;</span>make2<span class="hljs-string">&quot;: &quot;</span>electron-forge make --arch x64 --platform win32<span class="hljs-string">&quot;</span><br><span class="hljs-string"> &#125;,</span><br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">    An unhandled rejection has occurred inside Forge:<br><span class="hljs-keyword">Error: </span>Wrapper command &#x27;wine64&#x27; not found on the system. Run `brew install --cask wine-stable` to install 64-bit wine on macOS via Homebrew.<br><br>Wine is required to use the appCopyright, appVersion, buildVersion, icon, and <br>win32metadata parameters for Windows targets.<br><br>See https://github.com/electron/electron-packager#building-windows-apps-from-non-windows-platforms for details.<br><br>Electron Forge was terminated. Location:<br></code></pre></td></tr></table></figure><p>原因是mac没有windows环境，需要运行brew install –cask wine-stable安装一下</p><p>结果brew版本太低，外网不稳定，又升不上去</p><p>后来又找了个国内镜像<br>直接运行，按照中文提示操作，可以直接升级brew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span> speed<br></code></pre></td></tr></table></figure><p>最后打包成功！</p><h4 id="打包注意事项"><a href="#打包注意事项" class="headerlink" title="打包注意事项"></a>打包注意事项</h4><p>这里有两种形式的打包，分别在不同场景下使用<br><code>electron-forge package</code> 只是打包成一个目录到out目录下，注意这种打包一般用于调试，并不是用于分发<br><code>electron-forge make</code> 这个才会打出真正的分发包，放在out\make目录下<br>两个命令都可以使用–arch 和–platform参数来指定系统结构和平台，但是需要注意的是只能打包你当前机器的平台包，比如你用OSX是无法打出windows平台安装包的；这两个参数不填写的话，默认和当前系统一致<br>另外，make是用squirrel打出来的包，安装后是放在%localappdata%下的</p>]]></content>
    
    
    
    <tags>
      
      <tag>electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs中脚手架的实现原理</title>
    <link href="/2023/12/nodejs%E4%B8%AD%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"/>
    <url>/2023/12/nodejs%E4%B8%AD%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="要了解nodejs脚手架的实现原理，首先要能回答以下三个问题"><a href="#要了解nodejs脚手架的实现原理，首先要能回答以下三个问题" class="headerlink" title="要了解nodejs脚手架的实现原理，首先要能回答以下三个问题"></a>要了解nodejs脚手架的实现原理，首先要能回答以下三个问题</h2><h2 id="一、为什么全局安装-vue-cli后会添加的命令为vue？"><a href="#一、为什么全局安装-vue-cli后会添加的命令为vue？" class="headerlink" title="一、为什么全局安装@vue/cli后会添加的命令为vue？"></a>一、为什么全局安装<code>@vue/cli</code>后会添加的命令为vue？</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><p>通过<code>which</code>查看<code>vue</code>命令的实际路径</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230213155515320.png" alt="image-20230213155515320"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/bin<br></code></pre></td></tr></table></figure><p><code>bin</code>目录存放所有可执行文件</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230213160832281.png" alt="image-20230213160832281"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lrwxr</span>-xr-x  <span class="hljs-number">1</span> yzw   admin    <span class="hljs-number">39</span>B Feb <span class="hljs-number">13</span> <span class="hljs-number">15</span>:<span class="hljs-number">22</span> vue -&gt; ../lib/node_modules/@vue/cli/bin/vue.js<br></code></pre></td></tr></table></figure><p>第一个字母<code>l</code>就表示软链接</p><p>我们看到，其中的一项<code>vue</code>命令实际是指向后面的地址</p><p>我们进入后面的地址，<code>vue-cli</code>的bin目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules<span class="hljs-regexp">/@vue/</span>cli/bin<br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/image-20230213161212040.png" alt="image-20230213161212040"></p><p>看到实际执行的是这个vue.js</p><p>我们返回上一层的cli目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules<span class="hljs-regexp">/@vue/</span>cli<br></code></pre></td></tr></table></figure><p>查看目录下的package.json文件</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230213171731909.png" alt="image-20230213171731909"></p><p>vue就是指令的名称，vue的值就是执行的文件</p><h2 id="二、全局安装-vue-cli时发生了什么？"><a href="#二、全局安装-vue-cli时发生了什么？" class="headerlink" title="二、全局安装@vue/cli时发生了什么？"></a>二、全局安装<code>@vue/cli</code>时发生了什么？</h2><p>全局安装就是把<code>@vue/cli</code>下载到<code>/usr/local/lib/node_modules/</code>目录下</p><p>下载完成之后，就会解析package.json文件下的bin</p><p>发现有配置bin，就会在 node的bin目录下，创建一个软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/bin<br></code></pre></td></tr></table></figure><h2 id="三、执行vue命令时发生了什么？为什么vue指向一个js文件，我们却可以直接通过vue命令执行它？"><a href="#三、执行vue命令时发生了什么？为什么vue指向一个js文件，我们却可以直接通过vue命令执行它？" class="headerlink" title="三、执行vue命令时发生了什么？为什么vue指向一个js文件，我们却可以直接通过vue命令执行它？"></a>三、执行<code>vue</code>命令时发生了什么？为什么<code>vue</code>指向一个js文件，我们却可以直接通过<code>vue</code>命令执行它？</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> vue<br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/image-20230214110859931.png" alt="image-20230214110859931"></p><p>执行vue 等价于执行&#x2F;usr&#x2F;local&#x2F;bin&#x2F;vue</p><p>查看真实的执行文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ll <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>vue<br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/image-20230214111044283.png" alt="image-20230214111044283"></p><p>看到真实的执行文件是..&#x2F;lib&#x2F;node_modules&#x2F;@vue&#x2F;cli&#x2F;bin&#x2F;vue.js</p><h3 id="自己创建一个全局可执行命令"><a href="#自己创建一个全局可执行命令" class="headerlink" title="自己创建一个全局可执行命令"></a>自己创建一个全局可执行命令</h3><h4 id="一、创建本地可执行文件"><a href="#一、创建本地可执行文件" class="headerlink" title="一、创建本地可执行文件"></a>一、创建本地可执行文件</h4><p>创建一个目录vue-test</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mkdi vue-<span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p>新建文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">vim test.js<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p>设置文件的可读写执行权限</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">chmod <span class="hljs-number">777</span> <span class="hljs-keyword">test</span><span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><p>直接是无法执行的，因为js需要一个解释器才能执行</p><p>所以，需要在test.js文件顶部加入一句<code>#!/usr/bin/env node</code>，告诉终端去环境变量<code>/usr/bin/env</code>中找到node命令，再去执行该文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/image-20230214111937987.png" alt="image-20230214111937987"></p><p>就可以直接执行该文件</p><h4 id="二、创建全局命令"><a href="#二、创建全局命令" class="headerlink" title="二、创建全局命令"></a>二、创建全局命令</h4><p>1.复制当前项目路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>输出<code>/Users/yzw/test-projects/vue-test</code></p><p>2.进入node的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/bin<br></code></pre></td></tr></table></figure><p>3.创建软链接</p><p>创建一个全局指令<code>vuetest</code>指向<code>test.js</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">ln -s /Users/yzw/<span class="hljs-keyword">test</span>-projects/vue-<span class="hljs-keyword">test</span>/<span class="hljs-keyword">test</span><span class="hljs-number">.</span><span class="hljs-keyword">js</span> vuetest<br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/image-20230214124758682.png" alt="image-20230214124758682"></p><p>4.全局命令创建完成</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230214124839169.png" alt="image-20230214124839169"></p>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构化思考</title>
    <link href="/2023/12/%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E8%80%83.html"/>
    <url>/2023/12/%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E8%80%83.html</url>
    
    <content type="html"><![CDATA[<p>汇报工作，你想不想，说完，领导就明白了你的突出贡献？</p><p>与人沟通，你想不想，几句话，就让别人了解你想讲什么？</p><p>面对大量杂乱的信息，你想不想，短时间内就能梳理出结构，找到关键点，提高思考的效率？</p><p>要实现这些愿望，需要我们具备一种思维——结构化思维。思考有了结构，一切都清晰了。</p><p>并且，这种思维可以通过刻意练习掌握。一旦学会，终身受益。</p><h3 id="一、想清楚，很重要"><a href="#一、想清楚，很重要" class="headerlink" title="一、想清楚，很重要"></a><strong>一、想清楚，很重要</strong></h3><p>回忆一下你在日常工作中，有没有遇到这样的场景？</p><p>和领导汇报工作，说了十分钟，领导眉头皱起来了，“说重点！”</p><p>接着你有点慌了，越说感觉越乱，脑子一片空白。最后领导让你停下，让你想清楚了再给他说。</p><p>这种场景，经常发生。<strong>原因是什么？说话人没有说清楚。</strong></p><p><strong>怎样才能说清楚？说清楚的前提是想清楚。</strong></p><p><strong>怎么判断是否想清楚了？有没有一个清晰的思考结构。</strong></p><p>有结构地思考，我们称之为结构化思维。</p><p>如果你有结构化思维，汇报工作就能轻松应对。</p><p>首先，结构化思考，更系统、更全面。</p><p>比如，“如何把200毫升的水装进100毫升的杯子里？”</p><p><img src="http://yzwpic.weimayi.cn/img/4ee5a8b5f04d31cca8cf45d693eb49af0e311a062e612-Lzh5PS.png" alt="查看图片"></p><p>看到这个问题，你的第一反应是什么？问题不成立或者没有答案？</p><p>有结构的人，会怎么思考？</p><p>首先分析原因，水倒杯子里，为什么会流出去？是哪些原因造成的？</p><p>杯子小、水是液态会流动、有重力。</p><p>所以针对这个问题，无外乎三个方面原因：第一，杯子本身；第二，水本身；第三，外部环境。</p><p>从这三个方面去审视这个问题的时候，就找到了这个问题的结构，有了这个结构以后，就有了问题的答案。</p><blockquote><p>第一，从杯子的角度。换个大杯子或者拿两个杯子。</p><p>第二，水本身。水是液态，要流动，不让它流有什么办法？冻成冰。</p><p>第三，外部环境。有重力，哪没重力？太空。</p></blockquote><p>所以，这个问题有3个答案。</p><p>其实答案不重要，重要的是，因为一种思维方式，我们把原来看似无解的问题，不仅解决了，还找到了3个答案。</p><p><strong>所以，很多时候，面对一个问题，你没有答案，不是你不够聪明，不是你不够努力，也不是你没有足够的知识储备，而是你不会用一个思维方式，让它帮助你把事情想得更全面，更清楚。</strong></p><p>其次，结构化思考，更符合我们大脑的认知习惯。</p><p>大脑在处理信息的时候，有两个习惯：</p><blockquote><p>第一，接受不了太多信息，一次最多记忆的知识点数量是7；</p><p>第二，喜欢有规律的信息，会下意识地寻找信息之间的逻辑关系。</p></blockquote><p>所以，如果别人一下提供了很多杂乱无序的信息，你很难记，记了也很快就忘记了。</p><p>比如，下图这串数字，很难记。</p><p><img src="http://yzwpic.weimayi.cn/img/640.png" alt="图片"></p><p>而一旦，信息变得有规律，即使信息多，也能轻松记住。</p><p><img src="http://yzwpic.weimayi.cn/img/640-20231219152641366.png" alt="图片"></p><p>图片</p><p>当别人向你提供了很多零散、无规律的信息时，你就抓不住重点了，也记不住对方讲的什么。</p><p>我们换位思考一下，听汇报的领导就是这种感受，所以他才要求说重点。</p><p>所以一切与人沟通的场合，我们学会结构化地思考，把所有碎片化信息归类汇总，不仅减轻大脑的负担，而且降低沟通的成本。</p><p>最后，互联网时代，很多信息都是碎片化的，没有结构化思维，信息只是信息，看过就忘。如果构建了自己的结构化能力，接触到碎片信息，就能把它放到自己的知识体系中。</p><h3 id="二、“金字塔结构”帮你想清楚"><a href="#二、“金字塔结构”帮你想清楚" class="headerlink" title="二、“金字塔结构”帮你想清楚"></a><strong>二、“金字塔结构”帮你想清楚</strong></h3><p>结构化思维，最早也是由麦肯锡公司提出，并写成了一本书《金字塔原理》，最后被大家熟知。</p><p><img src="http://yzwpic.weimayi.cn/img/cdbf6c81800a19d875dc6cca35fa828ba71e4626.jpeg" alt="img"></p><p>所以“结构化思考”又被称为“金字塔原理”。</p><h4 id="1-什么是金字塔原理？"><a href="#1-什么是金字塔原理？" class="headerlink" title="1.什么是金字塔原理？"></a><strong>1.什么是金字塔原理？</strong></h4><p>金字塔原理，是一种重点突出、逻辑清晰、层次分明、简单易懂的结构化思考方式。</p><p><img src="http://yzwpic.weimayi.cn/img/640.png" alt="图片"></p><p>所谓塔尖，就是中心思想，是你想表达的所有核心要点；塔中，是由阐述支持中心思想的方法论构成；塔底，是由支撑方法论的案例组成，也就是论据。</p><p>由此，一个清晰的金字塔结构就呈现了！</p><p>金字塔原理可以概括为十六个字：</p><p><strong>结论先行，以上统下，归类分组，逻辑递进。</strong></p><p>展开来说就是，</p><p>① 先重要，后次要；</p><p>② 先总结，后具体；</p><p>③ 先框架，后细节；</p><p>④ 先结论，后原因；</p><p>⑤ 先结果，后过程；</p><p>⑥ 先论点，后论据。</p><p>一个人要表达的观点，必定是呈金字塔结构分布（一个大观点下统领多个小观点），因为大部分的人会先了解主要的、抽象的观点，然后再了解次要的观点。</p><h4 id="2-如何构建金字塔结构？"><a href="#2-如何构建金字塔结构？" class="headerlink" title="2.如何构建金字塔结构？"></a><strong>2.如何构建金字塔结构？</strong></h4><p>构建金字塔结构，有两种方式：</p><h5 id="①-先给结论，自上而下地找结构"><a href="#①-先给结论，自上而下地找结构" class="headerlink" title="① 先给结论，自上而下地找结构"></a><strong>① 先给结论，自上而下地找结构</strong></h5><p>通常，自上而下地找金字塔结构，更容易一些。</p><p>因为大脑最先思考的，往往是最容易确定的事情，也就是最上层的中心思想。</p><p>年终给老板汇报期一年的业绩时，肯定是先汇报一年的总业绩，再分别论述各个总数据下面的具体完成情况。</p><p>老板听汇报时间只有15分钟，不可能一上来就展开具体的详细数据，讲个没完没了。</p><p>有人问你：如何看待民营经济的现状？</p><p>不用结构，你可能会说：之前总体不太好，但是最近好点了。</p><p>这句话只能是你的一个感知，非常主观，缺乏结构，缺乏说服力，也不全面。在做商业决策的时候，弱势非常明显。</p><p>可是，如果你知道宏观环境分析比较常见的结构是PEST（Political政治层面, Economic经济层面, Social社会层面, Technological技术层面），你就可以从这4个方面思考，汇总观点，最后得出结论。</p><p>给别人讲述时，首先说出结论，再亮出4个支持的观点，说服力更强。</p><p>所以，自上而下的找结构，就是先提出核心思想，再依次列出支撑核心思想的具体观点。</p><h5 id="②-自下而上，归纳总结成结构"><a href="#②-自下而上，归纳总结成结构" class="headerlink" title="② 自下而上，归纳总结成结构"></a><strong>② 自下而上，归纳总结成结构</strong></h5><p>生活中，我们会遇到纷繁复杂的事物。</p><p>成长的过程，就是我们不断学习、不断归纳，将复杂世界里诸多的表象，归纳为各种认知模型的过程，这些过程，其实就是一次又一次自下而上的思考过程。</p><p>再举个例子，面对以下9种食物：葡萄、橘子、牛奶、咸鸭蛋、土豆、苹果、鸡蛋、酸奶、胡萝卜，如何快速记忆？</p><p>想快速记忆，仅仅将9种食物分组是不够的，最好能找出这9种食物的内在逻辑关系。比如：</p><p><img src="http://yzwpic.weimayi.cn/img/640-20230907162900725.png" alt="图片"></p><p>（9种食物的潜在逻辑关系）</p><p>分类之后，9种食物就变成了简单的三组：水果、蔬菜和蛋奶产品。记忆三组有特征的食物，要比记忆9种散乱的食物用时更短、更快速。</p><p>这就是一个自下而上的归纳过程。</p><p>想记忆9种水果不难，难的是快速记忆，更难的是在日常生活中快速记忆更多、更复杂的事物。复杂的事物之间产生逻辑联系，是大脑能记住庞大知识量的原因。</p><p>而自下而上的思考，会让我们提炼出事物最底层的逻辑和原理，帮助我们更高效、更准确地做出决策。</p><p>在自下而上思考这一过程中，我们需要遵循4大原则：</p><p>a.原则一：结论唯一</p><p>在金字塔结构下，“结论先行，以上统下”意味着：金字塔结构中，结论有且只能有一个。</p><p>为什么只能有一个？因为总结归纳问题是为了简化思维，找出复杂问题背后的方法论。</p><p>b.原则二：MECE法则</p><p>MECE法则（Mutually Exclusive Collectively Exhaustive）意思是：相互独立，完全穷尽。</p><p>第一，互相独立：意味着分类是在同一标准或者同一维度上来进行的，并且有明确的区分，不可出现重叠的现象。</p><p>第二，完全穷尽：意味着划分上没有遗漏，横向结构的各个部分完全穷尽了上一层次的概念。</p><p>在MECE法则下，人类可以分为男人和女人两类，男人和女人，既互相独立又完全穷尽。男人和女人的分类方法，使得对人类这一概念既完全概括，没有遗漏；又没有重复、冗余。</p><p>MECE法则的本质就是简化思维，降低复杂度。掌握MECE法则是学会构建金字塔式思考方式必不可少的一步。</p><p>c.原则三：演绎法（纵向逻辑）</p><p>什么是演绎法呢？</p><p>举个例子：a.所有的人都会死；b.苏格拉底是一个人；c.因此苏格拉底会死。</p><p>最后概括为：因为苏格拉底是一个人，所以苏格拉底会死。</p><p>句子b是对句子a做的表述，而句子c是从句子a、句子b中演绎出来的推论。</p><p>用演绎法表达一个观点的时候，必须进行三段式的论述。这就需要符合以下规则：第一，大提前正确，第二，小前提正确。</p><p>遵循以上两个规则，才能演绎出正确的结论。</p><p>所以演绎法，能帮我们理清两个纵向金字塔之间的关系。</p><p>d.原则四：归纳法（横向逻辑）</p><p>什么是归纳法呢？</p><p>举个例子：a.法国坦克已抵达波兰边境；b.德国坦克已抵达波兰边境；c.俄国坦克已抵达波兰边境。</p><p>最后归纳为：波兰将受到坦克入侵。</p><p>通过归纳法可以很快地理清思路和逻辑顺序，最终得到一个合理的推论。</p><p>对于归纳法来说，常见的逻辑顺序有以下三种：</p><p>第一种，是时间顺序或步骤顺序。比如:第一，第二，第三……它们之间存在因果关系，数目最好不要超过7个以上。</p><p>第二种，是结构顺序。各部分之间相互独立，没有重叠，有排他性，以确保完整性和合理性；</p><p>第三种，是重要性顺序。每个论点的重要程度不一样，比如最重要、次重要、一般重要等等，将最重要的思想放在第一位。</p><h4 id="3-如何使用金字塔结构解决问题？"><a href="#3-如何使用金字塔结构解决问题？" class="headerlink" title="3.如何使用金字塔结构解决问题？"></a><strong>3.如何使用金字塔结构解决问题？</strong></h4><p>小王来向你咨询职业选择，你和小王沟通后得知：他性格外向且大条，学的是工科，他刚刚毕业，拿到两个Offer，一个是技术方面的，一个是销售方面的。从纯理性的角度，你怎么帮他分析呢？</p><p><strong>第一步：写下所有想法。</strong>（以下只是举例，不具备参考意义。）</p><p>包括：</p><blockquote><p>① 技术岗位的基本工资更高；</p><p>② 他性格外向，喜欢与人交往，做销售可能更加适合他的个性；</p><p>③ 销售的奖金更多；</p><p>④ 做销售晋升更容易，晋升会伴随加薪；</p><p>⑤ 他学的是工科，具备做技术的基本知识；</p><p>⑥ 他没有营销的经验和知识，做销售的话，上手需要一定时间。</p></blockquote><p><strong>第二步：分组。</strong></p><p>你会发现，1&#x2F;3&#x2F;4说的好像都是收入，5&#x2F;6说的是知识和经验储备，2说的是性格，归类分组结果如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/ZYpa3icG6myg5oP4XnwWlXhIeyITG8rN740Ag3eYhRQxSian43tsAuNZeLnRR8jAiaRdXMq5G6UK5IFfG5PJomOyg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>第三步：用MECE原则找出各组的规律，确定结构。</strong></p><p>根据MECE的原则，这些分组需要相互独立、完全穷尽。</p><p>收入、性格、知识——这三个要素符合相互独立吗？是的，这是三个无关的要素。</p><p>但是，这三个要素完全穷尽了吗？好像没有。</p><p>考虑技术和销售两个职位选择的时候，除了性格，是不是还有能力呢？比如沟通能力、谈判能力等等。另外，是不是考虑小王自己的兴趣和爱好了呢？</p><p>所以，我们扩展一下，找出了这些组：收入、性格、能力、知识经验、爱好。</p><p>这五个要素是否符合MECE呢？好像穷尽得差不多了，但似乎不独立了，因为性格跟爱好是相关的，而能力和知识好像也很难分开。</p><p>所以，我们把性格跟爱好组合在一起，将能力和知识组合在一起，变成：收入、性格&amp;爱好、能力&amp;知识&amp;经验。这三组符合MECE了，但是名字怪怪的。</p><p>进一步分析，你会发现，收入是在说能否赚钱养活自己，性格爱好是在说是否感兴趣，能力知识经验是在说能否做得好，这样就清晰多了。</p><p><strong>第四步：最后补充信息。</strong></p><h5 id="比如，收入这块，除了考虑基本工资、奖金、加薪速度，是不是还有其它，比如福利的差异呢？等等。"><a href="#比如，收入这块，除了考虑基本工资、奖金、加薪速度，是不是还有其它，比如福利的差异呢？等等。" class="headerlink" title="比如，收入这块，除了考虑基本工资、奖金、加薪速度，是不是还有其它，比如福利的差异呢？等等。"></a>比如，收入这块，除了考虑基本工资、奖金、加薪速度，是不是还有其它，比如福利的差异呢？等等。</h5><p>用这样的思路，你帮小王做职业选择的分析，是不是清晰很多、脑子不再一团浆糊了呢？</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><strong>三、总结</strong></h3><p>结构化思维是可培养且价值度高的能力，我们解决问题、与人沟通中都能用到。</p><p>面对一个问题，先思考框架，可以自上而下或者自下而上的找框架。我们生活中更多的是自下而上地找结构。因为我们会遇到大量复杂的信息，把这些信息整理成结构，然后得出结论。</p><p>结构要尽量符合MECE（相互独立、完全穷尽）原则，如果不能，至少也符合CE（完全穷尽）。</p><p>著名作家冯唐，经过多年的实践，认为金字塔原理是他人生诸多训练中最宝贵的东西。有结构地思考，就才能把事情想清楚。想清楚了，事情就成了一半。</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从输入 URL到页面展示，发生了什么</title>
    <link href="/2023/12/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html"/>
    <url>/2023/12/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html</url>
    
    <content type="html"><![CDATA[<p>当你在浏览器中输入一个URL并按下回车键时，到页面最终展示出来，经历了一系列复杂的步骤。以下是这个过程的简化概述：</p><ol><li><strong>URL 输入与解析</strong><ul><li><strong>用户输入 URL</strong>：当用户在浏览器地址栏中输入 URL 并按下回车键后，浏览器会首先判断输入的内容是搜索文本还是符合规则的 URL。</li><li><strong>HSTS 预检查</strong>：如果用户输入的是 URL，浏览器会进行 HSTS（HTTP Strict Transport Security）预检查。这是因为大多数网站现在只通过 HTTPS 提供服务，而用户可能习惯输入不完整的 URL（如 <a href="http://www.example.com),而不是/">www.example.com），而不是</a> <a href="https://www.example.com.hsts/">https://www.example.com。HSTS</a> 可以强制浏览器使用 HTTPS 连接，以减少会话劫持的风险。</li></ul></li><li><strong>DNS 解析</strong><ul><li><strong>域名解析</strong>：浏览器需要将用户输入的域名解析为对应的 IP 地址，因为计算机更擅长处理数字形式的 IP 地址。这个过程涉及到向 DNS 服务器发送查询请求，并等待返回结果。</li><li><strong>缓存机制</strong>：为了提高解析效率，浏览器、操作系统和路由器都会缓存 DNS 记录。如果缓存中存在对应的 IP 地址，则直接使用，否则会继续向上级 DNS 服务器查询。</li></ul></li><li><strong>TCP 连接建立</strong><ul><li><strong>TCP 三次握手</strong>：在发送 HTTP 请求之前，客户端（浏览器）和服务器之间需要建立一个可靠的 TCP 连接。这个过程包括客户端发送 SYN 包（同步序号）、服务器响应 SYN-ACK 包（同步序号和确认序号）以及客户端再次发送 ACK 包（确认序号）。三次握手完成后，TCP 连接建立成功。</li></ul></li><li><strong>发送 HTTP 请求</strong><ul><li><strong>构建请求报文</strong>：一旦 TCP 连接建立，浏览器就会构建 HTTP 请求报文，包括请求行（包含请求方法、URL、协议版本）、请求头（包含请求的附加信息，如 Cookie 等）和请求体（可选，用于承载多个请求参数的数据）。</li><li><strong>发送请求</strong>：浏览器将构建好的 HTTP 请求报文通过 TCP 连接发送给服务器。</li></ul></li><li><strong>服务器处理请求</strong><ul><li><strong>接收请求</strong>：服务器收到 HTTP 请求后，会根据请求信息进行处理。</li><li><strong>生成响应</strong>：服务器根据处理结果生成 HTTP 响应报文，包括响应行（包含协议版本、状态码和状态消息）、响应头和响应体。</li></ul></li><li><strong>浏览器解析渲染页面</strong><ul><li><strong>接收响应</strong>：浏览器接收到服务器返回的 HTTP 响应报文后，开始解析响应内容。</li><li><strong>渲染页面</strong>：浏览器首先解析 HTML 文件，生成 DOM 树；然后解析 CSS 文件，生成 CSSOM 树；接着将 DOM 树和 CSSOM 树结合，生成渲染树；最后根据渲染树计算每个节点的布局信息，并绘制页面。在这个过程中，如果页面中引用了 JavaScript 文件、字体文件或图片等静态资源，浏览器还会发起新的请求来获取这些资源。</li><li><strong>执行JavaScript</strong>：浏览器会解析并执行JavaScript代码，这可能会动态修改DOM或影响页面的其他行为。</li></ul></li><li><strong>断开连接</strong><ul><li><strong>TCP 四次挥手</strong>：当数据传输完成后，客户端和服务器会通过 TCP 四次挥手来断开连接。这个过程包括客户端发送 FIN 包（结束标志）、服务器响应 ACK 包（确认序号和结束标志）、服务器发送 FIN 包（结束标志）以及客户端响应 ACK 包（确认序号）。</li><li>对于非持久连接，服务器在发送完响应后会关闭TCP连接。如果使用了持久连接（如HTTP&#x2F;1.1的keep-alive），则连接可以被重用，减少了后续请求的延迟。</li></ul></li></ol><p>整个过程涉及到客户端（浏览器）和服务器端的多个组件，包括网络协议、服务器处理逻辑、浏览器的解析和渲染引擎等。这个过程可能还涉及到CDN、代理服务器、缓存等中间件，它们可以提高性能和用户体验。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>精力管理</title>
    <link href="/2023/11/%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86.html"/>
    <url>/2023/11/%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<p>“我们更应该管理能量，管理精力，而非时间。” —彼得·德鲁克</p><h3 id="什么是精力管理？"><a href="#什么是精力管理？" class="headerlink" title="什么是精力管理？"></a>什么是精力管理？</h3><p>如果我们光做时间管理，你严密规划了12个小时的工作内容，在几个小时之后，你的注意力、思考力和耐心都会开始大幅下滑。</p><p><strong>要想保持最佳表现，就需要做到全情投入</strong></p><p>一个全情投入的人，早晨起床对这一天的工作充满期待，提前过一遍今天的工作内容</p><p>工作时</p><ul><li>工作专注</li><li>不扯淡，不闲聊</li><li>不想家里的事</li><li>保持良好的情绪进行人际互动</li><li>不怕困难</li><li>积极面对挑战</li><li>提高效率</li></ul><p>学习中</p><ul><li>专注投入学习</li><li>不思考工作</li><li>不想家里的事</li></ul><p>回家后</p><ul><li>不思考工作</li><li>享受生活</li><li>发展兴趣爱好</li><li>彻底放松休息</li><li>进入充电模式</li></ul><p>能够在工作、学习和生活之间划上清晰的界限，但是，实际中，能够做到的少之又少。</p><p>总结一句话“该干活干活，该学习学习，该玩玩，该休息休息”。</p><h3 id="精力管理的四个来源"><a href="#精力管理的四个来源" class="headerlink" title="精力管理的四个来源"></a>精力管理的四个来源</h3><p><strong>精力管理包括了体能、情感、思维和意志四个方面。</strong></p><h4 id="一、体能"><a href="#一、体能" class="headerlink" title="一、体能"></a>一、体能</h4><p><strong>体能包括呼吸、饮食、睡眠和锻炼</strong></p><p><strong>呼吸</strong></p><p>不仅能够聚集精力还能够深度放松，深呼吸有利于精力的恢复</p><p>比如说：3次一组吸气，6次一组呼气</p><p><strong>食物</strong></p><p>当你饿着肚子，血糖低的时候，只会想着找吃的，无法集中注意力</p><p>所以要挑选低热量高营养的食物，比如牛奶，特别是脱脂牛奶，还有鱼类、奶制品、豆制品、牛肉、鸡蛋、鸡肉、新鲜蔬菜和水果等，此外还应该少盐、少糖和少油。</p><p>这样才能供应稳定的精力</p><p><strong>睡眠</strong></p><p>科学研究表明，人体每晚需要7-8个小时的睡眠才能有良好的精力，白天有20分钟的小睡能够有效恢复精力。</p><p><strong>锻炼</strong></p><p>间歇性的训练（短时间、高强度的有氧练习）比持续训练效果要好，再加上完整的有氧恢复过程，比如跑步和游泳。</p><p>此外，力量训练也很重要，对于缺乏锻炼的白领，在年龄增长之后，应对压力和挑战的能力都逐渐下降。</p><p>锻炼肌肉，最科学的办法，就是每个动作，都做到力竭，也就是“再也没法多做一下”</p><p>突破极限，意味着你要破坏掉原有的肌肉纤维，这样肌肉才能变粗变长</p><h4 id="二、情感"><a href="#二、情感" class="headerlink" title="二、情感"></a>二、情感</h4><p><strong>情感包括积极情感和消极情感</strong></p><p>科学家曾经做过一个实验，以一群修女作为研究对象，她们的生活状态、饮食、作息都高度一致的前提下，科学家发现在自我描述中，使用积极词汇越多，也就是正面情感越多的修女寿命更长，成就也更多。</p><p>就像睡眠是体能精力的有效恢复手段一样，丰富愉悦的活动也会帮助情感精力的恢复。</p><p>比如：每周预留时间发展自己的兴趣爱好，打打篮球、跑跑步、听听音乐、看看书，或者躺在草地上晒晒太阳、看一部自己期待已久的电影等等。</p><p>除了兴趣爱好，人际关系也是情感精力的积极来源</p><p>比如，下了班和家人聊聊天，回忆回忆往事</p><p>与许久不见的同学聚餐</p><p>中午吃饭和同事边吃边聊</p><p>找三五好友喝喝茶</p><p>参加一些线下聚会，狼人杀、剧本杀、爬山、毅行、夜骑等</p><p>这些都能够为我们补充情感精力</p><h4 id="三、思维"><a href="#三、思维" class="headerlink" title="三、思维"></a>三、思维</h4><p>人们长时间的连续工作，实际上思考会耗费很多的能量，只占到体重**2%<strong>的大脑，却需要身体</strong>25%**的氧气供给。</p><p>恢复思维精力，除了休息，还可以：在早晨思考一天的工作安排，下班的时候总结一天的得失。</p><p>这样每做一件事情之前，都做好了充足的准备，完成后定期复盘，都能够帮助我们专注在重要的事情上，从而减少思维精力被损失浪费。</p><h4 id="四、意志力"><a href="#四、意志力" class="headerlink" title="四、意志力"></a>四、意志力</h4><p>强大的意志力，能够给人一种强大的动力，甚至能弥补体能精力的不足。</p><p>而且意志力这种东西，不像体能和精力，意志力它是无穷无尽的。</p><h3 id="如何进行精力管理？"><a href="#如何进行精力管理？" class="headerlink" title="如何进行精力管理？"></a>如何进行精力管理？</h3><p><strong>精力管理的两大原则：定期消耗精力和恢复精力</strong></p><p><strong>首先要明确目标：</strong></p><p>搞清楚什么才是对自己最重要的？我们想把精力花在哪里？这是一个自我认知、明确自我价值观的过程。</p><p><strong>接下来我们需要正视现实：</strong></p><p>看一看自己的精力管理做的如何？跟心中的目标有多少差距？</p><p>⽐如我们可以问⾃⼰⼀系列的问题，从1-10打分，“⾃⼰在⼯作中的投⼊如何？是什么阻碍了⾃⼰的<br>表现？身体⽅⾯感觉到怎么样？正⾯情感和负⾯情感的⽐例是怎么样的？有多少精⼒是投⼊到⾃⼰的<br>身上？有多少精⼒投⼊在他⼈身上？对⽬前这样的⽐例有什么样的感受？”。</p><p><strong>⾯对真相需要我们保持开放的⼼态去正视问题，承认⾃⼰做得不够好的部分找到需要改进的⽅⾯。</strong></p><p><strong>最后我们要付出行动：</strong></p><p>我们每天用来自控的精力（也就是自律）都是很有限的，<strong>最好的办法就是形成习惯</strong>，让行为能够自动化完成时就不需要耗费额外精力了。</p><p><strong>我们要把一些消耗大量精力的事，养成习惯</strong></p><p>每次生气，强制自己数一、二、三，稍微冷静一下，怒气可能就消了一半（这里不是说怒气全消）<br>你想生气的时候憋着，这个时候是非常消耗精力的</p><p>每次吃甜食前，到楼下走5分钟，血氧含量提高了，大脑就不那么依赖糖分<br>想吃又不让吃，也是非常消耗精力的</p><p>我们的目的不是让你彻底不发怒，或者彻底不吃甜食，目的是养成习惯</p><p><strong>习惯的养成，还需要克服人的惰性和拖延症，克服拖延症，我们可以依赖于身边场景或者先动起来哪怕一点点</strong></p><ul><li>不想动的时候，想办法把自己置身于健身房中，让自己先从跑步机开始</li><li>在家躺着不想运动的时候，先让自己穿上健身衣</li><li>不想跳绳的时候，先让自己的手拿起绳子</li><li>躺着不想写字的时候，先让自己从床上起来坐在书桌前</li><li>不想做饭的时候，先把菜放在水槽里洗</li></ul><p><strong>新的习惯有21天的养成周期</strong></p><p>尽量做到精确化和具体化。比如：每周二、周六晚上7点锻炼，比每周锻炼两次要好，因为计划越具体我们就越不需要在行动时思考太多。</p><p>每次不要改变太多，先完成一两个新习惯，等稳固后再进行新的习惯养成。</p><p>还有制定的改变计划要符合自己的实际情况，一个多年没有运动的人，一下子设定每周跑5次，每次5公里，身体会吃不消，最后会导致放弃。</p><p>所以行动是最关键的，哪怕是一点点的小行动，也比不行动要好</p><p>比如每天按时吃早餐，早上先制定工作计划、工作一小时站起来活动一下</p><p>让我们从身边一点小事开始改变吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地调试npm包npm link软链</title>
    <link href="/2023/10/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95npm%E5%8C%85npm-link%E8%BD%AF%E9%93%BE.html"/>
    <url>/2023/10/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95npm%E5%8C%85npm-link%E8%BD%AF%E9%93%BE.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-什么是软链？"><a href="#1-什么是软链？" class="headerlink" title="1. 什么是软链？"></a>1. 什么是软链？</h3><p>简单说就是为开发的模块(待发布的npm包)创造<strong>一个全局链接</strong>，在主项目里链接这个依赖的模块，进行测试。</p><p>两个项目名：main-project（主项目） 和 test-module（npm 模块） 并且执行npm init 初始化</p><h3 id="2-如何创建、使用、去除软链？"><a href="#2-如何创建、使用、去除软链？" class="headerlink" title="2. 如何创建、使用、去除软链？"></a>2. 如何创建、使用、去除软链？</h3><h4 id="2-1-先在对应npm包的文件创建一个全局的链接"><a href="#2-1-先在对应npm包的文件创建一个全局的链接" class="headerlink" title="2.1 先在对应npm包的文件创建一个全局的链接"></a>2.1 先在对应npm包的文件创建一个全局的链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/projects/test-module<br>npm <span class="hljs-built_in">link</span>  <br></code></pre></td></tr></table></figure><p>执行完上面的命令后，我们的模块就会链接到全局，路径是{prefix}&#x2F;lib&#x2F;node_modules&#x2F;<br>【npm config get prefix命令获取到prefix的值】</p><h4 id="2-2-然后再想要使用该包的项目里使用这个软链"><a href="#2-2-然后再想要使用该包的项目里使用这个软链" class="headerlink" title="2.2 然后再想要使用该包的项目里使用这个软链"></a>2.2 然后再想要使用该包的项目里使用这个软链</h4><p><strong>Tips: 注意这里的packageName一定要对应你的npm包package.json里的name字段值。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/projects/test-module<br>npm <span class="hljs-built_in">link</span> packageName   <br></code></pre></td></tr></table></figure><p>通过上边两步，我们已经可以在主项目<strong>main-project</strong>里使用位于本地的npm包了。</p><h4 id="2-3-用完了如何去除软链呢？"><a href="#2-3-用完了如何去除软链呢？" class="headerlink" title="2.3 用完了如何去除软链呢？"></a>2.3 用完了如何去除软链呢？</h4><h5 id="2-31-先在使用npm包的项目的文件目录下解除特定的链接"><a href="#2-31-先在使用npm包的项目的文件目录下解除特定的链接" class="headerlink" title="2.31 先在使用npm包的项目的文件目录下解除特定的链接"></a>2.31 先在使用npm包的项目的文件目录下解除特定的链接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">unlink</span> packageName<br></code></pre></td></tr></table></figure><h5 id="2-32-再在npm包所在的文件目录下去除全局链接"><a href="#2-32-再在npm包所在的文件目录下去除全局链接" class="headerlink" title="2.32 再在npm包所在的文件目录下去除全局链接"></a>2.32 再在npm包所在的文件目录下去除全局链接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">unlink</span><br></code></pre></td></tr></table></figure><p>到这里其实就OK了，但是如果你还想：</p><h5 id="2-33-强制解除创建的某个特定全局链接"><a href="#2-33-强制解除创建的某个特定全局链接" class="headerlink" title="2.33 强制解除创建的某个特定全局链接"></a>2.33 强制解除创建的某个特定全局链接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> npm <span class="hljs-built_in">rm</span> --global packageName<br></code></pre></td></tr></table></figure><h5 id="2-34-查看所有创建的全局链接名称"><a href="#2-34-查看所有创建的全局链接名称" class="headerlink" title="2.34 查看所有创建的全局链接名称"></a>2.34 查看所有创建的全局链接名称</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">npm <span class="hljs-keyword">ls</span> <span class="hljs-params">--global</span> <span class="hljs-params">--depth</span> 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器的渲染过程</title>
    <link href="/2023/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.html"/>
    <url>/2023/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<p>浏览器渲染过程是一个复杂而精细的流程，涉及多个步骤和模块。以下是对浏览器渲染过程的详细介绍：</p><ol><li><strong>HTML解析</strong>：浏览器首先通过HTML解析器将HTML文档解析为DOM树。HTML解析器会读取HTML文本，并将其转换为一系列的Token（标签序列化）。然后，这些Token会被进一步解析并构建成DOM节点，最终形成DOM树。解析过程中，浏览器可能会遇到CSS和JavaScript文件，这会影响DOM的构建过程。</li><li><strong>CSS解析</strong>：浏览器通过CSS解析器解析CSS文件或样式标记，生成CSS对象模型（CSSOM）。CSSOM包含了页面中所有元素的样式信息。</li><li><strong>JavaScript执行</strong>：JavaScript代码可以修改网页的内容和CSS规则。浏览器使用JavaScript引擎（如V8）解释执行JavaScript代码，并通过DOM接口和CSSOM接口来修改网页内容和样式信息。</li><li><strong>构建渲染树</strong>：当有了DOM树和CSSOM树后，浏览器会结合这两棵树来构建渲染树（Render Tree）。渲染树是用于计算页面布局和绘制的结构，它包含了页面上所有可见节点的信息。</li><li><strong>布局计算（Layout）</strong>：在渲染树构建完成后，浏览器会运行布局（Layout）来计算每个节点的几何体，包括大小和位置等。这个过程确定了页面上所有元素的具体布局。这个过程也被称为“流布局”（Flow Layout）。</li><li><strong>分层处理</strong>：为了优化渲染性能，浏览器会将渲染树分解成多个层（Layers）。每个层可以独立于其他层进行渲染和合成，这有助于减少绘制和合成的工作量。如果页面中有使用硬件加速的CSS属性（例如<code>transform</code>、<code>opacity</code>），浏览器会创建一个或多个图层。</li><li><strong>分块处理</strong>：浏览器会将每一层分为多个小的区域（块），只渲染用户可以看到的部分（即视口中的部分）。这样可以减少内存使用，提高渲染效率。</li><li><strong>光栅化处理</strong>：光栅化是将分块后的每个块都绘制成位图的过程。这个过程通常需要GPU加速，以提高绘制效率。</li><li><strong>合成与呈现（Painting）</strong>：合成线程计算出每个位图在屏幕上的位置，并将它们交给GPU进行最终呈现。GPU负责将这些位图绘制到屏幕上，形成用户最终看到的页面。</li></ol><p><strong>JavaScript执行</strong>：</p><ul><li>在整个渲染过程中，如果浏览器遇到了需要执行的JavaScript代码，它会暂停构建渲染树，执行JavaScript代码。这可能会改变DOM和CSSOM，导致重排（reflow）和重绘（repaint）。</li></ul><p><strong>优化和重排</strong>：</p><ul><li>如果页面上的元素发生变化，浏览器需要重新执行布局和绘制过程，这可能导致性能问题。因此，现代浏览器会尝试优化这些操作，例如通过避免布局抖动、使用层合成和硬件加速等技术。</li></ul><p>总的来说，浏览器渲染过程是一个从HTML、CSS和JavaScript代码到最终可视化图像的复杂转换过程。这个过程涉及多个步骤和模块的协同工作，以确保用户能够快速、安全地访问到所需的网页内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一印象很重要</title>
    <link href="/2023/09/%E7%AC%AC%E4%B8%80%E5%8D%B0%E8%B1%A1%E5%BE%88%E9%87%8D%E8%A6%81.html"/>
    <url>/2023/09/%E7%AC%AC%E4%B8%80%E5%8D%B0%E8%B1%A1%E5%BE%88%E9%87%8D%E8%A6%81.html</url>
    
    <content type="html"><![CDATA[<h4 id="核心观点"><a href="#核心观点" class="headerlink" title="核心观点"></a>核心观点</h4><p>第一印象就是你要让自己看起来更厉害</p><h4 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h4><p>假设你穿越到两百万年前，你掉到了原始人中间，刚好丛林中窜出来一只老虎，所有人开始逃跑，你会跟着谁一起跑呢？自然是那些看上去更厉害的人，这是你的大脑对瞬间对其他原始人进行扫描，比如这个人是不是更强壮呢？那个人是不是更能找准逃跑路线呢？跟着他会不会更安全呢？大脑会瞬间处理这些复杂的问题，在不到一秒的时间里给你答案。这就是<strong>自动化认知</strong>。</p><p>通常人们不愿意花更多时间去了解你，所以你要设计好自己的第一印象。</p><h4 id="如何设计自己的第一印象"><a href="#如何设计自己的第一印象" class="headerlink" title="如何设计自己的第一印象"></a>如何设计自己的第一印象</h4><p>原则是你要让自己看起来更厉害，但不能直接说。比如面试技术，你有一个很好的博客或者github，甚至出过技术类的书籍。</p><p>第一印象可以拆分为三部分：角色、经历、价值观。</p><p>比如你面试的时候做自我介绍，多数人是这样介绍的：你好，我是小明，来自xxx大学，之前有过半年实习经验，很希望加入贵公司。</p><p>这种标准版的介绍，多半是没戏了。因为你只是在介绍自己的身份。面试官一天面试几十人，根本不关心你的身份。</p><p>所以你要建立角色、经历、价值观。</p><p>你可以这样说：</p><p>（角色）你好，我是小明，去年刚毕业的大学生，但我更认为自己是一名超级服务者。我在学生会工作，这就是一个超级服务者，为全体同学服务。（我担任过项目经理，我认为自己就是一个超级服务者，为整个项目团队服务）</p><p>（经历）有一次我们在操场组织活动，有一个学生会部长就问我，我们是学生会的，为什么不让大家直接听我们的，而是每次费时费力了解大家的想法呢？我就说最好的管理者本质上就是最好的服务者。（我不是一个独断的人，在整个项目进行的过程中，我不会高高在上的指挥，我会充分了解团队成员的需求，了解他们所遇到的问题，然后尽可能满足他们合理的需求，帮助他们解决问题，铺平道路）</p><p>（价值观）因为我看过一本书，权利的本质就是让大家接受，我发号施令，大家不接受，或者心里不乐意，这都没有用，我不断思考大家的需求，他们才能真正接受我。所以我逐渐养成了挖掘别人需求这个习惯，每次都能得到很好的反馈，结果做服务这事越做就越上瘾了。</p><p>我们每天出门都要记得带三件东西：钱包、钥匙和自我介绍</p><p>参考《挖掘内向者》</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脚手架本地link标准流程</title>
    <link href="/2023/08/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9C%AC%E5%9C%B0link%E6%A0%87%E5%87%86%E6%B5%81%E7%A8%8B.html"/>
    <url>/2023/08/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9C%AC%E5%9C%B0link%E6%A0%87%E5%87%86%E6%B5%81%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<h5 id="链接本地脚手架："><a href="#链接本地脚手架：" class="headerlink" title="链接本地脚手架："></a>链接本地脚手架：</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> your-<span class="hljs-keyword">cli</span>-<span class="hljs-keyword">dir</span><br>npm link<br></code></pre></td></tr></table></figure><h5 id="链接本地库文件："><a href="#链接本地库文件：" class="headerlink" title="链接本地库文件："></a>链接本地库文件：</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> your-lib-<span class="hljs-keyword">dir</span><br>npm link<br><span class="hljs-keyword">cd</span> your-<span class="hljs-keyword">cli</span>-<span class="hljs-keyword">dir</span><br>npm link your-lib<br></code></pre></td></tr></table></figure><h5 id="取消链接本地库文件："><a href="#取消链接本地库文件：" class="headerlink" title="取消链接本地库文件："></a>取消链接本地库文件：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这里如果先执行的话，对应下面就是link不存在的情况</span><br><span class="hljs-built_in">cd</span> your-lib-dir<br>npm <span class="hljs-built_in">unlink</span><br><br><span class="hljs-built_in">cd</span> your-cli-dir<br><span class="hljs-comment"># link存在</span><br>npm <span class="hljs-built_in">unlink</span> your-lib<br><span class="hljs-comment"># link不存在</span><br><span class="hljs-built_in">rm</span> -rf node_modules<br>npm install -S your-lib<br></code></pre></td></tr></table></figure><h5 id="理解npm-link："><a href="#理解npm-link：" class="headerlink" title="理解npm link："></a>理解<code>npm link</code>：</h5><ul><li><code>npm link your-lib</code>：将当前项目中<code>node_modules</code>下指定的库文件链接到<code>node</code>全局<code>node_modules</code>下的库文件</li><li><code>npm link</code>：将当前项目链接到<code>node</code>全局<code>node_modules</code>中作为一个库文件，并解析<code>bin</code>配置创建可执行文件</li></ul><h5 id="理解npm-unlink："><a href="#理解npm-unlink：" class="headerlink" title="理解npm unlink："></a>理解npm unlink：</h5><ul><li>npm unlink：将当前项目从node全局<code>node_modules</code>中移除</li><li>npm unlink your-lib：将当前项目中的库文件依赖移除</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用eslint、lint-staged、husky搭建前端项目</title>
    <link href="/2023/08/%E4%BD%BF%E7%94%A8eslint%E3%80%81lint-staged%E3%80%81husky%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE.html"/>
    <url>/2023/08/%E4%BD%BF%E7%94%A8eslint%E3%80%81lint-staged%E3%80%81husky%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE.html</url>
    
    <content type="html"><![CDATA[<p>随着前端开发的项目越来越复杂，参与人数越来越多，创建一个统一风格的、规范化的项目对于一个团队来说至关重要。因此前端项目，需要包括eslint校验、prettier代码优化、husky+lint-staged代码提交校验。</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>新建 vangle 项目<br>cd vangle 进入项目</p><p>初始化 package.json 文件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">pnpm <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>没安装 pnpm 的需要提前安装一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> pnpm -<span class="hljs-selector-tag">g</span><br><br></code></pre></td></tr></table></figure><ul><li>新建 packages 目录，里面存放我们要开发的项目，例如 components、cli 等</li><li>创建 pnpm-workspace.yaml 文件，并指定 packages</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># pnpm-workspace.yaml</span><br><span class="hljs-attribute">packages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;packages/*&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>安装 typescript 并初始化 tsconfig.json 文件</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># -w 表示在要把包下载到根目录</span><br>pnpm <span class="hljs-keyword">add</span> typescript -D -w<br>npx tsc --<span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>参考配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es2016&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;preserve&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rootDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="添加代码规范"><a href="#添加代码规范" class="headerlink" title="添加代码规范"></a>添加代码规范</h3><h4 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h4><p><code>Prettier</code>是一个固执己见（提供了一份自认为是合适大多数人的代码风格）的代码格式化程序。</p><p>它支持的代码如下：</p><ul><li>JavaScript</li><li>JSX</li><li>Angular</li><li>Vue</li><li>Flow</li><li>TypeScript</li><li>CSS, Less, and SCSS</li><li>HTML</li><li>Ember&#x2F;Handlebars</li><li>JSON</li><li>GraphQL</li><li>Markdown, 包括 GFM 和 MDX</li><li>YAML</li></ul><p><code>Prettier</code>相比于<code>ESLint/TSLint/stylelint</code>等工具对代码风格控制等更加细致。因此通常用<code>Prettier</code>来让代码更漂亮，用<code>linter</code>来捕捉代码语法上的错误。</p><p>安装依赖</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pnpm <span class="hljs-built_in">add</span> prettier -D -w<br></code></pre></td></tr></table></figure><p>根目录创建 .prettierrc.js</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">module.exports</span> <span class="hljs-string">=</span> &#123;<br>  <span class="hljs-attr">semi:</span> <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">singleQuote:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">printWidth:</span> <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">trailingComma:</span> <span class="hljs-string">&#x27;none&#x27;</span>,<br>  <span class="hljs-attr">arrowParens:</span> <span class="hljs-string">&#x27;avoid&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h4><p><code>ESLint</code> 是一个根据方案识别并报告 <code>ECMAScript/JavaScript</code>代码问题的工具，其目的是使代码风格更加一致并避免错误。</p><ul><li>ESLint 使用 <code>Espree</code> 对 <code>JavaScript</code> 进行解析。</li><li>ESLint 在代码中使用 <code>AST</code> 评估方案。</li><li>ESLint 完全是插件式的，每个规则都是一个插件，你可以在运行时中添加更多插件。</li></ul><p>安装依赖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">pnpm <span class="hljs-keyword">add</span><span class="language-bash"> eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin -D -w</span><br></code></pre></td></tr></table></figure><h5 id="配合-prettier"><a href="#配合-prettier" class="headerlink" title="配合 prettier"></a>配合 prettier</h5><p>当 ESLint 的规则和 Prettier 的规则相冲突时，就会发现一个尴尬的问题，用其中一种来格式化代码，另一种就会报错。prettier 官方提供了一款工具 eslint-config-prettier 来解决这个问题，本质上这个工具其实就是禁用掉了一些不必要的以及和 Prettier 相冲突的 ESLint 规则。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pnpm <span class="hljs-keyword">add </span>eslint-<span class="hljs-built_in">config</span>-prettier eslint-plugin-prettier -D -w<br></code></pre></td></tr></table></figure><h5 id="完成eslint配置"><a href="#完成eslint配置" class="headerlink" title="完成eslint配置"></a>完成eslint配置</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yarn eslint <span class="hljs-comment">--init</span><br></code></pre></td></tr></table></figure><p>等待安装完成，可以看到目录下多了一个.eslintrc的文件</p><p>参考配置如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">module.exports = &#123;<br>  parser: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>  <span class="hljs-keyword">extends</span>: [<br>    <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>,<br>    <span class="hljs-string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,<br>    <span class="hljs-string">&#x27;prettier&#x27;</span>,<br>    <span class="hljs-string">&#x27;plugin:prettier/recommended&#x27;</span><br>  ],<br>  env: &#123;<br>    browser: <span class="hljs-literal">true</span>,<br>    es2021: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-keyword">extends</span>: [<span class="hljs-string">&#x27;eslint:recommended&#x27;</span>],<br>  plugins: [<span class="hljs-string">&#x27;@typescript-eslint&#x27;</span>, <span class="hljs-string">&#x27;prettier&#x27;</span>],<br>  parserOptions: &#123;<br>    ecmaVersion: <span class="hljs-string">&#x27;latest&#x27;</span>,<br>    sourceType: <span class="hljs-string">&#x27;module&#x27;</span><br>  &#125;,<br>  rules: &#123;<br>    <span class="hljs-string">&#x27;prettier/prettier&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-extra-semi&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/camelcase&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/ban-ts-ignore&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-var-requires&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-extra-semi&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-empty-function&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-non-null-assertion&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/explicit-function-return-type&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/explicit-module-boundary-types&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-empty-interface&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当执行eslint则会执行代码检查，加上–fix可以自动修改部分问题</p><p>package.json 中添加执行命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;prettier&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier --write .&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --ext .ts packages/*/**.ts&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lint:fix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --ext .ts packages/*/**.ts --fix&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>这时我们可以在 packages 下创建 components&#x2F;index.ts，写一些不符合规则的代码然后运行命令试试效果</p><h4 id="husky-lint-staged"><a href="#husky-lint-staged" class="headerlink" title="husky + lint-staged"></a>husky + lint-staged</h4><p><code>husky</code>它可以在项目中植入你设定的<code> </code>git hooks<code>，在 </code>git<code>提交代码的前后，你预设的</code>git hooks<code>可以得到执行，以对代码、文件等进行预设的检查，一旦检查不通过，就可以阻止当前的代码提交，避免了不规范的代码和</code>git&#96; 提交出现在项目中。</p><p>在提交代码前对项目进行<code>lint</code>是非常有必要的，避免提交了不规范或者错误的代码。但在整个项目上运行<code>lint</code>是很慢的，因此借助于<code>lint-staged</code>可以仅对暂存区中的文件进行<code>lint</code>操作。<code>lint-staged</code>可以配合husky使用。</p><p>安装依赖，前提项目中先有git仓库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pnpm <span class="hljs-built_in">add</span> husky lint-staged -D -w<br></code></pre></td></tr></table></figure><p>执行 npx husky install 创建.husky 目录，该目录下有一个 pre-commit 文件在每次提交代码的时候会执行，可以修改里面的运行脚本，自定义提交需要做的工作，如果没有 pre-commit 文件可以手动创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>. <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span><br><br>npx lint-staged<br></code></pre></td></tr></table></figure><p>在 package.json 中添加 lint-staged 配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;*.&#123;js,jsx,vue,ts,tsx&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;eslint --ext .ts packages/*/**.ts --fix&quot;</span> <span class="hljs-comment">// 这里也可以写我们上面定义好的命令，如：pnpm lint:fix</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;*.&#123;ts,tsx,js,jsx,cjs,mjs,css,scss,less,md,vue&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier --write&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="工具配合使用"><a href="#工具配合使用" class="headerlink" title="工具配合使用"></a>工具配合使用</h4><p>我们在项目的某个需求开发完，需要提交代码时会执行<code>git commit</code>命令，这个命令会触发 <code>husky</code> 的 <code>pre-commit</code> 钩子，在这个钩子中调用了<code>lint-staged</code>命令，将暂存区中的文件进行匹配并作为<code>eslint</code>和<code>prettier</code>的输入，分别进行语法检查修复和代码格式化。</p><p>现在我们可以试着提交一下代码，如果不符合 eslint 校验规则的会自动修复，修复完成后需要再次提交</p><p>如果提交的时候eslint报错，但又想提交，则执行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&#x27;提交&#x27;</span> --<span class="hljs-literal">no</span>-verify<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发规范</title>
    <link href="/2023/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html"/>
    <url>/2023/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、统一要求"><a href="#一、统一要求" class="headerlink" title="一、统一要求"></a>一、统一要求</h3><h4 id="1-1-基本规范"><a href="#1-1-基本规范" class="headerlink" title="1.1.基本规范"></a>1.1.基本规范</h4><ol><li>所有类名、id名、方法名等涉及到名称的，统一使用驼峰命名，命名要具有业务意义，语义化，简洁明了</li><li>代码中不得出现警告</li><li>代码中不得出现数字（插件除外）</li><li>结构（html），表现(css)，行为(js)代码需分离</li></ol><h4 id="1-2-基本原则"><a href="#1-2-基本原则" class="headerlink" title="1.2.基本原则"></a>1.2.基本原则</h4><ol><li>代码力求简洁，不要写大量重复的逻辑代码（公共方法需封装，公共样式提取到公共样式中）</li><li>代码要有可读性，函数和元素命名要具有业务意义，关键业务要有详细的注释</li><li>代码要有扩展性，要尽可能适应未来的业务变化，不得生搬硬套现有业务逻辑</li><li>代码要有通用性，一个方法只专注于该方法需要做的事情（对外暴露相应的参数），一个模块只专注于该模块范围内的事情（对外暴露相应的接口）</li></ol><h3 id="二、html规范"><a href="#二、html规范" class="headerlink" title="二、html规范"></a>二、html规范</h3><h4 id="2-1-Charst字符集合"><a href="#2-1-Charst字符集合" class="headerlink" title="2.1.Charst字符集合"></a>2.1.Charst字符集合</h4><ol><li>一般情况下统一使用UTF-8。尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 IETF对UTF-8的定义，其编码标准的写法是 “UTF-8”；</li></ol><h4 id="2-2-书写风格"><a href="#2-2-书写风格" class="headerlink" title="2.2.书写风格"></a>2.2.书写风格</h4><ol><li><h5 id="Html代码大小写"><a href="#Html代码大小写" class="headerlink" title="Html代码大小写"></a>Html代码大小写</h5><p>HTML标签名、类名、标签属性和大部分属性值统一用小写<br>  推荐：<div class="demo"></div></p></li><li><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5></li></ol><ul><li><p>属性值使用双引号语法</p><p>例：<link rel="stylesheet" href="" ></p></li></ul><ol start="3"><li><h5 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h5></li></ol><ul><li><p>不得使用‘&gt;’和‘&lt;’特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p><p>推荐：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>more&gt;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><h5 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h5></li></ol><ul><li>每个块级元素独占一行，内联元素可选</li><li>html中禁止行内元素里面嵌套块级元素、span标签搭配for属性使用、div加disabled属性等不规范用法，可参考WEB标准系列-HTML元素嵌套；</li><li>html结构用统一采用双引号,js 用单引号</li></ul><ol start="5"><li><h5 id="引用规范"><a href="#引用规范" class="headerlink" title="引用规范"></a>引用规范</h5></li></ol><ul><li><p>将所有页面公共样式（如common.css）、插件样式写入head内的底部；</p></li><li><p>将所有页面公共js、插件js放入body内底部；</p><p><strong>注意：引入的文件全需加注释，表示是什么样式，或者什么插件（备注版本号）</strong></p></li></ul><h3 id="三、-CSS规范"><a href="#三、-CSS规范" class="headerlink" title="三、 CSS规范"></a>三、 CSS规范</h3><h4 id="3-1-代码格式化"><a href="#3-1-代码格式化" class="headerlink" title="3.1.代码格式化"></a>3.1.代码格式化</h4><ol><li>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</li><li>每个属性声明末尾都要加分号；</li><li>css属性值需要用到引号时，统一使用双引号</li><li>尽量不要用固定的宽高，多使用padding 和 margin</li><li>尽量少用通用选择器*</li><li>不使用ID选择器</li><li>不使用无具体语义定义的标签选择器</li><li>尽量少用！Important</li></ol><h4 id="3-2-代码可读性"><a href="#3-2-代码可读性" class="headerlink" title="3.2.代码可读性"></a>3.2.代码可读性</h4><ol><li>左括号与类名之间一个空格，冒号与属性值之间一个空格</li><li>逗号分隔的取值，逗号之后一个空格<br> 推荐：box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc; </li><li>不要为0指明单位</li></ol><h4 id="3-3-属性书写顺序"><a href="#3-3-属性书写顺序" class="headerlink" title="3.3.属性书写顺序"></a>3.3.属性书写顺序</h4><ol><li>建议遵循以下顺序<ul><li>布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li><li>文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li><li>其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient 等</li></ul></li><li>如果是单个页面需要改公共css或者插件样式，请一定在单个页面的样式中改，坚决不能修改插件源码，js文件同理；</li><li>当属性存在兼容问题的，兼容多个浏览器时，将标准属性写在底部；</li></ol><p>-moz-border-radius: 15px; &#x2F;* Firefox *&#x2F;</p><p>-webkit-border-radius: 15px; &#x2F;* Safari和Chrome *&#x2F;</p><p>-o-border-radius: 15px;</p><p>border-radius: 15px; &#x2F;* Opera 10.5+, 以及使用了IE-CSS3的IE    浏览器 *&#x2F;&#x2F;标准属性</p><h3 id="四、JS规范"><a href="#四、JS规范" class="headerlink" title="四、JS规范"></a>四、JS规范</h3><h4 id="4-1-文件命名"><a href="#4-1-文件命名" class="headerlink" title="4.1.文件命名"></a>4.1.文件命名</h4><ol><li>文件命名和html中的功能相对应</li></ol><h4 id="4-2-语言规范"><a href="#4-2-语言规范" class="headerlink" title="4.2. 语言规范"></a>4.2. 语言规范</h4><ol><li><p>变量</p><ul><li>尽量不要定义全局变量，否则很容易造成全局变量污染。</li></ul></li><li><p>变量先定义再使用，尽量避免使用全局变量分号</p><ul><li>语句结束总是使用分号</li></ul></li><li><p>使用严格相等号</p><ul><li>尽量使用&#x3D;&#x3D;&#x3D;和!&#x3D;&#x3D;</li></ul></li><li><p>条件判断语句必须放入{}中</p><ul><li><p>在if&#x2F;else&#x2F;for&#x2F;do&#x2F;while语句中，即使只有一行，也不得省略块{…}</p><p>if (condition) {</p><p>​callFunc();</p><p>}</p></li></ul></li><li><p>If嵌套不能超过2层</p></li><li><p>一个函数的长度必须限制在50行以内，不然看完有时候会懵逼，可以分割成多个函数，一个函数只做一件事（单一原则）</p></li><li><p>函数定义结束不允许添加分号</p></li></ol><p>function funName() {}</p><p>如果是函数表达式，分号不能省略</p><p>var funName &#x3D; function () {};</p><ol start="8"><li><p>js文件调用的部分必须写在$(function(){&#x2F;<em>调用的js</em>&#x2F;})函数内，该页面需要用的函数，可封装写在该函数底部；</p></li><li><p>common.js文件里面的函数必须保证是项目中大多数地方都会用到，且通用，common.js中的函数名要唯一。</p></li></ol><h3 id="五、命名规范"><a href="#五、命名规范" class="headerlink" title="五、命名规范"></a>五、命名规范</h3><h4 id="5-1-文件命名规范"><a href="#5-1-文件命名规范" class="headerlink" title="5.1.文件命名规范"></a>5.1.文件命名规范</h4><ol><li>文件命名严格按照模块来命名，命名需语义化，一看就懂，html、css、js三者一一对应，例如projectManage.html，对应的projectManage.css，projectManage.js，即使一个页面需引入多个js，命名同理，例如引入项目修改的js，即命名：projectManageUpdate.js;</li></ol><h4 id="5-2-文件命名规范变量名、类名、ID名、name、函数等命名规范"><a href="#5-2-文件命名规范变量名、类名、ID名、name、函数等命名规范" class="headerlink" title="5.2.文件命名规范变量名、类名、ID名、name、函数等命名规范"></a>5.2.文件命名规范变量名、类名、ID名、name、函数等命名规范</h4><ol><li>代表同一个元素的变量名、类名、ID名、name最好保持一致，且采用驼峰命名；</li><li>函数命名：小驼峰式命名法、前缀应当为动词、可使用常见动词约定；例：addPerson</li></ol><h3 id="六、三方插件"><a href="#六、三方插件" class="headerlink" title="六、三方插件"></a>六、三方插件</h3><ol><li>尽量引入大公司插件而非个人编写的插件</li><li>插件文档需明确易读</li><li>对UI限制越少越好，最好没有</li><li>能兼容ie9</li></ol><ul><li>代码缩进</li></ul><p>统一使用 2个空格做为一个缩进层级，一定要统一。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间管理</title>
    <link href="/2023/07/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86.html"/>
    <url>/2023/07/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://yzwpic.weimayi.cn/img/image-20230308152028892.png" alt="image-20230308152028892"></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308152054012.png" alt="image-20230308152054012"></p><p>为什么谈这个话题，不是说我个人是时间管理方面的大师，时间管理的有多好</p><p>而且我可能比你们浪费了更多的时间，毕竟年龄摆在这里</p><p>在我看来，这个时间管理是应该加入到必修课里的课程，但是从小到大，居然没有人教过我们</p><p>直到我们浑浑噩噩，荒度半生，才通过网上搜到的一些支离破碎的信息，了解到一个真相</p><p>世界上所有的人虽然有国家、阶级、出身、财富等这些不同</p><p>但是在时间上，大家都是一样的，我们跟比尔盖茨、马云一样，每天都是24小时</p><p>但是我们用什么刻度来看待这24小时，就决定了我们是生活在什么阶层的人</p><p>比如小镇青年，他们以天为单位，度年如日，每天都是重复的日子</p><p>职场人士，以小时为单位，比如午休结束还有20分钟，这20分钟可以扯八卦，或者来一把王者</p><p>成功人士，以分钟为单位</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308154310990.png" alt="image-20230308154310990"></p><p>两个国家，三个城市，见省委书记，签约500亿万达城，飞行6000公里</p><p>从凌晨摸黑爬起，到夜幕降临落地</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308112613321.png" alt="高尔夫"></p><p>高尔夫</p><p>讲一个故事</p><p>一个教授走进教室，拿出一个玻璃罐</p><p>然后拿出一堆高尔夫球放进去了，教授问 这个罐子满了吗，学生们回答：满了啊</p><p>教授又掏出小石子放进去，问满了吗，回答：满了</p><p>教授又放进去沙子，问满了吗，回答：满了</p><p>教授又倒进去了啤酒</p><p>把这个罐子，想象成自己的人生，高尔夫球代表着重要的东西，包括你的家人、朋友、健康</p><p>小石子代表小一些，但也很重要的东西，比如你的工作、房子、车子</p><p>沙子代表其他一些不重要的小事</p><p>如果你先把沙子倒进去，会怎么样呢？</p><p>你就没有空间放高尔夫球和小石子</p><p>人生也是一样，如果你把所有时间和精力，耗在小事上，那你就不会有时间去在意真正重要的事</p><p>这时候有个学生就问了，那啤酒代表什么呢？</p><p>教授说它代表着无论你的生活多么紧凑，你仍然有时间和你的朋友圈，喝几杯啤酒。</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230308151620589.png" alt="image-20230308151620589"></p>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chatGPT火成这样，程序员还有机会吗？</title>
    <link href="/2023/06/chatGPT%E7%81%AB%E6%88%90%E8%BF%99%E6%A0%B7%EF%BC%8C%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%90%97%EF%BC%9F.html"/>
    <url>/2023/06/chatGPT%E7%81%AB%E6%88%90%E8%BF%99%E6%A0%B7%EF%BC%8C%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%98%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%90%97%EF%BC%9F.html</url>
    
    <content type="html"><![CDATA[<p>看看最近很火的：</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230410095721615.png" alt="image-20230410095721615"></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230410095751641.png" alt="image-20230410095751641"></p><p>这恐怕连设计师都还取代不了！</p><h3 id="数据的准确性"><a href="#数据的准确性" class="headerlink" title="数据的准确性"></a>数据的准确性</h3><p>如果你真的有经常使用 <code>chatGPT</code>，你会发现，它其实并不是每次都能给到你想要的答案，而且偶尔还是错误的答案。所以，它本身就有一个致命的问题：准确率！</p><blockquote><p>ChatGPT 是一个大规模的语言模型，不断地训练以提高响应的准确性。然而，由于这是一项全新的技术，该模型尚未经过充分的训练。因此，人工智能聊天机器人可能会提供错误的答案。正因为如此，StackOverflow 禁止了 ChatGPT，并表示：“总的来说，由于从 ChatGPT 获得正确答案的平均比率太低，发布由 ChatGPT 生成的答案对我们的网站以及询问或搜索正确答案的用户来说是非常有害的。”</p></blockquote><p>比如，将医疗APP接入chatGPT，无法保证这个24小时机器人不会给病人开错药。比如将感冒错误地诊断为新冠</p><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><p>没有程序员敢说自己的代码不需要经过联调、测试，直接上生产的。</p><p>在你充分给足问题上下文的前提下，你让 chatGPT 生成一个几十行的代码 snippet，它大多数情况下会给你一个不需要太多修改的答案。但是，这和直接上生产的应用程序之间还是存在较大差异的。尤其当工程比较复杂，即使chatGPT的准确率很高，在巨大的代码量和文件之间错综复杂的引用关系下，bug的数量也不容小觑，依然需要经验丰富的工程师来调试。</p><h3 id="需求理解"><a href="#需求理解" class="headerlink" title="需求理解"></a>需求理解</h3><p>某一天，产品说，我们需要做一个新功能：<strong>做一个会根据手机壳颜色而改变主题颜色的APP！</strong></p><p><img src="http://yzwpic.weimayi.cn/img/image-20240701163559691.png" alt="image-20240701163559691"></p><p>于是，你把这一句话需求输入到 <code>chatGPT</code>，满心欢喜地等待答案：</p><p><img src="http://yzwpic.weimayi.cn/img/image-20240701163624186.png" alt="image-20240701163624186"></p><p>chatGPT给出的代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Change Theme Color Based on Phone Case<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-pseudo">:root</span> &#123;</span><br><span class="language-css">        <span class="hljs-attr">--color-theme</span>: <span class="hljs-number">#333</span>; <span class="hljs-comment">/* default theme color */</span></span><br><span class="language-css">      &#125;</span><br><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-selector-class">.button</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.5rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Change Theme Color Based on Phone Case<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This app will change its theme color based on the color of your phone case!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// Detect phone case color and set it as theme color</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> phoneCaseColor = <span class="hljs-string">&quot;red&quot;</span>; <span class="hljs-comment">// Replace with code to detect phone case color</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color-theme&#x27;</span>, phoneCaseColor);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显然，没有根本没有理解产品提出的需求！所以说它短时间内是干不掉开发的！</p><h3 id="沟通需要人"><a href="#沟通需要人" class="headerlink" title="沟通需要人"></a>沟通需要人</h3><p>一个软件的开发通常都不只有开发，大致的流程：</p><ol><li>调研（需求收集）</li><li>项目立项</li><li>需求整理（出PRD）</li><li>UI、UE</li><li>RD、QA、UE、UI做需求评审</li><li>RD做架构设计、技术调研，UE做交互设计、QA做测试用例</li><li>RD、UE、UI、QA评审，排期</li><li>开发、联调、测试</li><li>产品验收</li><li>上线准备</li><li>灰度</li><li>上线</li><li>…</li></ol><p>从第5点开始，就要开发参与做大量的沟通和协调。</p><p><code>coding</code>只是其中一小环，开发需要深入了解业务需求，做技术调研和预判，才能决定如何编写代码。</p><p>你想从<code>chatGPT</code>那里获得正确的回答，首先你要知道如何问问题，问哪些问题。这些都只有人能做。</p><h3 id="chatGPT-会怎样改变我们？"><a href="#chatGPT-会怎样改变我们？" class="headerlink" title="chatGPT 会怎样改变我们？"></a>chatGPT 会怎样改变我们？</h3><p>我认为主要会在以下几个方面改变我们：</p><p><strong>改进&#x2F;重构&#x2F;简化现有代码</strong>：使用 <code>ChatGPT</code> 改进、重构甚至简化现有代码。</p><p><strong>将代码从一种语言翻译成另一种语言</strong>：例如，你可以要求 <code>ChatGPT</code> 将代码从<code> python</code> 翻译成 <code>javascript</code> 或者 <code>go</code>。</p><p><strong>写测试</strong>：让 <code>ChatGPT</code> 帮你测试一个功能，它会帮你写测试用例。</p><p><strong>探索替代方案</strong>：<code>ChatGPT</code> 非常擅长建议替代实施方案，尽管有时答案并不那么完美，改改也是能用的。</p><p><strong>编写文档</strong>：<code>ChatGPT</code> 可以为小块代码编写文档。</p><p><strong>查找错误</strong>：如果您认为自己的代码中存在错误并且找不到它，<code>ChatGPT</code> 可能会有所帮助。</p><h3 id="辅助而不是取代"><a href="#辅助而不是取代" class="headerlink" title="辅助而不是取代"></a>辅助而不是取代</h3><p>最有可能的情况是像 <code>chatGPT</code> 这样的工具会被集成到开发者使用的工具中，并被用来辅助开发人员，让他们从一些重复性的工作中解脱出来，去做一些更有价值的工作。<code>ChatGPT</code> 不太可能取代程序员。</p><p>编程需要一套独特的技能，例如逻辑、解决问题和对编程语言的理解，这些是 <code>ChatGPT</code> 所不具备的。虽然它可以帮助程序员完成代码生成等任务，但它不能完全取代人类程序员所拥有的创造力、解决问题和批判性思维的能力。程序员在软件、网站和其他技术产品的开发中发挥着关键作用，他们的专业知识对于设计和创建这些产品至关重要。</p><p>还有一种观点是，那我们可能不需要那么多程序员了。我觉得也不一定，这需要取决于经济社会的发展情况，如果 chatGPT 真的引发一场新的科技革命，不知道有多少应用或者说服务将被重写，又有多少新的需求将被催生，替代程序员又从何谈起呢。</p><p>但是，如果你的工作只是编写复杂性很小的基本代码块，那么你可能比较危险了。特别是那种入行只是为了混口饭吃，平时也不注意提升自己，随着时间的推移就很有可能被优化了。以后的工作模式，可能就是软件开发人员和人工智能工具组合进行开发，人工智能可以起到很好的辅助作用。</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>虽然chatGPT短期内还无法取代程序员。但技术发展日新月异，未来不知道人工智能会发展到什么地步。所以程序员还是要尽可能的多提升自己，增加自己的核心竞争力，不单单是编程能力，还包括沟通能力、逻辑思维能力、解决问题的能力等等。</p>]]></content>
    
    
    
    <tags>
      
      <tag>chatgpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序认证与不认证的区别</title>
    <link href="/2023/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%A4%E8%AF%81%E4%B8%8E%E4%B8%8D%E8%AE%A4%E8%AF%81%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <url>/2023/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%A4%E8%AF%81%E4%B8%8E%E4%B8%8D%E8%AE%A4%E8%AF%81%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    
    <content type="html"><![CDATA[<p>首先，个人身份注册的小程序是无法申请认证的。</p><h3 id="微信小程序认证与不认证的主要区别："><a href="#微信小程序认证与不认证的主要区别：" class="headerlink" title="微信小程序认证与不认证的主要区别："></a>微信小程序认证与不认证的主要区别：</h3><p>1.已认证的小程序可申请微信支付功能</p><p>2.已认证的小程序可绑定最多20个开发者，未认证小程序可绑定最多10个开发者</p><p>3.已认证的小程序支持webview组件</p><p>4.小程序类目，很多类目不支持个人身份的小程序申请</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>path.join()和path.resolve()区别</title>
    <link href="/2023/05/path-join-%E5%92%8Cpath-resolve-%E5%8C%BA%E5%88%AB.html"/>
    <url>/2023/05/path-join-%E5%92%8Cpath-resolve-%E5%8C%BA%E5%88%AB.html</url>
    
    <content type="html"><![CDATA[<ul><li>path.join</li></ul><p>path.join():方法使用平台特定的分隔符把全部给定的 path 片段<strong>连接</strong>到一起，并<strong>规范化</strong>生成的路径。</p><p>例如：path.join(‘foo’, ‘baz’, ‘bar’); &#x2F;&#x2F; 返回 ‘foo&#x2F;baz&#x2F;bar’</p><p>注：如果连接后的路径字符串是一个长度为零的字符串，则返回 ‘.’，表示当前工作目录。</p><ul><li>path.resolve</li></ul><p>path.resolve:方法会把一个路径或路径片段的序列解析为一个<strong>绝对路径</strong>。</p><p>例如：</p><p>注： 当前工作目录为 &#x2F;home&#x2F;myself&#x2F;node</p><p>1、path.resolve(‘&#x2F;foo&#x2F;bar’, ‘.&#x2F;baz’);&#x2F;&#x2F; 返回: ‘&#x2F;foo&#x2F;bar&#x2F;baz’</p><p>2、path.resolve(‘&#x2F;foo&#x2F;bar’, ‘&#x2F;tmp&#x2F;file&#x2F;‘);&#x2F;&#x2F; 返回: ‘&#x2F;tmp&#x2F;file’</p><p>3、path.resolve(‘wwwroot’, ‘static_files&#x2F;png&#x2F;‘, ‘..&#x2F;gif&#x2F;image.gif’);&#x2F;&#x2F; 如果当前工作目录为 &#x2F;home&#x2F;myself&#x2F;node，&#x2F;&#x2F; 则返回 ‘&#x2F;home&#x2F;myself&#x2F;node&#x2F;wwwroot&#x2F;static_files&#x2F;gif&#x2F;image.gif’</p><ul><li>两者区别：</li></ul><p>1、join是把各个path片段连接在一起， resolve把‘／’当成根目录</p><p>path.join(‘&#x2F;a’, ‘&#x2F;b’) &#x2F;&#x2F; Outputs ‘&#x2F;a&#x2F;b’<br>path.resolve(‘&#x2F;a’, ‘&#x2F;b’) &#x2F;&#x2F; Outputs ‘&#x2F;b’</p><p>2、join直接拼接字段，resolve解析路径并返回</p><p>path.join(“a”, “b1”, “..”, “b2”)</p><p>console打印会得到”a&#x2F;b2”</p><p>path.resolve(“a”, “b1”, “..”, “b2”)</p><p>console打印得到”&#x2F;home&#x2F;myself&#x2F;node&#x2F;a&#x2F;b2”</p>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么给js原型对象添加的方法能用在基本类型上？</title>
    <link href="/2023/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%99js%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%96%B9%E6%B3%95%E8%83%BD%E7%94%A8%E5%9C%A8%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8A%EF%BC%9F.html"/>
    <url>/2023/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%99js%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%96%B9%E6%B3%95%E8%83%BD%E7%94%A8%E5%9C%A8%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8A%EF%BC%9F.html</url>
    
    <content type="html"><![CDATA[<p>JavaScript中的几个基本类型，都在对象类型中有一个“亲戚”。它们是：</p><ul><li>Number；</li><li>String；</li><li>Boolean；</li><li>Symbol。</li></ul><p>所以，3 与 new Number(3) 是完全不同的值，它们一个是 Number 类型， 一个是对象类型。</p><p><code>Number</code>、<code>String</code>和<code>Boolean</code>，三个构造器是两用的，当跟 <code>new</code> 搭配时，它们产生对象，当直接调用时，它们表示强制类型转换。</p><p><code>Symbol</code> 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 <code>Symbol</code> 对象的构造器。</p><p>JavaScript 语言设计上试图模糊对象和基本类型之间的关系，我们日常代码可以把对象的方法在基本类型上使用，比如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;abc&quot;</span>.charAt(<span class="hljs-number">0</span>)); <span class="hljs-comment">//a</span><br></code></pre></td></tr></table></figure><p>甚至我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 <code>Symbol</code> 原型上添加了<code>hello</code>方法，在任何 <code>Symbol</code> 类型变量都可以调用。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Symbol.prototype.hello = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">var</span> a = Symbol(<span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> a); <span class="hljs-comment">//symbol，a并非对象</span><br>    a.hello(); <span class="hljs-comment">//hello，有效</span><br></code></pre></td></tr></table></figure><p>所以为什么给js原型对象添加的方法能用在基本类型上？</p><p>主要是因为 <code>.</code> 运算符提供了封箱操作，它会根据基础类型构造一个<strong>临时对象</strong>，使得我们能在基础类型上调用对应对象的方法。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>uniapp开发云打包详细流程</title>
    <link href="/2023/04/uniapp%E5%BC%80%E5%8F%91%E4%BA%91%E6%89%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B.html"/>
    <url>/2023/04/uniapp%E5%BC%80%E5%8F%91%E4%BA%91%E6%89%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<h2 id="安卓apk打包流程"><a href="#安卓apk打包流程" class="headerlink" title="安卓apk打包流程"></a>安卓apk打包流程</h2><h4 id="1-使用云打包"><a href="#1-使用云打包" class="headerlink" title="1. 使用云打包"></a>1. 使用云打包</h4><p>Hbuilder在菜单栏选择“发行”，选择“原生App-云打包”，使用云打包不需要学习Android Studio的使用，节省开发时间，但是云打包需要排队（排队人数越多等待时间越长），每个账号每天限制打包5次。</p><h4 id="2-APP打包配置"><a href="#2-APP打包配置" class="headerlink" title="2. APP打包配置"></a>2. APP打包配置</h4><p><img src="http://yzwpic.weimayi.cn/img/image-20231019154657332.png" alt="image-20231019154657332"></p><h5 id="2-1-安卓包名"><a href="#2-1-安卓包名" class="headerlink" title="2.1 安卓包名"></a>2.1 安卓包名</h5><p>在项目中打开manifest.json文件，基础配置中第一行uni-app应用标识(ApplD)可以获取AppID，在填写Android包名时会自动填写。</p><h5 id="2-2-证书别名、证书私钥密码、证书文件"><a href="#2-2-证书别名、证书私钥密码、证书文件" class="headerlink" title="2.2 证书别名、证书私钥密码、证书文件"></a>2.2 证书别名、证书私钥密码、证书文件</h5><p>(1)、先安装JRE环境（推荐使用jre8环境，如已有可跳过），然后将jre安装路径添加到系统环境变量，在Path中添加。</p><p>可从Oracle官方下载jre安装包：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p><img src="http://yzwpic.weimayi.cn/img/image-20231019154950943.png" alt="image-20231019154950943"></p><p>(2)、打开cmd使用keytool -genkey命令生成证书：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keytool</span> -genkey -alias testalias -keyalg RSA -keysize <span class="hljs-number">2048</span> -validity <span class="hljs-number">36500</span> -keystore test.keystore<br></code></pre></td></tr></table></figure><p>*<strong>testalias</strong>是证书别名，修改为自己想设置的字符，建议使用英文字母和数字</p><p>*<strong>test.keystore</strong>是证书文件名称，可修改为自己想设置的文件名称，也可以指定完整文件路径</p><p>*<strong>36500</strong>是证书的有效期，表示100年有效期，单位天，建议时间设置长一点，避免证书过期</p><p>回车后会提示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Enter keystore password:  <br><br>[<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入证书文件密码，输入完成回车  </span><br><br>Re-enter <span class="hljs-keyword">new</span> password:   <br><br>[<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//再次输入证书文件密码，输入完成回车  </span><br><br>What <span class="hljs-keyword">is</span> your first <span class="hljs-keyword">and</span> last name?  <br><br>  [<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入名字和姓氏，输入完成回车  </span><br><br>What <span class="hljs-keyword">is</span> the name of your organizational unit?  <br><br>  [<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入组织单位名称，输入完成回车  </span><br><br>What <span class="hljs-keyword">is</span> the name of your organization?  <br><br>  [<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入组织名称，输入完成回车  </span><br><br>What <span class="hljs-keyword">is</span> the name of your City <span class="hljs-keyword">or</span> Locality?  <br><br>  [<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入城市或区域名称，输入完成回车  </span><br><br>What <span class="hljs-keyword">is</span> the name of your State <span class="hljs-keyword">or</span> Province?  <br><br>  [<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入省/市/自治区名称，输入完成回车  </span><br><br>What <span class="hljs-keyword">is</span> the two-letter country code <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> unit?  <br><br>  [<span class="hljs-meta">Unknown</span>]:  <span class="hljs-comment">//输入国家/地区代号（两个字母），中国为CN，输入完成回车  </span><br><br>Is CN=XX, OU=XX, O=XX, L=XX, ST=XX, C=XX correct?  <br><br>  [<span class="hljs-meta">no</span>]:  <span class="hljs-comment">//确认上面输入的内容是否正确，输入y，回车  </span><br><br><span class="hljs-function">Enter key password <span class="hljs-title">for</span> &lt;testalias&gt;  </span><br><span class="hljs-function"></span><br><span class="hljs-function">        (<span class="hljs-params">RETURN <span class="hljs-keyword">if</span> same <span class="hljs-keyword">as</span> keystore password</span>):  <span class="hljs-comment">//确认证书密码与证书文件密码一样（HBuilder|HBuilderX要求这两个密码一致），直接回车就可以</span></span><br></code></pre></td></tr></table></figure><p>以上命令运行完成后就会生成证书，路径为“D:\test.keystore”(路径不固定)，路径为cmd工作目录下生成的证书路径。</p><p>查看证书信息可以使用以下命令查看：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">keytool -<span class="hljs-keyword">list</span> -v -keystore <span class="hljs-keyword">test</span>.keystore  <br><br>Enter keystore password: <span class="hljs-comment">//输入密码，回车</span><br></code></pre></td></tr></table></figure><h4 id="3-开始打包"><a href="#3-开始打包" class="headerlink" title="3. 开始打包"></a>3. 开始打包</h4><p>完成以上操作其他选项可以使用默认选项，最后点击右下角打包就开始进入打包程序了。根据排队人数，等待时间可能会过长。最后生成的apk文件在项目的unpackage&#x2F;release&#x2F;apk文件夹下。</p><ul><li>最终生成的apk文件，可以直接用聊天工具发送到安卓手机上安装使用</li><li>去注册各大安卓应用市场账号，上传到应用市场供用户下载</li><li>也可以自己开发一个发布页，将安卓apk放到项目里，用户点击直接下载到手机里</li></ul><p><a href="https://blog.csdn.net/CRMEB/article/details/132277103">参考文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp框架实现云函数定时触发</title>
    <link href="/2023/03/uniapp%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9A%E6%97%B6%E8%A7%A6%E5%8F%91.html"/>
    <url>/2023/03/uniapp%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9A%E6%97%B6%E8%A7%A6%E5%8F%91.html</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>需要实现可以定时触发云函数的解决方案，uniapp框架支持定时触发</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="步骤一、创建云函数"><a href="#步骤一、创建云函数" class="headerlink" title="步骤一、创建云函数"></a>步骤一、创建云函数</h3><p>首先创建云函数，打开HbuilderX，cloudfunctions目录右键，新建云函数test</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230228151047158.png" alt="image-20230228151047158"></p><h3 id="步骤二、在uniCloud-web控制台点击需要添加触发器的云函数详情，创建云函数触发器，格式如下："><a href="#步骤二、在uniCloud-web控制台点击需要添加触发器的云函数详情，创建云函数触发器，格式如下：" class="headerlink" title="步骤二、在uniCloud web控制台点击需要添加触发器的云函数详情，创建云函数触发器，格式如下："></a>步骤二、在uniCloud web控制台点击需要添加触发器的云函数详情，创建云函数触发器，格式如下：</h3><p>打开<a href="https://unicloud.dcloud.net.cn/pages/login/login">uniCloud web</a>，选择云函数列表</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230228151250415.png" alt="image-20230228151250415"></p><p>打开详情，点击定时器触发，编辑</p><p><img src="http://yzwpic.weimayi.cn/img/image-20230228151343218.png" alt="image-20230228151343218"></p><p>如果是腾讯云</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;myTrigger&quot;</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;timer&quot;</span>,<br>    <span class="hljs-string">&quot;config&quot;</span>: <span class="hljs-string">&quot;0 0 2 1 * * *&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>如果是阿里云</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&quot;cron:0 0 * * * *&quot;</span>]</span><br></code></pre></td></tr></table></figure><h4 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h4><p>Cron 表达式有七个<strong>必需</strong>字段，按空格分隔。其中，每个字段都有相应的取值范围：</p><p><strong>注意：阿里云cron表达式是6位，腾讯云cron表示式是7位，这是两者的主要区别，因为阿里云没有第七位的年份</strong></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230228151736354.png" alt="image-20230228151736354"></p><p><img src="http://yzwpic.weimayi.cn/img/image-20230228151520403.png" alt="image-20230228151520403"></p><h4 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h4><p><a href="http://cron.ciding.cc/">Cron表达式在线生成工具</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序转uniapp迁移步骤及遇到的问题</title>
    <link href="/2023/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BD%ACuniapp%E8%BF%81%E7%A7%BB%E6%AD%A5%E9%AA%A4%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <url>/2023/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BD%ACuniapp%E8%BF%81%E7%A7%BB%E6%AD%A5%E9%AA%A4%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司有一个历史项目，是使用原生小程序开发的。最近客户提了需求，想要H5端也可以访问，为了节省时间和成本，所以最终决定迁移到uniapp，一套代码可以多端生成，这篇文章主要记录迁移的步骤和遇到的问题。</p><h3 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h3><h4 id="第一步：安装miniprogram-to-uniapp插件"><a href="#第一步：安装miniprogram-to-uniapp插件" class="headerlink" title="第一步：安装miniprogram-to-uniapp插件"></a>第一步：安装miniprogram-to-uniapp插件</h4><p>把微信小程序转成uni-app，推荐一款<strong>【miniprogram-to-uniapp】</strong>小程序转换工具插件</p><p>前提是先安装好nodejs</p><p>再执行命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install miniprogram-<span class="hljs-selector-tag">to</span>-uniapp -<span class="hljs-selector-tag">g</span><br></code></pre></td></tr></table></figure><p>因为这个包是工具，要求全局都能使用，所以需要-g进行全局安装。</p><h4 id="第二步：查看是否安装成功"><a href="#第二步：查看是否安装成功" class="headerlink" title="第二步：查看是否安装成功"></a>第二步：查看是否安装成功</h4><p>在执行命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wtu -V</span><br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/QQ20230208-120201.png" alt="QQ20230208-120201"></p><p>显示版本号，说明安装成功。</p><h4 id="第三步：转换"><a href="#第三步：转换" class="headerlink" title="第三步：转换"></a>第三步：转换</h4><p>在命令行输入wtu -i “你的小程序项目路径”</p><p>不知道路径的，可以先通过命令行进入项目</p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/QQ20230208-120337.png" alt="QQ20230208-120337"></p><p>就能获取项目路径</p><p>执行命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wtu -i <span class="hljs-regexp">/Users/y</span>zw<span class="hljs-regexp">/asto-projects/</span>atg-wx-app<br></code></pre></td></tr></table></figure><p><img src="http://yzwpic.weimayi.cn/img/QQ20230208-120808.png" alt="QQ20230208-120808"></p><h4 id="第四步：使用HBuilder-X运行转换后的项目"><a href="#第四步：使用HBuilder-X运行转换后的项目" class="headerlink" title="第四步：使用HBuilder X运行转换后的项目"></a>第四步：使用HBuilder X运行转换后的项目</h4><p>将转换后的项目导入到HBuilder X</p><p>点击菜单 运行-&gt;运行到小程序模拟器-&gt;微信开发者工具</p><p>查看运行之后的小程序，是否正常显示</p><h4 id="第五步：调试修改"><a href="#第五步：调试修改" class="headerlink" title="第五步：调试修改"></a>第五步：调试修改</h4><p>运行项目，如果有报错信息，解决报错的问题</p><h4 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h4><p>1、删除 const app &#x3D; getApp();</p><p>2、以 wx. 开头的方法更新为 uni. 开头</p><p>3、数据绑定 this.setData({ a : 1 }) 更新为 this.a &#x3D; 1</p><p>4、路由跳转 wx.navigateTo() 更新为uni.navigateTo()</p><p>5、属性绑定从</p><p>attr&#x3D;”“，改为 :attr&#x3D;”a”</p><p>title&#x3D;”复选框“ 改为 :title&#x3D;”‘复选框’ + item”</p><p>6、事件绑定从 bind:click&#x3D;”toggleActionSheet1” 改为 @click&#x3D;”toggleActionSheet1”</p><p>7、阻止事件冒泡 从 catch:tap&#x3D;”xx” 改为 @tap.native.stop&#x3D;”xx”</p><p>8、wx:if 改为 v-if</p><p>9、wx:for&#x3D;”“ wx:key&#x3D;”“ 改为&#96;v-for&#x3D;”(item,index) in list”</p>]]></content>
    
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp云函数安装uni-id</title>
    <link href="/2023/02/uniapp%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%89%E8%A3%85uni-id.html"/>
    <url>/2023/02/uniapp%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%89%E8%A3%85uni-id.html</url>
    
    <content type="html"><![CDATA[<h3 id="为什么需要uni-id"><a href="#为什么需要uni-id" class="headerlink" title="为什么需要uni-id"></a>为什么需要uni-id</h3><p>99%的应用，都要开发用户注册、登录、发送短信验证码、密码加密保存、修改密码、token管理等功能</p><p><code>uni-id</code>为<code>uniCloud</code>开发者提供了简单、统一、可扩展的用户管理能力封装。</p><p>直白的说，就是避免重复造轮子，人家官方已经我们造好了，只需要拿来用就行</p><p><code>uni-id</code>已完成的内容：</p><ul><li>注册、登录、发送短信验证码、密码加密保存、修改密码、token管理（短信验证码功能需要HBuilderX 2.8.3+）</li><li>App手机号一键认证，免验证码</li><li>三方登录：App中的微信登录和Apple ID、微信小程序中的微信登录、支付宝小程序中的支付宝账户登录</li><li>rbac权限角色体系</li></ul><h3 id="如何在项目中安装uni-id"><a href="#如何在项目中安装uni-id" class="headerlink" title="如何在项目中安装uni-id"></a>如何在项目中安装uni-id</h3><p>我们选择uni_modules版本来安装</p><p>首页，我们保证项目的uniCloud已经有关联的云服务空间</p><p>然后，我们打开uni-id插件</p><p><a href="https://ext.dcloud.net.cn/plugin?id=2116">https://ext.dcloud.net.cn/plugin?id=2116</a></p><p><img src="https://pica.zhimg.com/80/v2-46396c90dde32bcd78e8290e66a8f412_720w.png" alt="img"></p><p>导入到HBuilder，选择我们的项目</p><p>导入项目之后，会在uni_modules目录下，多出两个文件夹，uni-config-center和uni-id</p><p>我们在在uni_modules\uni-config-center\uniCloud\cloudfunctions\common\uni-config-center这个目录下创建uni-id目录</p><p><img src="https://pic2.zhimg.com/80/v2-a118381906d0acacbc550e1b314d64c4_720w.png" alt="img"></p><p>在创建的uni-id目录下再创建config.json文件</p><p><img src="https://pica.zhimg.com/80/v2-de8420bfdfd1a9ad0e20246556c1d34e_720w.png" alt="img"></p><p>config.json内容如下，只需要自定义配置前面两个参数passwordSecret和tokenSecret即可，其它参数暂时用不到，使用官方默认的</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>    <span class="hljs-string">&quot;passwordSecret&quot;</span>: <span class="hljs-string">&quot;yzw-weixin-h5&quot;</span>,<br>    <span class="hljs-string">&quot;tokenSecret&quot;</span>: <span class="hljs-string">&quot;yzw-weixin-h5&quot;</span>,<br>    <span class="hljs-string">&quot;tokenExpiresIn&quot;</span>: <span class="hljs-number">7200</span>,<br>    <span class="hljs-string">&quot;tokenExpiresThreshold&quot;</span>: <span class="hljs-number">600</span>,<br>    <span class="hljs-string">&quot;passwordErrorLimit&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;passwordErrorRetryTime&quot;</span>: <span class="hljs-number">3600</span>,<br>    <span class="hljs-string">&quot;autoSetInviteCode&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;forceInviteCode&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;app-plus&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;tokenExpiresIn&quot;</span>: <span class="hljs-number">2592000</span>,<br>        <span class="hljs-string">&quot;oauth&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;weixin&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;appid&quot;</span> : &quot;<span class="hljs-type">weixin</span> appid<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                &quot;</span>appsecret<span class="hljs-string">&quot; : &quot;</span>weixin appsecret<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>apple<span class="hljs-string">&quot;:    &#123;</span><br><span class="hljs-string">                &quot;</span>bundleId<span class="hljs-string">&quot;: &quot;</span>your APP bundleId<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>mp-weixin<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        &quot;</span>oauth<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">            &quot;</span>weixin<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>appid<span class="hljs-string">&quot; : &quot;</span>weixin appid<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                &quot;</span>appsecret<span class="hljs-string">&quot; : &quot;</span>weixin appsecret<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>mp-alipay<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        &quot;</span>oauth<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">            &quot;</span>alipay<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>appid<span class="hljs-string">&quot; : &quot;</span>alipay appid<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                &quot;</span>privateKey<span class="hljs-string">&quot; : &quot;</span>alipay privateKey<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>service<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        &quot;</span>sms<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">            &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>your app name<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>codeExpiresIn<span class="hljs-string">&quot;: 180,</span><br><span class="hljs-string">            &quot;</span>smsKey<span class="hljs-string">&quot;: &quot;</span>your sms key<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>smsSecret<span class="hljs-string">&quot;: &quot;</span>your sms secret<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>univerify<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">            &quot;</span>appid<span class="hljs-string">&quot;:&quot;</span>your appid<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>apiKey<span class="hljs-string">&quot;: &quot;</span>your apiKey<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>apiSecret<span class="hljs-string">&quot;: &quot;</span>your apiSecret<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>此时在uniCloud\cloudfunctions\common下就会有uni-config-center和uni-id两个文件，对应的就是uni_modules目录下的这两个文件，可以理解为uni_modules快捷方式到了uniCloud目录下</p><p>将uni-config-center和uni-id这两个文件上传到云端，先上传uni-config-center公共模块，再上传uni-id</p><p><img src="https://pic1.zhimg.com/80/v2-bc2d811c8e32027c20b587ab3577d76f_720w.png" alt="img"></p><p>云数据库增加uni-id数据表<br>在uniCloud目录上右键，打开数据库管理界面</p><p><img src="https://pic3.zhimg.com/80/v2-7ee660f048950938cdafdea563027b4c_720w.png" alt="img"></p><p>新建数据库表</p><p><a href="https://pica.zhimg.com/80/v2-b90aadec647851f050ad61448162fe2a_720w.png"><img src="https://pica.zhimg.com/80/v2-b90aadec647851f050ad61448162fe2a_720w.png" alt="img"></a></p><p>img</p><p>新建数据库表，可以勾选全部表，也可以选自己需要的表，但是uni-id-users这个表一定要有</p><p><img src="https://pic1.zhimg.com/80/v2-4fdee44f1aab59009d3dc8bf11f2d12f_720w.png" alt="img"></p><p>回到HBuilder X工具，在database目录下右键下载新增加的表</p><p><img src="https://pica.zhimg.com/80/v2-42e4a0b487a743c21a8dc57cba668af1_720w.png" alt="img"></p><p>到此uni-id全部配置完毕</p><h3 id="如何使用uni-id"><a href="#如何使用uni-id" class="headerlink" title="如何使用uni-id?"></a>如何使用uni-id?</h3><p>后面需要用到的uni-id的云函数还有一步操作，就是要在所需uni-id的云函数目录上右键选择管理公共模块依赖添加uni-id到云函数里</p><p>以云函数login为例</p><p><img src="https://pica.zhimg.com/80/v2-19ce09630d8373eef4022a8906b2e1c7_720w.png" alt="img"></p><p>勾选uni-id</p><p><img src="https://pic1.zhimg.com/80/v2-a28f99bf7bc972e8e9a9be300398eb35_720w.png" alt="img"></p><p>login云函数代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 云函数register的代码</span><br><span class="hljs-keyword">const</span> uniID = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uni-id&#x27;</span>)<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">main</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">event,context</span>) &#123;<br><span class="hljs-keyword">const</span> &#123;<br>username,<br>password<br>&#125; = event<br>  <span class="hljs-comment">//自己额外增加的校验密码规范的逻辑（可选）</span><br>  <span class="hljs-comment">//强弱密码校验,密码至少包含大写字母，小写字母，数字，且不少于6位</span><br>  <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^]&#123;6,16&#125;$/</span>.<span class="hljs-title function_">test</span>(password))&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">401</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码至少包含大写字母，小写字母，数字，且不少于6位&#x27;</span><br>    &#125;<br>  &#125;<br><span class="hljs-comment">// 自动验证用户名是否与已经注册的用户名重复，如果重复会直接返回错误。否则会自动生成token并加密password存储username、password、token到数据表uni-id-users，并返回如上响应参数</span><br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> uniID.<span class="hljs-title function_">register</span>(&#123; <span class="hljs-comment">//支持传入任何值，比如可以直接传入mobile即可设置手机号码，切勿直接传入event否则这是一个极大的安全问题</span><br>    username,<br>    password<br>&#125;)<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 客户端代码</span><br>uniCloud.<span class="hljs-title function_ invoke__">callFunction</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;register&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;username&#x27;</span>,<br><span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;user password&#x27;</span><br>&#125;,<br><span class="hljs-title function_ invoke__">success</span>(res)&#123;<br><span class="hljs-keyword">if</span>(res.result.code === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 2.8.0版本起调整为蛇形uni_id_token（调整后在一段时间内兼容驼峰uniIdToken）</span><br>uni.<span class="hljs-title function_ invoke__">setStorageSync</span>(<span class="hljs-string">&#x27;uni_id_token&#x27;</span>,res.result.token)<br>uni.<span class="hljs-title function_ invoke__">setStorageSync</span>(<span class="hljs-string">&#x27;uni_id_token_expired&#x27;</span>, res.result.tokenExpired)<br><span class="hljs-comment">// 其他业务代码，如跳转到首页等</span><br>uni.<span class="hljs-title function_ invoke__">showToast</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;注册成功&#x27;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;none&#x27;</span><br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>uni.<span class="hljs-title function_ invoke__">showModal</span>(&#123;<br><span class="hljs-attr">content</span>: res.result.message,<br><span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span><br>&#125;)<br>&#125;<br>&#125;,<br><span class="hljs-title function_ invoke__">fail</span>()&#123;<br>uni.<span class="hljs-title function_ invoke__">showModal</span>(&#123;<br><span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;注册失败，请稍后再试&#x27;</span>,<br><span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span><br>&#125;)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://uniapp.dcloud.net.cn/uniCloud/uni-id.html">uni-id用户体系</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在uni-app框架下使用wxml-to-canvas</title>
    <link href="/2023/02/%E5%A6%82%E4%BD%95%E5%9C%A8uni-app%E6%A1%86%E6%9E%B6%E4%B8%8B%E4%BD%BF%E7%94%A8wxml-to-canvas.html"/>
    <url>/2023/02/%E5%A6%82%E4%BD%95%E5%9C%A8uni-app%E6%A1%86%E6%9E%B6%E4%B8%8B%E4%BD%BF%E7%94%A8wxml-to-canvas.html</url>
    
    <content type="html"><![CDATA[<h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>大家都知道微信小程序不能分享到朋友圈。所以想要在朋友圈传播通常是以海报的形式。</p><p>小程序需要先生成海报页面，然后保存海报图片到手机相册，最后分享到朋友圈</p><p>小程序的canvas可以实现，但是学习成本大，排版麻烦</p><p>所以打算使用小程序扩展组件wxml-to-canvas</p><h3 id="基于原生程序开发："><a href="#基于原生程序开发：" class="headerlink" title="基于原生程序开发："></a>基于原生程序开发：</h3><p>第一步：npm安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install <span class="hljs-attr">--save</span> wxml-<span class="hljs-selector-tag">to</span>-<span class="hljs-selector-tag">canvas</span><br></code></pre></td></tr></table></figure><p>后面再增加JSON组件声明，wxml引入组件即可</p><p>第二步：JSON组件声明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  &quot;usingComponents&quot;: &#123;<br>    &quot;wxml-<span class="hljs-selector-tag">to</span>-<span class="hljs-selector-tag">canvas</span>&quot;: <span class="hljs-string">&quot;wxml-to-canvas&quot;</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：wxml引入组件</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">src</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">wxml-to-canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wxml-to-canvas</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">src</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">width</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">px; height: </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">height</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>第四步：js获取实例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> &#123;wxml, style&#125; = require(<span class="hljs-string">&#x27;./demo.js&#x27;</span>)<br>Page(&#123;<br>  <span class="hljs-keyword">data</span>: &#123;<br>    src: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;,<br>  onLoad() &#123;<br>    <span class="hljs-keyword">this</span>.widget = <span class="hljs-keyword">this</span>.selectComponent(<span class="hljs-string">&#x27;.widget&#x27;</span>)<br>  &#125;,<br>  renderToCanvas() &#123;<br>    <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">this</span>.widget.renderToCanvas(&#123; wxml, style &#125;)<br>    p1.then((res) =&gt; &#123;<br>      <span class="hljs-keyword">this</span>.container = res<br>      <span class="hljs-keyword">this</span>.extraImage()<br>    &#125;)<br>  &#125;,<br>  extraImage() &#123;<br>    <span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">this</span>.widget.canvasToTempFilePath()<br>    p2.then(res =&gt; &#123;<br>      <span class="hljs-keyword">this</span>.setData(&#123;<br>        src: res.tempFilePath,<br>        width: <span class="hljs-keyword">this</span>.container.layoutBox.width,<br>        height: <span class="hljs-keyword">this</span>.container.layoutBox.height<br>      &#125;)<br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>执行之后，会在项目根目录下创建node_modules目录，但是这个node_modules 目录不会参与小程序编译、上传和打包，所以要通过开发者工具“工具-构建 npm”，构建完后会在根目录下生成一个 miniprogram_npm 目录，里面会存放构建打包后的 npm 包，也就是小程序真实使用的 npm 包。</p><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p>但是uniapp开发的小程序不一样，首先uniapp项目里会有自己的package.json文件，安装npm install之后，会在项目根目录生成一个node_modules目录，里面是所有第三方的安装包，包括uniapp的所有包，核心、编译、解析等等。</p><p>经过uniapp打包之后，生成的原生小程序项目（也就是我们最终给开发者工具使用的项目包），里面是不包含node_modules目录，也就没办法通过开发者工具“工具-构建 npm”生成miniprogram_npm 目录</p><h3 id="基于uniapp小程序开发："><a href="#基于uniapp小程序开发：" class="headerlink" title="基于uniapp小程序开发："></a>基于uniapp小程序开发：</h3><p>下载官方<code>wxml-to-canvas</code>的代码片段</p><p>我们在目录里找到<code>miniprogram_npm</code>目录，里面包含三个已经打包好的文件，分别是</p><p><code>eventemitter3</code>、<code>widget-ui</code>、<code>wxml-to-canvas</code></p><p><img src="https://pic1.zhimg.com/80/v2-2e32424fcfe0ca53ae78941d2a21c832_1440w.png" alt="img"></p><p>我们将其中两个个文件</p><p>widget-ui、wxml-to-canvas</p><p>拷贝下来，</p><p>放到我们的uniapp项目里</p><p>widget-ui文件放到wxcomponents&#x2F;widget-ui&#x2F;miniprogram_npm&#x2F;widget-ui</p><p>wxml-to-canvas文件放到wxcomponents&#x2F;wxml-to-canvas&#x2F;miniprogram_npm&#x2F;wxml-to-canvas</p><p>最终形成的文件格式如下：</p><p><img src="https://pic2.zhimg.com/80/v2-c7cbe48c05a00aab216572df7dde89f7_1440w.png" alt="img"></p><p>然后在全局引入wxml-to-canvas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;usingComponents&quot;: &#123;<br>    &quot;wxml-<span class="hljs-selector-tag">to</span>-<span class="hljs-selector-tag">canvas</span>&quot;: <span class="hljs-string">&quot;/wxcomponents/wxml-to-canvas/miniprogram_npm/wxml-to-canvas/index&quot;</span>,<br> &#125;<br></code></pre></td></tr></table></figure><p>另外需要修改wxml-to-canvas&#x2F;index.js</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module.exports</span> = require(<span class="hljs-string">&quot;widget-ui&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module.exports</span> = require(<span class="hljs-string">&quot;../../../widget-ui/miniprogram_npm/widget-ui/index&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>剩下的就是按照官方api进行开发就可以了</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1.wxml支持 view、text、image 三种标签，通过 class 匹配 style 对象中的样式。</p><p>2.css对象属性值为对应 wxml 标签的 class 驼峰形式。需为每个元素指定 width 和 height 属性，否则会导致布局错误。</p><p>3.存在多个 className 时，位置靠后的优先级更高，子元素会继承父级元素的可继承属性。</p><p>元素均为 flex 布局。left&#x2F;top 等 仅在 absolute 定位下生效。</p><p>4.css不支持背景图片，在wxml中用img代替。</p><p>5.背景图片在开发工具和开发版都可以正常显示，但是在体验版显示不出来；</p><p>图片的域名在项目配置里没有，在后台管理-开发设置-服务器域名-request合法域名-配置图片的域名即可正常显示。</p><h3 id="文档："><a href="#文档：" class="headerlink" title="文档："></a>文档：</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/extended/component-plus/wxml-to-canvas.html">wxml-to-canvas</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yarn的安裝和使用</title>
    <link href="/2022/12/yarn%E7%9A%84%E5%AE%89%E8%A3%9D%E5%92%8C%E4%BD%BF%E7%94%A8.html"/>
    <url>/2022/12/yarn%E7%9A%84%E5%AE%89%E8%A3%9D%E5%92%8C%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<h4 id="Yarn-的简介："><a href="#Yarn-的简介：" class="headerlink" title="Yarn 的简介："></a>Yarn 的简介：</h4><p>Yarn是facebook发布的一款取代npm的包管理工具；</p><h4 id="Yarn的特色："><a href="#Yarn的特色：" class="headerlink" title="Yarn的特色："></a>Yarn的特色：</h4><p>1）速度超快—-Yarn缓存了每一个下载过的包，因此再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，所以安装快。</p><p>2）超级安全—-在执行代码以前，Yarn会经过算法检验每一个安装包的完整性。</p><p>3）超级可靠—–使用详细、简洁的锁文件格式和明确的安装算法，Yarn可以保证在不一样系统上无差别工做。</p><h4 id="Yarn的安装："><a href="#Yarn的安装：" class="headerlink" title="Yarn的安装："></a>Yarn的安装：</h4><p>下载nodejs,使用npm安装</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--global yarn</span><br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yarn <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">yarn config set registry https:<span class="hljs-comment">//registry.npm.taobao.org/ -g</span><br><br>yarn config set sass_binary_site http:<span class="hljs-comment">//cdn.npm.taobao.org/dist/node-sass/ -g</span><br></code></pre></td></tr></table></figure><h4 id="Yarn的经常使用命令："><a href="#Yarn的经常使用命令：" class="headerlink" title="Yarn的经常使用命令："></a>Yarn的经常使用命令：</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs gams">yarn -v  <span class="hljs-comment">// 查看yarn 版本</span><br>yarn config list  <span class="hljs-comment">// 查看yarn配置</span><br>yarn config get registry   <span class="hljs-comment">// 查看当前yarn源</span><br> <br><span class="hljs-comment">// 修改yarn源（此处为淘宝的源）</span><br>yarn config <span class="hljs-keyword">set</span> registry <span class="hljs-comment">https:</span>//<span class="hljs-comment">registry.npm.taobao.org</span>  <br> <br><span class="hljs-comment">// yarn安装依赖</span><br>yarn <span class="hljs-comment">add</span> 包名          // 局部安装<br>yarn <span class="hljs-comment">global add</span> 包名   // 全局安装<br> <br><span class="hljs-comment">// yarn 卸载依赖</span><br>yarn <span class="hljs-comment">remove</span> 包名         // 局部卸载<br>yarn <span class="hljs-comment">global remove</span> 包名  // 全局卸载（如果安装时安到了全局，那么卸载就要对应卸载全局的）<br> <br><span class="hljs-comment">// yarn 查看全局安装过的包</span><br>yarn <span class="hljs-comment">global list</span>  <br> <br>npm <span class="hljs-comment">install -g yarn</span>  // 安装<span class="hljs-comment">yarn</span> <br>yarn <span class="hljs-comment">--version</span>       // 安装成功后，查看版本号<br>md <span class="hljs-comment">yarn</span>   // 创建文件夹 <span class="hljs-comment">yarn</span>  <br>cd <span class="hljs-comment">yarn</span>   // 进入<span class="hljs-comment">yarn</span>文件夹 <br> <br>初始化项目 <br>yarn <span class="hljs-comment">init</span> // 同<span class="hljs-comment">npm init</span>，执行输入信息后，会生成<span class="hljs-comment">package.json</span>文件<br> <br>yarn的配置项： <br>yarn <span class="hljs-comment">config list</span> // 显示所有配置项<br>yarn <span class="hljs-comment">config get &lt;key&gt;</span> //显示某配置项<br>yarn <span class="hljs-comment">config delete &lt;key&gt;</span> //删除某配置项<br>yarn <span class="hljs-comment">config set &lt;key&gt; &lt;value&gt; [-g</span>|<span class="hljs-comment">--global]</span> //设置配置项<br> <br>安装包： <br>yarn <span class="hljs-comment">install</span>         //安装<span class="hljs-comment">package.json</span>里所有包，并将包及它的所有依赖项保存进<span class="hljs-comment">yarn.lock</span><br>yarn <span class="hljs-comment">install --flat</span>  //安装一个包的单一版本<br>yarn <span class="hljs-comment">install --force</span>         //强制重新下载所有包<br>yarn <span class="hljs-comment">install --production</span>    //只安装<span class="hljs-comment">dependencies</span>里的包<br>yarn <span class="hljs-comment">install --no-lockfile</span>   //不读取或生成<span class="hljs-comment">yarn.lock</span><br>yarn <span class="hljs-comment">install --pure-lockfile</span> //不生成<span class="hljs-comment">yarn.lock</span><br>添加包（会更新package.json和yarn.lock）：<br> <br>yarn <span class="hljs-comment">add [package]</span> // 在当前的项目中添加一个依赖包，会自动更新到<span class="hljs-comment">package.json</span>和<span class="hljs-comment">yarn.lock</span>文件中<br>yarn <span class="hljs-comment">add [package]@[version]</span> // 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用<span class="hljs-comment">-E</span>参数<br>yarn <span class="hljs-comment">add [package]@[tag]</span> // 安装某个<span class="hljs-comment">tag</span>（比如<span class="hljs-comment">beta,next</span>或者<span class="hljs-comment">latest</span>）<br> <br><span class="hljs-comment">//不指定依赖类型默认安装到dependencies里，你也可以指定依赖类型：</span><br>yarn <span class="hljs-comment">add --dev</span>/-D <span class="hljs-comment">// 加到 devDependencies</span><br>yarn add --peer/<span class="hljs-comment">-P</span> // 加到 <span class="hljs-comment">peerDependencies</span><br>yarn <span class="hljs-comment">add --optional</span>/-O <span class="hljs-comment">// 加到 optionalDependencies</span><br> <br><span class="hljs-comment">//默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：</span><br>yarn add --exact/<span class="hljs-comment">-E</span> // 安装包的精确版本。例如<span class="hljs-comment">yarn add foo@1.2.3</span>会接受<span class="hljs-comment">1.9.1</span>版，但是<span class="hljs-comment">yarn add foo@1.2.3 --exact</span>只会接受<span class="hljs-comment">1.2.3</span>版<br>yarn <span class="hljs-comment">add --tilde</span>/-T <span class="hljs-comment">// 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0</span><br> <br>yarn publish <span class="hljs-comment">// 发布包</span><br>yarn remove &lt;packageName&gt;  <span class="hljs-comment">// 移除一个包，会自动更新package.json和yarn.lock</span><br>yarn upgrade <span class="hljs-comment">// 更新一个依赖: 用于更新包到基于规范范围的最新版本</span><br>yarn run   <span class="hljs-comment">// 运行脚本: 用来执行在 package.json 中 scripts 属性下定义的脚本</span><br>yarn info &lt;packageName&gt; 可以用来查看某个模块的最新版本信息<br> <br>缓存 <br>yarn cache <br>yarn cache list # 列出已缓存的每个包 <br>yarn cache dir # 返回 全局缓存位置 <br>yarn cache clean # 清除缓存<br></code></pre></td></tr></table></figure><h4 id="npm-与-yarn-命令比较："><a href="#npm-与-yarn-命令比较：" class="headerlink" title="npm 与 yarn 命令比较："></a>npm 与 yarn 命令比较：</h4><table><thead><tr><th><strong>NPM</strong></th><th><strong>YARN</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>npm init</td><td>yarn init</td><td>初始化某个項目</td></tr><tr><td>npm install &#x2F; link</td><td>yarn install&#x2F;link</td><td>默认的安装依赖操做</td></tr><tr><td>npm install taco –save</td><td>yarn add taco</td><td>安装某个依赖，而且默认保存到package</td></tr><tr><td>npm uninstall taco –save</td><td>yarn remove taco</td><td>移除某个依赖項目</td></tr><tr><td>npm install taco –save-dev</td><td>yarn add taco –dev</td><td>安装某个开发时依赖項目</td></tr><tr><td>npm update taco –save</td><td>yarn upgrade taco</td><td>更新某个依赖項目</td></tr><tr><td>npm install taco –global</td><td>yarn global add taco</td><td>安装某个全局依赖項目</td></tr><tr><td>npm publish&#x2F;login&#x2F;logout</td><td>yarn publish&#x2F;login&#x2F;logout</td><td>发布&#x2F;登录&#x2F;登出，一系列NPM Registry操做</td></tr><tr><td>npm run&#x2F;test</td><td>yarn run&#x2F;test</td><td>运行某个命令</td></tr></tbody></table><blockquote><p>比如说你的项目模块依赖是图中描述的，@1.2.1代表这个模块的版本。在你安装A的时候需要安装依赖C和D，很多依赖不会指定版本号，默认会安装最新的版本，这样就会出现问题：比如今天安装模块的时候C和D是某一个版本，而当以后C、D更新的时候，再次安装模块就会安装C和D的最新版本，如果新的版本无法兼容你的项目，你的程序可能就会出BUG，甚至无法运行。这就是npm的弊端，而yarn为了解决这个问题推出了yarn.lock的机制，这是作者项目中的yarn.lock文件</p></blockquote><p>注意：这个文件不要手动修改它，当你使用一些操作如yarn add时，yarn会自动更新yarn.lock。</p><h5 id="安装在dependencies-中"><a href="#安装在dependencies-中" class="headerlink" title="安装在dependencies 中"></a>安装在<code>dependencies</code> 中</h5><p>正常依赖项，或者说是运行代码时需要的依赖项</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing">yarn <span class="hljs-built_in">add</span> [<span class="hljs-keyword">package</span>]<br></code></pre></td></tr></table></figure><h5 id="安装在devDependencies中"><a href="#安装在devDependencies中" class="headerlink" title="安装在devDependencies中"></a>安装在<code>devDependencies</code>中</h5><p>开发依赖项，比如开发过程中需要的依赖项</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yarn add [<span class="hljs-keyword">package</span>] <span class="hljs-comment">--dev</span><br></code></pre></td></tr></table></figure><h5 id="安装在peerDependencies中"><a href="#安装在peerDependencies中" class="headerlink" title="安装在peerDependencies中"></a>安装在<code>peerDependencies</code>中</h5><p>对等依赖项，一般只有你发布自己的包才会有用</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yarn add [<span class="hljs-keyword">package</span>] <span class="hljs-comment">--peer</span><br></code></pre></td></tr></table></figure><h5 id="安装在optionalDependencies中"><a href="#安装在optionalDependencies中" class="headerlink" title="安装在optionalDependencies中"></a>安装在<code>optionalDependencies</code>中</h5><p>可选依赖，就是可有可无的依赖，安装失败也会提示安装成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yarn add [<span class="hljs-keyword">package</span>] <span class="hljs-comment">--optional</span><br></code></pre></td></tr></table></figure><h5 id="升级依赖包命令"><a href="#升级依赖包命令" class="headerlink" title="升级依赖包命令"></a>升级依赖包命令</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe">yarn upgrade [<span class="hljs-keyword">package</span>]<br><br>yarn upgrade [<span class="hljs-keyword">package</span>]<span class="hljs-meta">@[version]</span><br><br>yarn upgrade [<span class="hljs-keyword">package</span>]<span class="hljs-meta">@[tag]</span><br></code></pre></td></tr></table></figure><h5 id="删除依赖包"><a href="#删除依赖包" class="headerlink" title="删除依赖包"></a>删除依赖包</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">yarn <span class="hljs-built_in">remove</span> [<span class="hljs-built_in">package</span>]<br></code></pre></td></tr></table></figure><h5 id="devDependencies和dependencies的区别"><a href="#devDependencies和dependencies的区别" class="headerlink" title="devDependencies和dependencies的区别"></a>devDependencies和dependencies的区别</h5><p>devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、shell的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</p>]]></content>
    
    
    
    <tags>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么在JavaScript里0.1 + 0.2不是等于0.3？</title>
    <link href="/2022/03/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8JavaScript%E9%87%8C0-1-0-2%E4%B8%8D%E6%98%AF%E7%AD%89%E4%BA%8E0-3%EF%BC%9F.html"/>
    <url>/2022/03/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8JavaScript%E9%87%8C0-1-0-2%E4%B8%8D%E6%98%AF%E7%AD%89%E4%BA%8E0-3%EF%BC%9F.html</url>
    
    <content type="html"><![CDATA[<p>根据浮点数的定义，非整数的Number类型无法用 &#x3D;&#x3D;（&#x3D;&#x3D;&#x3D;也不行） 来比较，一段著名的代码，为什么在JavaScript中，0.1+0.2不能&#x3D;0.3：·</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log( <span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">2</span> == <span class="hljs-number">0</span>.<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>这里输出的结果是false，说明两边不相等的，这是浮点运算的特点，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。</p><p>所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用JavaScript提供的最小精度值：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log( Math.abs(<span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">2</span> - <span class="hljs-number">0</span>.<span class="hljs-number">3</span>) &lt;= Number.EPSILON);<br></code></pre></td></tr></table></figure><p>检查等式左右两边差的绝对值是否小于最小精度，才是正确的比较浮点数的方法。这段代码结果就是 true 了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node + Selenium实现高级爬虫</title>
    <link href="/2022/01/node-Selenium%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%BA%A7%E7%88%AC%E8%99%AB.html"/>
    <url>/2022/01/node-Selenium%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%BA%A7%E7%88%AC%E8%99%AB.html</url>
    
    <content type="html"><![CDATA[<p>1.全局安装chromedrive包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g chromedriver<br></code></pre></td></tr></table></figure><p>如果环境变量PATH配置错误，只需要在本地项目安装chromedriver包</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> chromedriver<br></code></pre></td></tr></table></figure><p>新建index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> webdriver <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;selenium-webdriver&#x27;</span>;<br><span class="hljs-keyword">import</span> chrome <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;selenium-webdriver/chrome&#x27;</span>;<br><span class="hljs-keyword">import</span> chromedriver <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;chromedriver&#x27;</span>;<br><br>chrome.<span class="hljs-title function_">setDefaultService</span>(<span class="hljs-keyword">new</span> chrome.<span class="hljs-title class_">ServiceBuilder</span>(chromedriver.<span class="hljs-property">path</span>).<span class="hljs-title function_">build</span>());<br><br><span class="hljs-keyword">var</span> driver = <span class="hljs-keyword">new</span> webdriver.<span class="hljs-title class_">Builder</span>()  <br>.<span class="hljs-title function_">withCapabilities</span>(webdriver.<span class="hljs-property">Capabilities</span>.<span class="hljs-title function_">chrome</span>())<br>        .<span class="hljs-title function_">build</span>();<br><br>driver.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p>参考文档</p><p><a href="https://stackoverflow.com/questions/36410283/node-js-complaining-that-the-chromedriver-could-not-be-found-on-the-current-pat/65300057">The ChromeDriver could not be found on the current PATH</a></p><p><a href="https://blog.csdn.net/zm06201118/article/details/100561005">node+selenium-webdriver爬虫高级</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dependencies和devDependencies的区别</title>
    <link href="/2021/12/dependencies%E5%92%8CdevDependencies%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <url>/2021/12/dependencies%E5%92%8CdevDependencies%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    
    <content type="html"><![CDATA[<p>我们都知道package.json里的依赖有两种，一种是dependencies，一种是devDependencies，下面我们来看看两者的主要区别。</p><p>Dependencies</p><p>首页dependencies是我们比较常用的，安装的依赖最终会被构建到部署环境里</p><pre><code class="hljs">npm install vue --save// 或者npm install vue -S// 或者npm install vue// 或者npm i vue</code></pre><p>devDependencies</p><p>devDependencies是指开发中的依赖，比如eslint，我们线上的代码不需要eslint，所以应该把他放入devDependencies</p><pre><code class="hljs">npm install eslint --save--dev// 或者npm install eslint -D</code></pre><p>PeerDependencies</p><p>最后说一个peerDependencies，peerDependencies是指依赖的宿主版本号。举个例子，比如vuex是依赖于vue的，我们看到vuex的package.json中，peerDependencies就指明了自己希望的宿主vue版本号。</p><pre><code class="hljs">&quot;repository&quot;: &#123;    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;git+https://github.com/vuejs/vuex.git&quot;  &#125;,  &quot;homepage&quot;: &quot;https://github.com/vuejs/vuex#readme&quot;,  &quot;peerDependencies&quot;: &#123;    &quot;vue&quot;: &quot;^2.0.0&quot;  &#125;,</code></pre><p>如果我安装了上述版本vuex之后，再安装vue3.0，就会报出一个警告：</p><pre><code class="hljs">warning &quot; &gt; vuex@3.6.0&quot; has incorrect peer dependency &quot;vue@^2.0.0&quot;.</code></pre><p>看到这个错误提示，我们就知道，你的vuex插件可能与当前的vue版本不兼容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小程序通过wxml-to-canvas生成分享海报</title>
    <link href="/2021/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87wxml-to-canvas%E7%94%9F%E6%88%90%E5%88%86%E4%BA%AB%E6%B5%B7%E6%8A%A5.html"/>
    <url>/2021/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87wxml-to-canvas%E7%94%9F%E6%88%90%E5%88%86%E4%BA%AB%E6%B5%B7%E6%8A%A5.html</url>
    
    <content type="html"><![CDATA[<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>小程序项目中，想要实现生成一张海报图，并且可以将图片保存到手机本地相册，然后用户可以分享到朋友圈或者发送给好友</p><p>小程序的canvas可以实现，但是学习成本大，排版麻烦</p><p>所以打算使用小程序官方扩展组件wxml-to-canvas</p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>由于项目使用了uniapp开发，跟小程序扩展组件的安装逻辑冲突</p><p>正常原生小程序开发，如果要增加扩展组件wxml-to-canvas</p><p>只需要安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install <span class="hljs-attr">--save</span> wxml-<span class="hljs-selector-tag">to</span>-<span class="hljs-selector-tag">canvas</span><br></code></pre></td></tr></table></figure><p>后面再增加JSON组件声明，wxml引入组件即可</p><p>执行之后，会在项目根目录下创建node_modules目录，但是这个node_modules 目录不会参与小程序编译、上传和打包，所以要通过开发者工具“工具-构建 npm”，这样就会在node_modules 的同级目录下会生成一个 miniprogram_npm 目录，里面会存放构建打包后的 npm 包，也就是小程序真正使用的 npm 包。</p><p> 但是uniapp开发的小程序不一样，首先uniapp项目里会有自己的package.json文件，安装npm install之后，会在项目根目录生成一个node_modules目录，里面是所有第三方的安装包，包括uniapp的所有包，核心、编译、解析等等。</p><p>经过uniapp打包之后，生成的原生小程序项目（也就是我们最终给开发者工具使用的项目包），里面是不包含node_modules目录，也就没办法通过开发者工具“工具-构建 npm”生成miniprogram_npm 目录</p><h5 id="所以解决方案是"><a href="#所以解决方案是" class="headerlink" title="所以解决方案是"></a>所以解决方案是</h5><p>下载官方wxml-to-canvas的代码片段</p><p>我们在目录里找到miniprogram_npm目录</p><p><img src="https://img2020.cnblogs.com/blog/2253551/202012/2253551-20201216114702226-407762141.png" alt="img"></p><p>将其中两个个文件</p><p>widget-ui、wxml-to-canvas拷贝下来，</p><p>放到我们的uniapp项目里wxcomponents目录下</p><p>最终形成的文件格式如下：</p><p><img src="https://pic1.zhimg.com/80/v2-e430fc2b19b761c668a30b4db5a2dd14_720w.png" alt="img"></p><p>然后在全局引入wxml-to-canvas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;usingComponents&quot;: &#123;<br>    &quot;wxml-<span class="hljs-selector-tag">to</span>-<span class="hljs-selector-tag">canvas</span>&quot;: <span class="hljs-string">&quot;/wxcomponents/wxml-to-canvas/index&quot;</span>,<br> &#125;<br></code></pre></td></tr></table></figure><p>另外需要修改wxml-to-canvas&#x2F;index.js</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module.exports</span> = require(<span class="hljs-string">&quot;widget-ui&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module.exports</span> = require(<span class="hljs-string">&quot;../widget-ui/index&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>剩下的就是按照官方api进行开发就可以了</p><p>index.vue</p><p>页面引入组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wxml-to-canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget&quot;</span> <span class="hljs-attr">:width</span>=<span class="hljs-string">&quot;canvasWidth&quot;</span> <span class="hljs-attr">:height</span>=<span class="hljs-string">&quot;canvasHeight&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wxml-to-canvas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; wxml, style &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./DomData.js&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      wx.<span class="hljs-title function_">showLoading</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;海报生成中...&#x27;</span>&#125;)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">widget</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectComponent</span>(<span class="hljs-string">&#x27;.widget&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">renderToCanvas</span>()</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// wxml 转 canvas</span></span><br><span class="language-javascript">      <span class="hljs-title function_">renderToCanvas</span> () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> _wxml = <span class="hljs-title function_">wxml</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> _style = <span class="hljs-title function_">style</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">screenWidth</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> p1 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">widget</span>.<span class="hljs-title function_">renderToCanvas</span>(&#123; <span class="hljs-attr">wxml</span>: _wxml, <span class="hljs-attr">style</span>: _style &#125;)</span><br><span class="language-javascript">        p1.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;海报生成成功&#x27;</span>);</span><br><span class="language-javascript">          wx.<span class="hljs-title function_">hideLoading</span>()</span><br><span class="language-javascript">        &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;生成失败&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DomData.js</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param &#123;*&#125; name 名字</span><br><span class="hljs-comment"> */</span><br>const wxml = (name) =&gt;`<br>&lt;<span class="hljs-built_in">view</span> class=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>  &lt;<span class="hljs-built_in">image</span> src=<span class="hljs-string">&quot;https://atg-fs-static.oss-cn-hangzhou.aliyuncs.com/wdqActivity/drug/bg1.png&quot;</span> class=<span class="hljs-string">&quot;bg1&quot;</span>/&gt;<br>  &lt;<span class="hljs-built_in">image</span> src=<span class="hljs-string">&quot;https://atg-fs-static.oss-cn-hangzhou.aliyuncs.com/wdqActivity/drug/bg2.png&quot;</span> class=<span class="hljs-string">&quot;bg2&quot;</span>/&gt;<br>  &lt;<span class="hljs-built_in">view</span> class=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>    &lt;text class=<span class="hljs-string">&quot;name&quot;</span>&gt;`+ name +`&lt;/text&gt;<br>  &lt;/<span class="hljs-built_in">view</span>&gt;<br>&lt;/<span class="hljs-built_in">view</span>&gt;<br>`<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param &#123;*&#125; screenWidth 屏幕宽度</span><br><span class="hljs-comment"> * @param &#123;*&#125; canvasWidth  画布宽度</span><br><span class="hljs-comment"> * @param &#123;*&#125; canvasHeight  画布高度</span><br><span class="hljs-comment"> * @return &#123;*&#125; </span><br><span class="hljs-comment"> */</span><br>const <span class="hljs-built_in">style</span> = (screenWidth, canvasWidth, canvasHeight) =&gt; &#123;<br>  <span class="hljs-built_in">return</span> &#123;<br>    <span class="hljs-string">&quot;container&quot;</span>: &#123;<br>      <span class="hljs-built_in">width</span>: canvasWidth,<br>      <span class="hljs-built_in">height</span>: canvasHeight,<br>      <span class="hljs-built_in">position</span>: &#x27;relative&#x27;,<br>      overflow: &#x27;hidden&#x27;,<br>    &#125;,<br>    <span class="hljs-string">&quot;bg1&quot;</span>: &#123;<br>      <span class="hljs-built_in">position</span>: &#x27;absolute&#x27;,<br>      top: <span class="hljs-number">0</span>,<br>      left: <span class="hljs-number">0</span>,<br>      <span class="hljs-built_in">width</span>: canvasWidth,<br>      <span class="hljs-built_in">height</span>: canvasHeight,<br>      zIndex: <span class="hljs-number">1</span>,<br>    &#125;,<br>    <span class="hljs-string">&quot;bg2&quot;</span>: &#123;<br>      <span class="hljs-built_in">position</span>: &#x27;absolute&#x27;,<br>      top: screenWidth * <span class="hljs-number">0.17</span>,<br>      left: screenWidth * <span class="hljs-number">0.04</span>,<br>      <span class="hljs-built_in">width</span>: screenWidth * <span class="hljs-number">0.84</span>,<br>      <span class="hljs-built_in">height</span>: screenWidth * <span class="hljs-number">1.08</span>,<br>      zIndex: <span class="hljs-number">2</span>,<br>    &#125;,<br>    <span class="hljs-string">&quot;box&quot;</span>: &#123;<br>      <span class="hljs-built_in">position</span>: &#x27;absolute&#x27;,<br>      top: screenWidth * <span class="hljs-number">0.17</span>,<br>      left: screenWidth * <span class="hljs-number">0.04</span>,<br>      <span class="hljs-built_in">width</span>: screenWidth * <span class="hljs-number">0.84</span>,<br>      <span class="hljs-built_in">height</span>: screenWidth * <span class="hljs-number">1.08</span>,<br>      zIndex: <span class="hljs-number">99</span>,<br>    &#125;,<br>    <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>      fontSize: <span class="hljs-number">20</span>,<br>      <span class="hljs-built_in">color</span>: &#x27;#<span class="hljs-number">333</span>&#x27;,<br>      marginTop: screenWidth * <span class="hljs-number">0.35</span>,<br>      marginLeft: screenWidth * <span class="hljs-number">0.05</span>,<br>    &#125;,<br>  &#125;<br>&#125;<br><br>module.exports = &#123;<br>  wxml,<br>  <span class="hljs-built_in">style</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>DomData.js中引入的图片链接地址必须是全英文，不能有中文</p><h4 id="文档："><a href="#文档：" class="headerlink" title="文档："></a>文档：</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/extended/component-plus/wxml-to-canvas.html">wxml-to-canvas 微信官网</a></p><p><a href="https://github.com/wechat-miniprogram/wxml-to-canvas">wxml-to-canvas github官网</a></p><p><a href="https://github.com/WillamYang/uniapp-wxml-to-canvas">使用示例</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在git提交的时候，执行eslint</title>
    <link href="/2021/08/%E5%A6%82%E4%BD%95%E5%9C%A8git%E6%8F%90%E4%BA%A4%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%89%A7%E8%A1%8Ceslint.html"/>
    <url>/2021/08/%E5%A6%82%E4%BD%95%E5%9C%A8git%E6%8F%90%E4%BA%A4%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%89%A7%E8%A1%8Ceslint.html</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>每次提交代码，只有通过eslint规范后才能提交 </p><p>每次上传代码，只有通过单元测试才能上传</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="一、首先需要安装依赖包"><a href="#一、首先需要安装依赖包" class="headerlink" title="一、首先需要安装依赖包"></a>一、首先需要安装依赖包</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>eslint <span class="hljs-keyword">babel-eslint </span>eslint-plugin-vue husky lint-staged<br></code></pre></td></tr></table></figure><h3 id="二、配置eslint"><a href="#二、配置eslint" class="headerlink" title="二、配置eslint"></a>二、配置eslint</h3><p>在项目根目录新建.eslinttrc.js</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs prolog">module.exports = &#123;<br>    root: true,<br>    env: &#123;<br>        browser: true,<br>        node: true,<br>        es6: true,<br>    &#125;,<br>    // 配置js全局变量，因为是uni-app，全局的uni是不需要引入的，还有<span class="hljs-number">5</span>+的plus对象<br>    globals: &#123;<br>        uni: <span class="hljs-string">&#x27;readonly&#x27;</span>,<br>        plus: <span class="hljs-string">&#x27;readonly&#x27;</span>,<br>        wx: <span class="hljs-string">&#x27;readonly&#x27;</span>,<br>    &#125;,<br>    // 可根据个人喜好选择，个人比较喜欢prettier配合vs code格式化html代码，安利一波！！<br>    extends: [<span class="hljs-string">&#x27;plugin:vue/essential&#x27;</span>, <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>, <span class="hljs-string">&#x27;@vue/prettier&#x27;</span>],<br>    parserOptions: &#123;<br>        parser: <span class="hljs-string">&#x27;babel-eslint&#x27;</span>,<br>    &#125;,<br>    rules: &#123;<br>        // <span class="hljs-string">&#x27;prettier/prettier&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-string">&#x27;no-console&#x27;</span>: [<br>            <span class="hljs-string">&#x27;warn&#x27;</span>,<br>            &#123;<br>                allow: [<span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>],<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;no-eval&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-string">&#x27;no-alert&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-string">&#x27;vue/max-attributes-per-line&#x27;</span>: [<br>            <span class="hljs-number">0</span>,<br>            &#123;<br>                singleline: <span class="hljs-number">10</span>,<br>                multiline: &#123;<br>                    max: <span class="hljs-number">1</span>,<br>                    allowFirstLine: false,<br>                &#125;,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;vue/singleline-html-element-content-newline&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>        <span class="hljs-string">&#x27;vue/multiline-html-element-content-newline&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>        <span class="hljs-string">&#x27;vue/name-property-casing&#x27;</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;PascalCase&#x27;</span>],<br>        <span class="hljs-string">&#x27;vue/no-v-html&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>        <span class="hljs-string">&#x27;accessor-pairs&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;block-spacing&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;always&#x27;</span>],<br>        <span class="hljs-string">&#x27;brace-style&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&#x27;1tbs&#x27;</span>,<br>            &#123;<br>                allowSingleLine: true,<br>            &#125;,<br>        ],<br>        // 属性驼峰命名<br>        camelcase: [<br>            <span class="hljs-number">0</span>,<br>            &#123;<br>                properties: <span class="hljs-string">&#x27;always&#x27;</span>,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;comma-dangle&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;only-multiline&#x27;</span>],<br>        <span class="hljs-string">&#x27;comma-style&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;last&#x27;</span>],<br>        <span class="hljs-string">&#x27;constructor-super&#x27;</span>: <span class="hljs-number">2</span>,<br>        curly: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;multi-line&#x27;</span>],<br>        <span class="hljs-string">&#x27;dot-location&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;property&#x27;</span>],<br>        <span class="hljs-string">&#x27;eol-last&#x27;</span>: <span class="hljs-number">2</span>,<br>        eqeqeq: [<br>            <span class="hljs-string">&#x27;warn&#x27;</span>,<br>            <span class="hljs-string">&#x27;always&#x27;</span>,<br>            &#123;<br>                null: <span class="hljs-string">&#x27;ignore&#x27;</span>,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;generator-star-spacing&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                before: true,<br>                after: true,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;handle-callback-err&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;^(err|error)$&#x27;</span>],<br>        <span class="hljs-string">&#x27;jsx-quotes&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;prefer-single&#x27;</span>],<br>        <span class="hljs-string">&#x27;new-cap&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                newIsCap: true,<br>                capIsNew: false,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;new-parens&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-array-constructor&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-caller&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-class-assign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-cond-assign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-const-assign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-control-regex&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;no-delete-var&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-dupe-args&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-dupe-class-members&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-dupe-keys&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-duplicate-case&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-empty-character-class&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-empty-pattern&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-ex-assign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-extend-native&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-extra-bind&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-extra-boolean-cast&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-extra-parens&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;functions&#x27;</span>],<br>        <span class="hljs-string">&#x27;no-fallthrough&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-floating-decimal&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-func-assign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-implied-eval&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-inner-declarations&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;functions&#x27;</span>],<br>        <span class="hljs-string">&#x27;no-invalid-regexp&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-iterator&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-label-var&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-labels&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                allowLoop: false,<br>                allowSwitch: false,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;no-lone-blocks&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;no-multi-spaces&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-multi-str&#x27;</span>: <span class="hljs-number">2</span>,<br><br>        <span class="hljs-string">&#x27;no-native-reassign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-negated-in-lhs&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-new-object&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-new-require&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-new-symbol&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-new-wrappers&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-obj-calls&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-octal&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-octal-escape&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-path-concat&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-proto&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-redeclare&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-regex-spaces&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-return-assign&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;except-parens&#x27;</span>],<br>        <span class="hljs-string">&#x27;no-self-assign&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-self-compare&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-sequences&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-shadow-restricted-names&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-spaced-func&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-sparse-arrays&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-this-before-super&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-throw-literal&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-trailing-spaces&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;no-undef&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-undef-init&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-unmodified-loop-condition&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-unneeded-ternary&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                defaultAssignment: false,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;no-unreachable&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-unsafe-finally&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-unused-vars&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                vars: <span class="hljs-string">&#x27;all&#x27;</span>,<br>                args: <span class="hljs-string">&#x27;none&#x27;</span>,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;no-useless-call&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-useless-computed-key&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-useless-constructor&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-useless-escape&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;no-whitespace-before-property&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;no-with&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;one-var&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                initialized: <span class="hljs-string">&#x27;never&#x27;</span>,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;operator-linebreak&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&#x27;after&#x27;</span>,<br>            &#123;<br>                overrides: &#123;<br>                    <span class="hljs-string">&#x27;?&#x27;</span>: <span class="hljs-string">&#x27;before&#x27;</span>,<br>                    <span class="hljs-string">&#x27;:&#x27;</span>: <span class="hljs-string">&#x27;before&#x27;</span>,<br>                &#125;,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;padded-blocks&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>        quotes: [<br>            <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&#x27;single&#x27;</span>,<br>            &#123;<br>                avoidEscape: true,<br>                allowTemplateLiterals: true,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;semi-spacing&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123;<br>                before: false,<br>                after: true,<br>            &#125;,<br>        ],<br><br>        <span class="hljs-string">&#x27;space-in-parens&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>        <span class="hljs-string">&#x27;space-infix-ops&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;space-unary-ops&#x27;</span>: [<br>            <span class="hljs-number">0</span>,<br>            &#123;<br>                words: true,<br>                nonwords: false,<br>            &#125;,<br>        ],<br>        <span class="hljs-string">&#x27;template-curly-spacing&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>        <span class="hljs-string">&#x27;use-isnan&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;valid-typeof&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;wrap-iife&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;any&#x27;</span>],<br>        <span class="hljs-string">&#x27;yield-star-spacing&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;both&#x27;</span>],<br>        yoda: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>        <span class="hljs-string">&#x27;prefer-const&#x27;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&#x27;array-bracket-spacing&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>        <span class="hljs-string">&#x27;no-prototype-builtins&#x27;</span>: <span class="hljs-number">0</span>,<br>        // 自定义开始<br>        <span class="hljs-string">&#x27;vue/html-indent&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;vue/html-closing-bracket-newline&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;vue/html-self-closing&#x27;</span>: <span class="hljs-number">0</span>,<br>        indent: <span class="hljs-number">0</span>,<br>        // 句尾分号<br>        semi: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;comma-spacing&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;space-before-blocks&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;keyword-spacing&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;key-spacing&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;no-multiple-empty-lines&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;spaced-comment&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;space-before-function-paren&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;arrow-spacing&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;object-curly-spacing&#x27;</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、配置lint-staged"><a href="#三、配置lint-staged" class="headerlink" title="三、配置lint-staged"></a>三、配置lint-staged</h3><p>在项目根目录新建lint-staged.config.js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">module<span class="hljs-selector-class">.exports</span> = &#123;<br>    <span class="hljs-string">&#x27;*.&#123;js,jsx,ts,tsx,vue&#125;&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;prettier --write&#x27;</span>, <span class="hljs-string">&#x27;eslint --fix&#x27;</span>]</span>,<br>    <span class="hljs-string">&#x27;&#123;!(package)*.json,*.code-snippets,.!(browserslist)*rc&#125;&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;prettier --write--parser json&#x27;</span>]</span>,<br>    <span class="hljs-string">&#x27;package.json&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;prettier --write&#x27;</span>]</span>,<br>    <span class="hljs-string">&#x27;*.vue&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;prettier --write&#x27;</span>, <span class="hljs-string">&#x27;stylelint --fix&#x27;</span>]</span>,<br>    <span class="hljs-string">&#x27;*.&#123;scss,less,styl,css,html&#125;&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;stylelint --fix&#x27;</span>, <span class="hljs-string">&#x27;prettier --write&#x27;</span>]</span>,<br>    <span class="hljs-string">&#x27;*.md&#x27;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;prettier --write&#x27;</span>]</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、配置package-json"><a href="#四、配置package-json" class="headerlink" title="四、配置package.json"></a>四、配置package.json</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;lint:eslint&quot;</span>: <span class="hljs-string">&quot;eslint --fix --ext \&quot;</span>.<span class="hljs-comment">/**/</span>*.&#123;vue,less,css,scss&#125;\<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;lint-staged&quot;</span>: <span class="hljs-string">&quot;lint-staged&quot;</span>,<br>    <span class="hljs-string">&quot;lint-staged:js&quot;</span>: <span class="hljs-string">&quot;eslint --ext .js,.jsx,.ts,.tsx &quot;</span>,<br>&#125;<br>// husky的其他配置可自行添加，这里只配置了git提交运行lint-staged<br><span class="hljs-string">&quot;husky&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;hooks&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pre-commit&quot;</span>: <span class="hljs-string">&quot;lint-staged&quot;</span><br>// <span class="hljs-string">&quot;pre-push&quot;</span>: <span class="hljs-string">&quot;npm run test:unit&quot;</span><br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="五、配置代码检测忽略目录"><a href="#五、配置代码检测忽略目录" class="headerlink" title="五、配置代码检测忽略目录"></a>五、配置代码检测忽略目录</h3><p>.eslintignore</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">unpackage</span><br><span class="hljs-attribute">node_modules</span><br><span class="hljs-attribute">uview-ui</span><br></code></pre></td></tr></table></figure><h3 id="最后运行"><a href="#最后运行" class="headerlink" title="最后运行"></a>最后运行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> lint-staged<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>eslint</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>babel插件之去掉debugger和console</title>
    <link href="/2021/06/babel%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%8E%BB%E6%8E%89debugger%E5%92%8Cconsole.html"/>
    <url>/2021/06/babel%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%8E%BB%E6%8E%89debugger%E5%92%8Cconsole.html</url>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>每次部署代码之前，都会将debugger和console.log一起提交上去，如果手动注释，又太麻烦，所以需要一个babel插件，能够在打包的时候，将这部分的代码去除掉</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>首先安装依赖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="language-bash"> @babel/parser</span><br>yarn <span class="hljs-keyword">add</span><span class="language-bash"> @babel/traverse</span><br>yarn <span class="hljs-keyword">add</span><span class="language-bash"> @babel/core</span><br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// babel插件的使用</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">babel</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">noDebuggerPlugin</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;./nodebugging&#x27;</span>);<br><br><span class="hljs-comment">// 字符串源码</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">body</span> = `<br>  console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-number">123</span>);<br>  console.<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-number">456</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">abc</span> = <span class="hljs-number">5</span>;<br>  debugger;<br>  <span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-number">123</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">efg</span> = <span class="hljs-number">123</span><br>`<br><span class="hljs-comment">// 使用插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">result</span> = babel.<span class="hljs-title function_ invoke__">transform</span>(body, &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    noDebuggerPlugin<br>  ]<br>&#125;)<br><br>console.<span class="hljs-title function_ invoke__">log</span>(result.code);<br><br></code></pre></td></tr></table></figure><p>nodebugging.js</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs xquery">const chainGet = require(<span class="hljs-string">&#x27;chain-get&#x27;</span>);<br>const defualtOpts = &#123;<br>  debugger:<span class="hljs-built_in"> true</span>,<br>  console:<span class="hljs-built_in"> true</span><br>&#125;<br><br><br>const visitor = &#123;<br>  DebuggerStatement<span class="hljs-built_in">(path</span>, state) &#123;<br>    <span class="hljs-keyword">if</span> (state) &#123;<br>      <span class="hljs-keyword">if</span> (typeof state.opts === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>        state.opts = defualtOpts;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (typeof state.opts.debugger === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>        state.opts.debugger =<span class="hljs-built_in"> true</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (state.opts.debugger) &#123;<br>       <span class="hljs-built_in"> path</span><span class="hljs-built_in">.remove</span>();<br>      &#125;<br>    &#125;<br>  &#125;,<br>  ExpressionStatement<span class="hljs-built_in">(path</span>, state) &#123;<br>    <span class="hljs-keyword">if</span> (state) &#123;<br>      <span class="hljs-keyword">if</span> (typeof state.opts === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>        state.opts = defualtOpts;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (chainGet<span class="hljs-built_in">(path</span>).<span class="hljs-type">node</span>.expression.type() === <span class="hljs-string">&#x27;CallExpression&#x27;</span> &amp;&amp; chainGet<span class="hljs-built_in">(path</span>).<span class="hljs-type">node</span>.expression.callee()) &#123;<br>      //<span class="hljs-built_in"> remove</span> alert<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">(path</span>.<span class="hljs-type">node</span>.expression.callee<span class="hljs-built_in">.name</span> === <span class="hljs-string">&#x27;alert&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (state.opts.alert) &#123;<br>         <span class="hljs-built_in"> path</span><span class="hljs-built_in">.remove</span>()<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      //<span class="hljs-built_in"> remove</span> console<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">(path</span>.<span class="hljs-type">node</span>.expression.callee.type === <span class="hljs-string">&#x27;MemberExpression&#x27;</span> &amp;&amp; chainGet<span class="hljs-built_in">(path</span>).<span class="hljs-type">node</span>.expression.callee.object<span class="hljs-built_in">.name</span>() === <span class="hljs-string">&#x27;console&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (state &amp;&amp; state.opts) &#123;<br>          <span class="hljs-keyword">if</span> (typeof state.opts.console === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>            state.opts.console =<span class="hljs-built_in"> true</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (chainGet(state).opts.console()) &#123;<br>         <span class="hljs-built_in"> path</span><span class="hljs-built_in">.remove</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      //<span class="hljs-built_in"> remove</span> customized debugger <span class="hljs-keyword">function</span><br>      <span class="hljs-keyword">if</span> (typeof chainGet(state).opts.debugFn() === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        const fn = state.opts.debugFn;<br>        <span class="hljs-keyword">if</span> (chainGet<span class="hljs-built_in">(path</span>).<span class="hljs-type">node</span>.expression.callee<span class="hljs-built_in">.name</span>() === fn) &#123;<br>         <span class="hljs-built_in"> path</span><span class="hljs-built_in">.remove</span>();<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  FunctionDeclaration<span class="hljs-built_in">(path</span>, state) &#123;<br>    <span class="hljs-keyword">if</span> (!state || typeof state.opts === <span class="hljs-string">&#x27;undefined&#x27;</span> || !state.opts.debugFn || typeof state.opts.debugFn !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (chainGet<span class="hljs-built_in">(path</span>).<span class="hljs-type">node</span><span class="hljs-built_in">.id</span>.type() === <span class="hljs-string">&#x27;Identifier&#x27;</span> &amp;&amp;<span class="hljs-built_in"> path</span>.<span class="hljs-type">node</span><span class="hljs-built_in">.id</span><span class="hljs-built_in">.name</span> === state.opts.debugFn) &#123;<br>     <span class="hljs-built_in"> path</span><span class="hljs-built_in">.remove</span>();<br>    &#125;<br>  &#125;,<br>  VariableDeclarator<span class="hljs-built_in">(path</span>, state) &#123;<br>    <span class="hljs-keyword">if</span> (!state || typeof state.opts === <span class="hljs-string">&#x27;undefined&#x27;</span> || !state.opts.debugFn || typeof state.opts.debugFn !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span>;<br>    const fn = state.opts.debugFn;<br>    <span class="hljs-keyword">if</span> (chainGet<span class="hljs-built_in">(path</span>).<span class="hljs-type">node</span><span class="hljs-built_in">.id</span><span class="hljs-built_in">.name</span>() === fn) &#123;<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">(path</span>.inList) &#123;<br>       <span class="hljs-built_in"> path</span><span class="hljs-built_in">.remove</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        const parentPath =<span class="hljs-built_in"> path</span>.parentPath;<br>        parentPath<span class="hljs-built_in">.remove</span>();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">module</span>.exports = <span class="hljs-keyword">function</span> () &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    visitor<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">index</span>.js<br></code></pre></td></tr></table></figure><p>打印出来出来的结果里已经没有了debugger和console</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const abc <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-comment">;</span><br>alert(<span class="hljs-number">123</span>)<span class="hljs-comment">;</span><br>const efg <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>参考文档</p><p><a href="https://www.f2er.com/babel/eX5PgrDj">Babel插件</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>babel插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次http缓存优化</title>
    <link href="/2021/05/%E8%AE%B0%E4%B8%80%E6%AC%A1http%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96.html"/>
    <url>/2021/05/%E8%AE%B0%E4%B8%80%E6%AC%A1http%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96.html</url>
    
    <content type="html"><![CDATA[<p>我们用http访问网站时，会先发起一个请求，之后服务器响应这个请求，在Chrome的开发者工具(按F12或右击选择检查)我们可以看到整个过程。</p><p>第一部分General，包含请求地址、请求方式，状态码，服务器地址以及Referrer策略。</p><p>第二部分是响应头，是服务器端返回的。</p><p>第三部分是请求头，是客户端发起的。</p><p>这次我们从两个角度来看看http的缓存：缓存控制和缓存校验。</p><p>缓存控制：控制缓存的开关，用于标识请求或访问中是否开启了缓存，使用了哪种缓存方式。</p><p>缓存校验：如何校验缓存，比如怎么定义缓存的有效期，怎么确保缓存是最新的。</p><h2 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h2><p>Cache-Control的含义</p><p>可缓存性</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>public</td><td>http 请求返回的过程当中，在 cache-control 中设置这个值，代表 http 请求返回的内容所经过的任何路径当中（包括中间一些http代理服务器以及发出请求的客户端浏览器），都可以对返回内容进行缓存操作。</td></tr><tr><td>privte</td><td>代表只有发起请求的浏览器才可以进行缓存</td></tr><tr><td>no-cache</td><td>可以在本地进行缓存，但每次发请求时，都要向服务器进行验证，如果服务器允许，才能使用本地缓存。</td></tr></tbody></table><p>到期</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>max-age&#x3D;</td><td>缓存多少秒后过期，过期之后浏览器才会再次发送请求。</td></tr><tr><td>s-maxage&#x3D;</td><td>浏览器基本用不到，会代替 max-age，但只有在代理服务器中才会生效。在代理服务器中，如果都设置了 max-age，s-maxage，还是会读取 s-maxage。</td></tr><tr><td>max-stale&#x3D;</td><td>浏览器基本用不到，当 max-age 过期后，如果返回资源中有 max-stale 的设置。max-stale 是发起请求方主动携带的头，即使 max-age 过期，只要 max-stale 没过期，可以继续使用缓存资源，不需要重新请求。浏览器主动设置这个头，只有在发起端才有用。</td></tr></tbody></table><p>重新验证</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>must-revalidate</td><td>浏览器可能会用到，如果 max-age 过期，需要重新发送请求，获取这部分数据，再来验证数据是否真的过期，而不能直接使用本地缓存。</td></tr><tr><td>proxy-revalidate</td><td>用在缓存服务器中，指定缓存服务器过期后，必须向源服务器重新请求，不能直接使用本地缓存。</td></tr></tbody></table><p>其他</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>no-store</td><td>本地和代理服务器都不可以存储缓存，每次都要重新请求，拿到内容。</td></tr><tr><td>no-transform</td><td>主要是用在 proxy 服务器，不允许进行格式转换。</td></tr></tbody></table><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>通过 Cache-Control 以及 max-age 设置，达到长缓存的效果。</p><p>启动服务器 node server.js，在 localhost:8888 打开，查看network，当设置 max-age 后，刷新页面，浏览器直接从缓存中进行读取，不去要再向服务器请求，达到缓存静态资源的目的。</p><p>存在的问题，服务端修改返回内容，客户端没有加载新的内容，因为请求 url 没变，浏览器会直接从缓存读取，不需要经过服务端验证，导致静态资源更新后，没有及时更新到客户端。</p><p>解决方案，打包静态资源时，根据内容进行 hash 计算，生成文件名的 hash 码。内容变，hash 码变，请求资源 url 变，浏览器重新请求加载资源，达到更新缓存的目的。</p><h2 id="缓存校验"><a href="#缓存校验" class="headerlink" title="缓存校验"></a>缓存校验</h2><p>在缓存中，我们需要一个机制来验证缓存是否有效。比如服务器的资源更新了，客户端需要及时刷新缓存；又或者客户端的资源过了有效期，但服务器上的资源还是旧的，此时并不需要重新发送。缓存校验就是用来解决这些问题的，在http 1.1 中，我们主要关注下Last-Modified 和 etag 这两个字段。</p><h3 id="验证头"><a href="#验证头" class="headerlink" title="验证头"></a>验证头</h3><h5 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h5><p>上次修改时间。</p><p>服务端在返回资源时，会将该资源的最后更改时间通过Last-Modified字段返回给客户端。客户端下次请求时通过If-Modified-Since或者If-Unmodified-Since带上Last-Modified，服务端检查该时间是否与服务器的最后修改时间一致：如果一致，则返回304状态码，不返回资源；如果不一致则返回200和修改后的资源，并带上新的时间。</p><h5 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h5><p>数据签名，资源内容会对应有一个唯一的签名，如果资源数据更改，签名也会变。</p><p>单纯的以修改时间来判断还是有缺陷，比如文件的最后修改时间变了，但内容没变。对于这样的情况，我们可以使用etag来处理。</p><p>etag的方式是这样：服务器通过某个算法对资源进行计算，取得一串值(类似于文件的md5值)，之后将该值通过etag返回给客户端，客户端下次请求时通过If-None-Match或If-Match带上该值，服务器对该值进行对比校验：如果一致则不要返回资源。</p><h3 id="验证头的使用"><a href="#验证头的使用" class="headerlink" title="验证头的使用"></a>验证头的使用</h3><p>服务器设置 Last-Modifed 和 Etag 的值，浏览器请求会携带这两个头，在请求头中，会有 If-Modified-since: Last-Modifed值 和 If-None-Match: Etag值。</p><p>这时 response 中是有内容的，这里希望服务器不返回实际的内容，只需要告诉浏览器直接读取缓存即可。通过在服务器端进行判断。</p><p>这时查看 respones 发现还是有内容，这个内容是 Chrome 浏览器 从缓存中读取显示出来的，服务器没有返回内容。</p><p>如何判断服务端通过验证，但是从缓存读取的呢，通过服务器设置 HTTP Code 304，Not Modified 表示资源没有修改，直接读缓存，这时就会忽略服务端返回的内容。</p><h3 id="清除小程序webview缓存"><a href="#清除小程序webview缓存" class="headerlink" title="清除小程序webview缓存"></a>清除小程序webview缓存</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-view</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">fomalUrl</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&gt;&lt;/web-view&gt;</span></span></span><br></code></pre></td></tr></table></figure><p>由于webview跳到h5界面是单页面应用</p><ol><li>按照网上的办法给跳转路径后面加时间戳，并没有什么用。。。</li><li>在测试和正式环境打包的时候，给css js加hash，也没什么用</li></ol><p>解决办法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;META <span class="hljs-attribute">HTTP-EQUIV</span>=<span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attribute">CONTENT</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;<br><br>&lt;META <span class="hljs-attribute">HTTP-EQUIV</span>=<span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-attribute">CONTENT</span>=<span class="hljs-string">&quot;no-cache, must-revalidate&quot;</span>&gt;<br><br>&lt;META <span class="hljs-attribute">HTTP-EQUIV</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attribute">CONTENT</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>在根目录的index.html头部加上上面几句就可以清除缓存了</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/lguow/p/10620940.html">前端性能优化 —— 添加Expires头与Cache-control区别</a></p><p><a href="https://blog.csdn.net/u012375924/article/details/82806617">浅谈http中的Cache-Control</a></p><p><a href="https://blog.csdn.net/guozhiyingguo/article/details/53113860">http请求头If-Modified-Since &amp; If-None-Match</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vscode通过snipptes，快速生成uniapp小程序空白模板页</title>
    <link href="/2021/04/vscode%E9%80%9A%E8%BF%87snipptes%EF%BC%8C%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90uniapp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A9%BA%E7%99%BD%E6%A8%A1%E6%9D%BF%E9%A1%B5.html"/>
    <url>/2021/04/vscode%E9%80%9A%E8%BF%87snipptes%EF%BC%8C%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90uniapp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A9%BA%E7%99%BD%E6%A8%A1%E6%9D%BF%E9%A1%B5.html</url>
    
    <content type="html"><![CDATA[<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>每次开发uniapp版本的微信小程序，新建空白页面的时候都很麻烦，所以就想自定义一个模板，通过输入快捷键来快速新建小程序页面模板</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><strong>命令行</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Ctrl+<span class="hljs-keyword">Shift+P</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># 选择 Configure User Snippets</span><br><span class="hljs-comment"># 选择 Vue.json</span><br></code></pre></td></tr></table></figure><p><strong>原始的Vue.json</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br><span class="hljs-regexp">//</span> Place your snippets <span class="hljs-keyword">for</span> vue here. Each snippet is defined under a snippet name and has a prefix, body and <br><span class="hljs-regexp">//</span> description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:<br><span class="hljs-regexp">//</span> <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> <span class="hljs-keyword">for</span> tab stops, <span class="hljs-variable">$0</span> <span class="hljs-keyword">for</span> the final cursor position, and <span class="hljs-variable">$&#123;1:label&#125;</span>, <span class="hljs-variable">$&#123;2:another&#125;</span> <span class="hljs-keyword">for</span> placeholders. Placeholders with the <br><span class="hljs-regexp">//</span> same ids are connected.<br><span class="hljs-regexp">//</span> Example:<br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;Print to console&quot;</span>: &#123;<br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;log&quot;</span>,<br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;body&quot;</span>: [<br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;console.log(&#x27;$1&#x27;);&quot;</span>,<br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;$2&quot;</span><br><span class="hljs-regexp">//</span> ],<br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Log output to console&quot;</span><br><span class="hljs-regexp">//</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修改后的Vue.json</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift">&#123;<br><span class="hljs-comment">// 微信小程序空白模板</span><br><span class="hljs-string">&quot;wxapp template&quot;</span>: &#123;<br><span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;wx&quot;</span>,<br><span class="hljs-string">&quot;body&quot;</span>: [<br><span class="hljs-string">&quot;&lt;template&gt;&quot;</span>,<br><span class="hljs-string">&quot;  $0&quot;</span>,<br><span class="hljs-string">&quot;&lt;/template&gt;&quot;</span>,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;&lt;script&gt;&quot;</span>,<br><span class="hljs-string">&quot;export default &#123;&quot;</span>,<br><span class="hljs-string">&quot;  data() &#123;&quot;</span>,<br><span class="hljs-string">&quot;    return &#123;&quot;</span>,<br><span class="hljs-string">&quot;      &quot;</span>,<br><span class="hljs-string">&quot;    &#125;&quot;</span>,<br><span class="hljs-string">&quot;  &#125;,&quot;</span>,<br><span class="hljs-string">&quot;  mounted() &#123;&#125;,&quot;</span>,<br><span class="hljs-string">&quot;  methods: &#123;&#125;,&quot;</span>,<br><span class="hljs-string">&quot;  /**&quot;</span>,<br><span class="hljs-string">&quot;   * 用户点击右上角分享&quot;</span>,<br><span class="hljs-string">&quot;   */&quot;</span>,<br><span class="hljs-string">&quot;  onShareAppMessage: function () &#123;&#125;,&quot;</span>,<br><span class="hljs-string">&quot;&#125;;&quot;</span>,<br><span class="hljs-string">&quot;&lt;/script&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;style lang=<span class="hljs-subst">\&quot;</span>scss<span class="hljs-subst">\&quot;</span> scoped&gt;&quot;</span>,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;&lt;/style&gt;&quot;</span><br>],<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;A wxapp file template&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>新建一个.vue文件，然后输入wx，然后回车</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;&#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * 用户点击右上角分享</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-attr">onShareAppMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Get it!</p>]]></content>
    
    
    
    <tags>
      
      <tag>uniapp</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯文档不能复制的解决办法，腾讯文档怎么复制？</title>
    <link href="/2021/03/%E8%85%BE%E8%AE%AF%E6%96%87%E6%A1%A3%E4%B8%8D%E8%83%BD%E5%A4%8D%E5%88%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%8C%E8%85%BE%E8%AE%AF%E6%96%87%E6%A1%A3%E6%80%8E%E4%B9%88%E5%A4%8D%E5%88%B6%EF%BC%9F.html"/>
    <url>/2021/03/%E8%85%BE%E8%AE%AF%E6%96%87%E6%A1%A3%E4%B8%8D%E8%83%BD%E5%A4%8D%E5%88%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%8C%E8%85%BE%E8%AE%AF%E6%96%87%E6%A1%A3%E6%80%8E%E4%B9%88%E5%A4%8D%E5%88%B6%EF%BC%9F.html</url>
    
    <content type="html"><![CDATA[<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>腾讯文档不能复制怎么办？今天看到一篇腾讯文档，但是作者设置了不能编辑、复制。</p><p>登录之后，尝试了一下下载也不行，也就是说只能看网页，或者自己截图！</p><p>想办法解决一下。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>打开这篇腾讯文档，鼠标右键，查看源文件</p><p>搜索</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;script type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text/javascript&quot;</span> src<span class="hljs-operator">=</span><span class="hljs-string">&quot;/dop-api/opendoc</span><br></code></pre></td></tr></table></figure><p>找到这个js文件，点击打开这个文件，里面就是这篇文档的所有内容</p><p>将clientVarsCallback()中的部分保存为ke.json</p><p>新建一个vue项目</p><p>引入这个文件</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">content</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> ke <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ke.json&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">content</span>: ke</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>启动项目，拷贝页面上的内容</p><p>然后新建一个腾讯文档</p><p>ctrl + shift + v</p><p>无格式粘贴到文档里</p><p>这种方式有个缺点就是图片和文字样式是没办法拷贝过来的，但是文字内容都能拷贝过来。</p><p>完。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>permission denied (publickey)问题的解决方法</title>
    <link href="/2021/03/permission-denied-publickey-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <url>/2021/03/permission-denied-publickey-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
    
    <content type="html"><![CDATA[<p>解决方法：</p><p>第一步：更新ssh-key</p><p>执行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh-keygen -t rsa -C <span class="hljs-string">&quot;yangzw<span class="hljs-variable">@yuanbaopu</span>.com&quot;</span> -f ~<span class="hljs-regexp">/.ssh/</span>ydzh_github<br></code></pre></td></tr></table></figure><p>第二步：添加私钥</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">add</span><span class="language-bash"> ~/.ssh/yuanbaopu_github</span><br></code></pre></td></tr></table></figure><p>第三步：进入gitlab，重新设置ssh-key</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue项目如何在页面中增加commit hash版本号</title>
    <link href="/2021/02/vue%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%A2%9E%E5%8A%A0commit-hash%E7%89%88%E6%9C%AC%E5%8F%B7.html"/>
    <url>/2021/02/vue%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%A2%9E%E5%8A%A0commit-hash%E7%89%88%E6%9C%AC%E5%8F%B7.html</url>
    
    <content type="html"><![CDATA[<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>每次发布项目之后，发现改的bug并没有生效，原因可能是代码部署失败，也可能是浏览器的缓存，需要一个标记能知道当前代码是否是最新版的代码</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>所以我们打算在html的head里，增加一个commit hash来表示当前的版本号</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>项目是基于webpack的，我们引入webpack的一个插件Git revision webpack plugin</p><p><a href="https://developer.aliyun.com/mirror/npm/package/git-revision-webpack-plugin">官方地址</a></p><p>git-revision-webpack-plugin：可在构建过程中生成VERSION和COMMITHASH文件的Webpack插件。</p><h3 id="安装本地开发依赖项"><a href="#安装本地开发依赖项" class="headerlink" title="安装本地开发依赖项"></a>安装本地开发依赖项</h3><p>Webpack 4及以上版本：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">cnpm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> git-revision-webpack-plugin<br></code></pre></td></tr></table></figure><p>Webpack 4以下版本：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cnpm</span> install --save-dev git-revision-webpack-plugin@<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在文件build&#x2F;webpack.prod.conf.js中增加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">GitRevisionPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;git-revision-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> gitRevisionPlugin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GitRevisionPlugin</span>()<br><br><span class="hljs-keyword">const</span> devWebpackConfig = <span class="hljs-title function_">merge</span>(baseWebpackConfig, &#123;<br>...<span class="hljs-comment">// 省略代码</span><br><span class="hljs-attr">plugins</span>: [<br>gitRevisionPlugin,<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DefinePlugin</span>(&#123;<br>          <span class="hljs-string">&#x27;COMMITHASH&#x27;</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(gitRevisionPlugin.<span class="hljs-title function_">commithash</span>())<br>        &#125;),<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果觉得commit hash太长，可以增加配置参数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> gitRevisionPlugin = <span class="hljs-keyword">new</span> GitRevisionPlugin(&#123;<br>  commithashCommand: <span class="hljs-string">&#x27;rev-parse --short HEAD&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>更多配置项，可以参考官网</p><p>最后，打开index.html，在head头部增加meta标签，name为app-version</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app-version&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&lt;%= COMMITHASH%&gt;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序实现pc端全屏视频直播全屏</title>
    <link href="/2021/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0pc%E7%AB%AF%E5%85%A8%E5%B1%8F%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E5%85%A8%E5%B1%8F.html"/>
    <url>/2021/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0pc%E7%AB%AF%E5%85%A8%E5%B1%8F%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E5%85%A8%E5%B1%8F.html</url>
    
    <content type="html"><![CDATA[<p>需求：因为小程序直播，有些是课程直播，由于手机屏幕太小，看不清楚，所以需要在pc端微信上打开小程序，来观看直播。默认情况下，pc端打开小程序都是竖屏的。</p><p>但我们看到有些小程序，比如：金山文档、腾讯文档等，打开就是横屏的，这个要怎么设置呢？</p><p><img src="https://pic2.zhimg.com/80/v2-bbcbee9845255efea4ba93d82cbc5c62_1440w.png"></p><p>其实很简单，只需要在app.json中，新增一个resizeable属性即可</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>  <span class="hljs-string">&quot;pages&quot;</span>: <span class="hljs-string">...</span>,<br>  <span class="hljs-string">&quot;window&quot;</span>: <span class="hljs-string">...</span>,<br>  <span class="hljs-string">&quot;resizeable&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果你是用uniapp开发的</p><p>则在manifest.json中，增加一个resizeable属性即可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-string">&quot;mp-weixin&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;appid&quot;</span> : ...,<br>  <span class="hljs-string">&quot;setting&quot;</span> : ...,<br>  <span class="hljs-string">&quot;resizable&quot;</span>: <span class="hljs-literal">true</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>另外，如果想要手机端小程序，跟随手机屏幕横屏而横屏</p><p>只要在app.json中，“window”模块下增加pageOrientation属性即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;pageOrientation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>另外这个属性还可以设置竖屏”portrait”，以及横屏”landscape”</p><p>如果想单独某个页面实现横竖屏，只需要在页面下的json文件中配置就可以了</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
      <tag>直播</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浙里办接入微应用实战</title>
    <link href="/2020/09/%E6%B5%99%E9%87%8C%E5%8A%9E%E6%8E%A5%E5%85%A5%E5%BE%AE%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.html"/>
    <url>/2020/09/%E6%B5%99%E9%87%8C%E5%8A%9E%E6%8E%A5%E5%85%A5%E5%BE%AE%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="浙里办接入微应用"><a href="#浙里办接入微应用" class="headerlink" title="浙里办接入微应用"></a>浙里办接入微应用</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>最近公司新接了一个需求，需要把已经开发好的H5应用上架到浙里办APP</p><h3 id="第一步，用户体系对接"><a href="#第一步，用户体系对接" class="headerlink" title="第一步，用户体系对接"></a>第一步，用户体系对接</h3><p>首先需要加入钉钉组织—浙政钉</p><p>浙政钉→机关内部最多跑一次→用户认证体系对接申请提交申请</p><p><a href="https://cdn.nlark.com/yuque/0/2020/png/653116/1594120733041-ddb09ecf-7e17-4d30-bf37-acf8024773ee.png?x-oss-process=image/resize,w_746">https://cdn.nlark.com/yuque/0/2020/png/653116/1594120733041-ddb09ecf-7e17-4d30-bf37-acf8024773ee.png?x-oss-process=image%2Fresize%2Cw_746</a></p><p><a href="https://cdn.nlark.com/yuque/0/2020/png/653116/1594120920684-86d71dda-2210-4839-aede-6c2684b22b11.png?x-oss-process=image/resize,w_746">https://cdn.nlark.com/yuque/0/2020/png/653116/1594120920684-86d71dda-2210-4839-aede-6c2684b22b11.png?x-oss-process=image%2Fresize%2Cw_746</a></p><p>申请通过之后，会有对接人给我们接入码</p><h3 id="第二步，配置回调地址"><a href="#第二步，配置回调地址" class="headerlink" title="第二步，配置回调地址"></a>第二步，配置回调地址</h3><p>准备一个回调地址，我们使用了前端页面地址，比如</p><p><a href="https://newstest.yuanbaopu.com/#/dqrcm">https://newstest.yuanbaopu.com/#/dqrcm</a></p><p>将地址提供给对接人，配置在政务服务网个人用户认证管理后台</p><h4 id="页面逻辑"><a href="#页面逻辑" class="headerlink" title="页面逻辑"></a>页面逻辑</h4><p>我们的回调地址同时也是我们的应用首页，当用户进入之后，首页跳转到浙里办oss单点登录页面</p><p>登录地址：<a href="https://puser.zjzwfw.gov.cn/sso/mobile.do?action=oauth&scope=1&servicecode=%E3%80%90%E6%8E%A5%E5%85%A5%E4%BB%A3%E7%A0%81%E3%80%91&goto=%E3%80%90%E9%99%84%E5%B8%A6%E8%B7%B3%E8%BD%AC%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%BB%A5sp%E5%8F%82%E6%95%B0%E8%BF%94%E5%9B%9E%E3%80%91">https://puser.zjzwfw.gov.cn/sso/mobile.do?action=oauth&amp;scope=1&amp;servicecode=【接入代码】&amp;goto=【附带跳转地址，以sp参数返回】</a></p><p>这里的接入码就是上一步申请的接入码</p><p>goto参数可以不填，如果填写，则用户登录完成之后，会以sp参数返回</p><p>用户完成登录之后，会跳转到我们配置的这个回调地址，同时会在地址后面带上ticket票据参数，如果填了goto参数，则会返回sp参数</p><h4 id="页面代码"><a href="#页面代码" class="headerlink" title="页面代码"></a>页面代码</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">beforeCreate</span><span class="hljs-params">()</span></span> &#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;beforeCreate&#x27;</span>, this.<span class="hljs-variable">$route</span>)<br>    <span class="hljs-keyword">if</span> (!this.<span class="hljs-variable">$route</span><span class="hljs-selector-class">.query</span>.ticket) &#123;<br>      document<span class="hljs-selector-class">.location</span><span class="hljs-selector-class">.href</span> = <span class="hljs-string">&quot;https://puser.zjzwfw.gov.cn/sso/mobile.do?action=oauth&amp;scope=1&amp;servicecode=dqrcm&amp;goto=https%3A%2F%2Fnews.dqbdsh.com%2F%23%2F&quot;</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="登录成功之后跳转的回调地址并且带上参数"><a href="#登录成功之后跳转的回调地址并且带上参数" class="headerlink" title="登录成功之后跳转的回调地址并且带上参数"></a>登录成功之后跳转的回调地址并且带上参数</h4><p><a href="https://newstest.yuanbaopu.com/#/dqrcm?1=1&ticket=8a11885a74926b8a0174bf4f06055537-ticket&sp=https%3A%2F%2Fnews.dqbdsh.com%2F%23%2F">https://newstest.yuanbaopu.com/#/dqrcm?1=1&ticket=8a11885a74926b8a0174bf4f06055537-ticket&sp=https%3A%2F%2Fnews.dqbdsh.com%2F%23%2F</a></p><h3 id="第三步获取用户信息"><a href="#第三步获取用户信息" class="headerlink" title="第三步获取用户信息"></a>第三步获取用户信息</h3><p>获取票据：<br>（1）首先是使用浙江政务服务网统一登陆地址<a href="https://puser.zjzwfw.gov.cn/sso/mobile.do?action=oauth&scope=1&servicecode%E3%80%90%E6%8E%A5%E5%85%A5%E4%BB%A3%E7%A0%81%E3%80%91%E7%99%BB%E9%99%86%EF%BC%8C%E7%99%BB%E9%99%86%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E4%BC%9A%E4%B8%BB%E5%8A%A8%E5%B0%86%E7%A5%A8%E6%8D%AE%E4%BB%A5post%E6%88%96%E8%80%85%E4%BB%A5get%E6%96%B9%E5%BC%8F%E4%BC%A0%E5%88%B0%E6%8E%A5%E5%85%A5%E7%B3%BB%E7%BB%9F%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9B%9E%E8%B0%83%E5%9C%B0%E5%9D%80%E4%B8%8A%E9%9D%A2%EF%BC%8C%E6%94%B6%E5%88%B0%E7%A5%A8%E6%8D%AE%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8ticketValidation%E6%96%B9%E6%B3%95%EF%BC%88%E8%A7%81%E9%99%84%E5%BD%95%E4%B8%80:1.%E7%A5%A8%E6%8D%AE%E8%AE%A4%E8%AF%81%EF%BC%89%E5%B0%86%E7%A5%A8%E6%8D%AE%E5%92%8C%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E4%BC%A0%E5%88%B0%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E7%A5%A8%E6%8D%AE%E8%AE%A4%E8%AF%81%E3%80%82">https://puser.zjzwfw.gov.cn/sso/mobile.do?action=oauth&amp;scope=1&amp;servicecode【接入代码】登陆，登陆的时候个人用户中心会主动将票据以post或者以get方式传到接入系统提供的回调地址上面，收到票据之后使用ticketValidation方法（见附录一:1.票据认证）将票据和其他参数传到接口进行票据认证。</a><br>（2）票据认证通过之后接入系统接收token参数和一部分用户数据，然后是调用getUserInfo方法将接收到的票据传到我们接口认证，认证通过之后接收用户详细信息并接收sp参数。<br>（3）sp地址是指应用系统单点登录成功之后如不想跳转到配置在个人中心的回调地址上面，则可以将最终的跳转地址以goto参数写在登陆地址后面，个人中将会把该地址以sp参数回传给应用系统，应用系统需识别该参数并做跳转</p><h3 id="第四步发布汇聚平台"><a href="#第四步发布汇聚平台" class="headerlink" title="第四步发布汇聚平台"></a>第四步发布汇聚平台</h3><p>将应用的一些信息发到钉钉群里</p><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">应用发布信息示例<br>组织：温州市<br>空间：瑞安市<br>应用名称：政务服务中心预约服务<br>域名：https://<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**.yyhj.zjzwfw.gov.cn</span><br><span class="hljs-strong">监控URL：https://**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>.yyhj.zjzwfw.gov.cn/首页路径（浙里办扫码测试需要可访问到应用页面的路径）<br>账号姓名：<span class="hljs-strong">***</span><br><span class="hljs-strong">电话：1805879**</span>**<br>邮箱：<span class="hljs-strong">****</span><span class="hljs-emphasis">*@<span class="hljs-strong">**.com</span></span><br></code></pre></td></tr></table></figure><p>之后，群里会有对接人帮忙生成一个汇聚平台的账号和密码</p><p>登录汇聚平台，搜索我们开发的应用简称，比如dqrcm（德清人才码），进入应用的运维管理平台</p><p>然后，我们本地打包项目，执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> build<br></code></pre></td></tr></table></figure><p>这里有个坑，就是我们正常打包的目录，文件的权限是不对的，需要设置为可读可写可执行权限</p><p>所以还要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> -R +rwx dist<br></code></pre></td></tr></table></figure><p>将dist目录权限改为可读可写可执行</p><p>进入dist目录，将全部文件打包，然后上传到汇聚平台</p><p>然后打开之前配置的监控URL，就能访问到我们的应用了</p><h3 id="第五步事项库中认领配置相对应的公共服务事项"><a href="#第五步事项库中认领配置相对应的公共服务事项" class="headerlink" title="第五步事项库中认领配置相对应的公共服务事项"></a>第五步事项库中认领配置相对应的公共服务事项</h3><p>这一步主要是对接人申请的，开发不用参与</p><h3 id="第六步提交浙里办上架申请"><a href="#第六步提交浙里办上架申请" class="headerlink" title="第六步提交浙里办上架申请"></a>第六步提交浙里办上架申请</h3><p>这一步也是最后一步，就是提交应用到浙里办</p><p>按照要求准备好对应的所需材料即可</p><p>到此全部流程结束，审核大概7-15天</p><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>目前我们已经上线的应用有</p><p>【德清云博物馆】【德清人才码】</p><p>可以在浙里办搜索到</p>]]></content>
    
    
    
    <tags>
      
      <tag>h5</tag>
      
      <tag>浙里办</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UNI-APP搭配小程序ci机器人完成项目自动上传</title>
    <link href="/2020/06/UNI-APP%E6%90%AD%E9%85%8D%E5%B0%8F%E7%A8%8B%E5%BA%8Fci%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0.html"/>
    <url>/2020/06/UNI-APP%E6%90%AD%E9%85%8D%E5%B0%8F%E7%A8%8B%E5%BA%8Fci%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0.html</url>
    
    <content type="html"><![CDATA[<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>公司目前使用uni-app来开发小程序，由于小程序后台设置体验版只能是一个人，所以每次代码修改之后，都需要这个人拉取代码，然后再上传，很不方便。</p><p>所以引入了miniprogram-ci</p><h3 id="什么是miniprogram-ci？"><a href="#什么是miniprogram-ci？" class="headerlink" title="什么是miniprogram-ci？"></a>什么是miniprogram-ci？</h3><p>miniprogram-ci 是从微信开发者工具中抽离的关于小程序&#x2F;小游戏项目代码的编译模块。</p><p>开发者可不打开小程序开发者工具，独立使用 miniprogram-ci 进行小程序代码的上传、预览等操作。</p><h3 id="miniprogram-ci-目前提供以下能力："><a href="#miniprogram-ci-目前提供以下能力：" class="headerlink" title="miniprogram-ci 目前提供以下能力："></a>miniprogram-ci 目前提供以下能力：</h3><ol><li>上传代码，对应小程序开发者工具的上传</li><li>预览代码，对应小程序开发者工具的预览</li><li>构建 npm，对应小程序开发者工具的: 菜单-工具-构建npm</li><li>代理，配置 miniprogram-ci 的网络请求代理方式</li><li>支持 node 脚本调用方式和 命令行 调用方式</li></ol><h3 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h3><p>首先我们来安装这个模块</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cnpm install miniprogram-<span class="hljs-keyword">ci</span> --<span class="hljs-keyword">save</span><br></code></pre></td></tr></table></figure><p>注意：这里必须用cnpm来代替npm，不然会报代码超过2MB的错误，这可能是小程序的bug</p><h3 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h3><p>我们需要拿到<strong>代码上传秘钥</strong>，通过访问<strong>“微信公众平台-开发-开发设置”</strong>，下载<strong>代码上传秘钥</strong>，并且配置好IP白名单，我设置为了公司的IP地址。这样只有在公司内部才可以上传代码，降低了风险。</p><p>将下载下来的<strong>代码上传秘钥</strong>放在项目根目录下</p><h3 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h3><p>在根目录新增upload.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ci</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;miniprogram-ci&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">path</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br>; (<span class="hljs-title function_ invoke__">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">project</span> = <span class="hljs-keyword">new</span> ci.<span class="hljs-title function_ invoke__">Project</span>(&#123;<br>    <span class="hljs-attr">appid</span>: <span class="hljs-string">&#x27;wxc87826bfbfd8cb61&#x27;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;miniProgram&#x27;</span>,<br>    <span class="hljs-attr">projectPath</span>: path.<span class="hljs-title function_ invoke__">join</span>(__dirname, <span class="hljs-string">&#x27;./dist/dev/mp-weixin&#x27;</span>),<br>    <span class="hljs-attr">privateKeyPath</span>: path.<span class="hljs-title function_ invoke__">join</span>(__dirname, <span class="hljs-string">&#x27;./private.wxc87826bfbfd8cb61.key&#x27;</span>),<br>    <span class="hljs-attr">ignores</span>: [<span class="hljs-string">&#x27;node_modules/**/*&#x27;</span>],<br>  &#125;)<br>  await ci.<span class="hljs-title function_ invoke__">upload</span>(&#123;<br>    project,<br>    <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>,<br>    <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;上传&#x27;</span>,<br>    <span class="hljs-attr">setting</span>: &#123;<br>      <span class="hljs-attr">es6</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minify</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">onProgressUpdate</span>: console.log,<br>  &#125;)<br>&#125;)()<br></code></pre></td></tr></table></figure><h3 id="步骤四："><a href="#步骤四：" class="headerlink" title="步骤四："></a>步骤四：</h3><p>执行代码，完成上传</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">upload</span><br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="%5Bhttps://developers.weixin.qq.com/miniprogram/dev/devtools/ci.html%5D(https://developers.weixin.qq.com/miniprogram/dev/devtools/ci.html)">微信小程序官方文档-CI</a></p><p><a href="https://developers.weixin.qq.com/community/develop/doc/00006ce95e8978341c194255259c00">使用cli命令上传代码报超过2MB代码限制</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>uni-app开发入门</title>
    <link href="/2020/04/uni-app%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8.html"/>
    <url>/2020/04/uni-app%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8.html</url>
    
    <content type="html"><![CDATA[<h3 id="uni-app主要使用vue的语法-小程序的标签和API"><a href="#uni-app主要使用vue的语法-小程序的标签和API" class="headerlink" title="uni-app主要使用vue的语法+小程序的标签和API"></a>uni-app主要使用vue的语法+小程序的标签和API</h3><p><a href="https://uniapp.dcloud.io/README">uni-app官方网站</a></p><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.io/api/README">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h2 id="已实现的功能"><a href="#已实现的功能" class="headerlink" title="已实现的功能"></a>已实现的功能</h2><ul><li><input disabled="" type="checkbox"> 支持npm</li><li><input disabled="" type="checkbox"> 引入vant组件</li><li><input disabled="" type="checkbox"> 支持scss语法</li><li><input disabled="" type="checkbox"> 背景图片小于40kb的自动转base64格式</li><li><input disabled="" type="checkbox"> 请求接口的封装</li><li><input disabled="" type="checkbox"> 自定义vue组件</li><li><input disabled="" type="checkbox"> 统一登录逻辑处理</li><li><input disabled="" type="checkbox"> 日历选择组件</li><li><input disabled="" type="checkbox"> 自定义底部导航</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><a href="https://uniapp.dcloud.io/frame?id=%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">目录结构</a></h2><p>一个uni-app工程，默认包含如下目录及文件：</p><p>┌─public           H5项目的根html页面<br>├─src          项目目录<br>├─babel.config.js               babel的配置文件<br>└─package.json            依赖包配置文件</p><p>src目录结构：</p><p>┌─components            uni-app组件目录<br>│  └─comp-a.vue         可复用的a组件<br>├─pages                 业务页面文件存放的目录<br>│  ├─index<br>│  │  └─index.vue       index页面<br>│  └─list<br>│     └─list.vue        list页面<br>├─static                存放应用引用静态资源（如图片、视频等）的目录，<strong>注意：</strong>静态资源只能存放于此<br>├─wxcomponents                  微信小程序自定义组件存放目录，<a href="https://uniapp.dcloud.io/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81">详见</a><br>│   └──custom                   微信小程序自定义组件<br>│        ├─index.js<br>│        ├─index.wxml<br>│        ├─index.json<br>│        └─index.wxss<br>├─main.js               Vue初始化入口文件<br>├─App.vue               应用配置，用来配置App全局样式以及监听 <a href="https://uniapp.dcloud.io/frame?id=%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">应用生命周期</a><br>├─manifest.json         配置应用名称、appid、logo、版本等打包信息，<a href="https://uniapp.dcloud.io/collocation/manifest">详见</a><br>└─pages.json            配置页面路由、导航条、选项卡等页面类信息，<a href="https://uniapp.dcloud.io/collocation/pages">详见</a></p><h2 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a>CSS相关</h2><p>统一使用scss语法，*.vue文件中，这样使用，<a href="%5Bhttps://uniapp.dcloud.io/collocation/uni-scss%5D(https://uniapp.dcloud.io/collocation/uni-scss)">详见</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><br>$color: red;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单位统一用rpx</p><h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a><a href="https://uniapp.dcloud.io/frame?id=%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87">背景图片</a></h2><p><code>uni-app</code> 支持使用在 css 里设置背景图片，使用方式与普通 <code>web</code> 项目大体相同，但需要注意以下几点：</p><ul><li><p>支持 base64 格式图片。</p></li><li><p>支持网络路径图片。</p></li><li><p>小程序不支持在css中使用本地文件，包括本地的背景图和字体文件。需以base64方式方可使用。</p></li><li><p>使用本地路径背景图片需注意：</p><ol><li><p>为方便开发者，在背景图片小于 40kb 时，<code>uni-app</code> 编译到不支持本地背景图的平台时，会自动将其转化为 base64 格式；</p></li><li><p>图片大于等于 40kb，会有性能问题，不建议使用太大的背景图，如开发者必须使用，则需自己将其转换为 base64 格式使用，或将其挪到服务器上，从网络地址引用。</p></li><li><p>本地背景图片的引用路径推荐使用以 ~@ 开头的绝对路径。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.test2</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;~@/static/logo.png&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><p><strong>注意</strong></p><ul><li>微信小程序不支持相对路径（真机不支持，开发工具支持）</li></ul><h2 id="vue组件开发"><a href="#vue组件开发" class="headerlink" title="vue组件开发"></a>vue组件开发</h2><ol><li><p>能用小程序原生组件的，尽量用原生组件，只有原生组件满足不了的需求，才去用第三方的组件开发</p></li><li><p>传统vue的库，只是for web的，不能跨多端。</p><p>而微信小程序的库，虽然也可以用于app和h5，但不能跨到百度支付宝等其他小程序。<br>比如element-ui、mint-ui只能用于h5；比如vant ui、iview ui则分h5版和小程序版，h5版只能用于h5，而小程序版（vant weapp）只能用于微信和App（HBuilderX 2.4.7起，小程序组件可运行于h5）。另外注意，这些ui库的小程序版的功能一般都不如h5版。</p></li></ol><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><p>首先要强调下内置组件的重要性。uni-app内置组件是最常用的，与微信内置组件相同。<a href="https://uniapp.dcloud.io/component/README">https://uniapp.dcloud.io/component/README</a>。<br>请不要把简单的button都使用三方组件库来做，那样会降低性能。</p><p>最后，<strong>请开发者务必牢记基础组件的作用，基础组件的性能是高于扩展组件的</strong>。<br>这和web开发不一样，web开发基本上不用基础组件，都是找一个ui库，全部组件都包含。因为html的基础组件在手机上是没法看的。<br>但uni-app体系不是这样，内置组件就是为手机优化的，uni-ui库全部都是扩展组件，不含基础组件。</p><p>我们的建议是：开发时首先用基础组件，基础组件不满足的地方，再引用扩展组件补充。</p><p><a href="https://ask.dcloud.net.cn/article/35489">关于uni-app的ui库、ui框架、ui组件</a></p><h2 id="开发与调试"><a href="#开发与调试" class="headerlink" title="开发与调试"></a>开发与调试</h2><h3 id="初始化安装项目"><a href="#初始化安装项目" class="headerlink" title="初始化安装项目"></a>初始化安装项目</h3><p>执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h3 id="开发时"><a href="#开发时" class="headerlink" title="开发时"></a>开发时</h3><p>执行命令行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev:mp-weixin<br></code></pre></td></tr></table></figure><h3 id="发布时"><a href="#发布时" class="headerlink" title="发布时"></a>发布时</h3><p>执行命令行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> build:mp-weixin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序适配iphone X</title>
    <link href="/2020/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%82%E9%85%8Diphone-x.html"/>
    <url>/2020/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%82%E9%85%8Diphone-x.html</url>
    
    <content type="html"><![CDATA[<h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>微信小程序在iphone x下打开时，会被底部home条遮挡<br>尤其是当底部为button按钮的时候，很难点击按钮</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="步骤一：在app-js文件中，创建全局变量，然后获取设备型号："><a href="#步骤一：在app-js文件中，创建全局变量，然后获取设备型号：" class="headerlink" title="步骤一：在app.js文件中，创建全局变量，然后获取设备型号："></a>步骤一：在app.js文件中，创建全局变量，然后获取设备型号：</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade">globalData: &#123;<br>  <span class="hljs-attr">isIphoneX</span>: <span class="hljs-literal">false</span><br>&#125;,<br><br>wx.getSystemInfo(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">//model中包含着设备信息</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.model)<br>    <span class="hljs-keyword">var</span> model = res.model<br>    <span class="hljs-keyword">if</span> (model.search(<span class="hljs-string">&#x27;iPhone X&#x27;</span>) != <span class="hljs-number">-1</span>)&#123;<br>      app.globalData.isIphoneX = <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      app.globalData.isIphoneX = <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="步骤二：在需要适配的页面js文件中onLoad方法里获取全局变量"><a href="#步骤二：在需要适配的页面js文件中onLoad方法里获取全局变量" class="headerlink" title="步骤二：在需要适配的页面js文件中onLoad方法里获取全局变量"></a>步骤二：在需要适配的页面js文件中onLoad方法里获取全局变量</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">onLoad: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;<br>  let <span class="hljs-keyword">is</span>IphoneX = app.globalData.isIphoneX;<br>  this.setData(&#123;<br>    isIphoneX: isIphoneX<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤三：在wxml文件中，加入样式判断"><a href="#步骤三：在wxml文件中，加入样式判断" class="headerlink" title="步骤三：在wxml文件中，加入样式判断"></a>步骤三：在wxml文件中，加入样式判断</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">isIphoneX</span> ? <span class="hljs-string">&#x27;isIpx&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">wiew</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="步骤四：在wxss文件中，加入适配的样式"><a href="#步骤四：在wxss文件中，加入适配的样式" class="headerlink" title="步骤四：在wxss文件中，加入适配的样式"></a>步骤四：在wxss文件中，加入适配的样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.isIpx</span> &#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">30</span>rpx <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义编写webpack loader</title>
    <link href="/2019/07/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E5%86%99webpack-loader.html"/>
    <url>/2019/07/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E5%86%99webpack-loader.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack-loader？"><a href="#什么是webpack-loader？" class="headerlink" title="什么是webpack loader？"></a>什么是webpack loader？</h2><p>webpack loader相当于一个翻译官，你输入的内容，经过它的翻译，变成另外你想要的内容，并且可以是链式的，就是一个接一个的翻译下去。</p><h2 id="loader基础"><a href="#loader基础" class="headerlink" title="loader基础"></a>loader基础</h2><p>因为webpack是运行在node.js之上的，一个loader其实就是一个node.js模块<br>这个模块的主要工作就是获得处理前的原内容，处理后，返回处理后的内容。</p><p>一个最简单的Loader源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-comment">// source 为 compiler 传递给 Loader 的一个文件的原内容</span><br>  <span class="hljs-comment">// 该函数需要返回处理后的内容，这里简单起见，直接把原内容返回了，相当于该 Loader 没有做任何转换</span><br>  <span class="hljs-keyword">return</span> source;<br>&#125;;<br></code></pre></td></tr></table></figure><p>webpack中的配置如下：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gams">let webpackConfig = &#123;<br>    <span class="hljs-comment">//...</span><br>    module: &#123;<br>        rules: [&#123;<br>            test: /\.js<span class="hljs-symbol">$</span>/,<br>            use: [&#123;<br>                <span class="hljs-comment">//这里写 loader 名即可</span><br>                loader: <span class="hljs-string">&#x27;a-loader&#x27;</span>, <br>                <span class="hljs-keyword">options</span>: &#123;<span class="hljs-comment">/* ... */</span>&#125;<br>            &#125;, &#123;<br>                loader: <span class="hljs-string">&#x27;b-loader&#x27;</span>, <br>                <span class="hljs-keyword">options</span>: &#123;<span class="hljs-comment">/* ... */</span>&#125;<br>            &#125;]<br>        &#125;]<br>    &#125;,<br>    resolveLoader: &#123;<br>        <span class="hljs-comment">// 告诉 webpack 该去那个目录下找 loader 模块</span><br>        modules: [<span class="hljs-string">&#x27;node_modules&#x27;</span>, path.resolve(__dirname, <span class="hljs-string">&#x27;loaders&#x27;</span>)]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Loader的加载顺序"><a href="#Loader的加载顺序" class="headerlink" title="Loader的加载顺序"></a>Loader的加载顺序</h2><p>Loader的加载顺序是从后往前的，上例中的调用顺序是<br>b-loader -&gt; a-loader</p><h2 id="获得-Loader-的-options"><a href="#获得-Loader-的-options" class="headerlink" title="获得 Loader 的 options"></a>获得 Loader 的 options</h2><p>我们如果获得上例中的options里的配置呢？<br>可以通过<strong>loader-utils</strong>包，它提供了很多有用的工具，最常用的就是获取传入loader的options。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-comment">// 获取到用户给当前 Loader 传入的 options</span><br>  <span class="hljs-keyword">const</span> options = loaderUtils.<span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-keyword">return</span> source;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>Loader分为同步和异步，上面介绍的Loader是同步的，但是有些场景下需要通过网络请求才能得出结果，异步的写法如下：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">module</span>.<span class="hljs-property">exports</span> <span class="hljs-operator">=</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">source</span>) &#123;<br>    <span class="hljs-comment">// 告诉 Webpack 本次转换是异步的，Loader 会在 callback 中回调结果</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">async</span>();<br>    <span class="hljs-title function_">someAsyncOperation</span>(<span class="hljs-params">source</span>, <span class="hljs-params">function</span>(<span class="hljs-params">err</span>, <span class="hljs-params">result</span>, <span class="hljs-params">sourceMaps</span>, <span class="hljs-params">ast</span>) &#123;<br>        <span class="hljs-comment">// 通过 callback 返回异步执行后的结果</span><br>        <span class="hljs-title function_">callback</span>(<span class="hljs-variable">err</span>, <span class="hljs-variable">result</span>, <span class="hljs-variable">sourceMaps</span>, ast);<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="如何加载本地Loader"><a href="#如何加载本地Loader" class="headerlink" title="如何加载本地Loader?"></a>如何加载本地Loader?</h2><p>我们本地开发Loader的时候，可以参考我的另一篇文章<br><a href="http://blog.weimayi.cn/2019/07/05/%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7npm-link%E8%BD%AF%E9%93%BE/">模块调试技巧npm-link软链</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.webpackjs.com/loaders/">其他Loader</a><br><a href="https://segmentfault.com/a/1190000012718374">深入Webpack-编写Loader</a><br><a href="https://www.jianshu.com/p/7fa359ffcf8d?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">手把手教你撸一个 Webpack Loader</a></p><h2 id="实战源码-marked转html的loader"><a href="#实战源码-marked转html的loader" class="headerlink" title="实战源码-marked转html的loader"></a>实战源码-marked转html的loader</h2><p><a href="https://github.com/qq269392251/md-to-html-loader">md-to-html-loader</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>模块调试技巧npm link软链</title>
    <link href="/2019/07/%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7npm-link%E8%BD%AF%E9%93%BE.html"/>
    <url>/2019/07/%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7npm-link%E8%BD%AF%E9%93%BE.html</url>
    
    <content type="html"><![CDATA[<p>新开发或者修改npm模块的时候，我们怎么在项目中调试呢?</p><p>我们假设项目是 my-project, 需要用到一个独立的 my-module 模块</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>直接用相对路径安装，会在项目的node_modules中创建一个指向实际my-module目录的软链，也就是说之后我们可以随时修改my-module源码并且不需要重复安装了。<br>在项目目录下新建模块目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir my-<span class="hljs-keyword">module</span> &amp; cd my-<span class="hljs-keyword">module</span><br>npm init<br></code></pre></td></tr></table></figure><p>返回项目目录</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br></code></pre></td></tr></table></figure><p>通过相对路径来安装my-module</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm install ./<span class="hljs-keyword">my</span>-module<br></code></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用软链npm link</p><p>npm本身给我们提供了一个指令 npm-link</p><p>首先新建模块目录my-module，并把它link到全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> path/to<br><span class="hljs-built_in">mkdir</span> my-module &amp; <span class="hljs-built_in">cd</span> my-module<br>npm init<br><span class="hljs-built_in">touch</span> index.js<br></code></pre></td></tr></table></figure><p>导出变量或函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>a: <span class="hljs-string">&#x27;123&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行，把它link到全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">link</span><br></code></pre></td></tr></table></figure><p>mac下可以去全局模块包目录查看，是否link成功</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">open</span> /usr/<span class="hljs-keyword">local</span>/<span class="hljs-keyword">lib</span>/node_modules/<br></code></pre></td></tr></table></figure><p>再进入到项目目录通过包名来link<br>注意这里的项目名称要根据模块目录下package.json里的name来写</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">cd path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">my</span>-project<br>npm link <span class="hljs-keyword">my</span>-module<br></code></pre></td></tr></table></figure><p>软链成功之后，就可以在项目中引入模块</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;my-module&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p><strong>ResolveLoader</strong></p><p>默认情况下webpack只会去 node_modules 目录下寻找loader，为了让 Webpack 加载放在本地项目中的 Loader 需要修改 resolveLoader.modules</p><p>假如本地的 Loader 在项目目录中的 .&#x2F;loaders&#x2F;loader-name 中，则需要如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  resolveLoader:&#123;<br>    <span class="hljs-comment">// 去哪些目录下寻找 Loader，有先后顺序之分</span><br>    modules: [<span class="hljs-string">&#x27;node_modules&#x27;</span>,<span class="hljs-string">&#x27;./loaders/&#x27;</span>],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加上以上配置后， Webpack 会先去 node_modules 项目下寻找 Loader，如果找不到，会再去 .&#x2F;loaders&#x2F; 目录下寻找。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://yq.aliyun.com/articles/610001">你所不知道的模块调试技巧 - npm link</a><br><a href="https://docs.npmjs.com/cli/link">官方文档</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>移动端适配问题</title>
    <link href="/2019/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98.html"/>
    <url>/2019/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、首先解释几个概念"><a href="#一、首先解释几个概念" class="headerlink" title="一、首先解释几个概念"></a>一、首先解释几个概念</h3><h4 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h4><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。</p><h4 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h4><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。 所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。</p><h4 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio )"></a>设备像素比(device pixel ratio )</h4><p>设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">设备像素比 <span class="hljs-punctuation">=</span> 物理像素 / 设备独立像素 <span class="hljs-comment">// 在某一方向上，x方向或者y方向</span><br></code></pre></td></tr></table></figure><p>你在开发时写的px和最终渲染显示的物理像素数不是一比一的，可能一个px对应2个物理像素，可能3个物理像素，设备显示的物理像素数和你css的px数的比值就叫做设备像素比（device pixel radio），简称dpr。</p><p>在javascript中，可以通过window.devicePixelRatio获取到当前设备的dpr。</p><p>在css中，可以通过-webkit-device-pixel-ratio，-webkit-min-device-pixel-ratio和 -webkit-max-device-pixel-ratio进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p><p>有了dpr之后，有一个问题就是同样的一张图片，我设了宽高的px数，那么在dpr为1的设备上，和dpr为2的设备上显示的效果是一样的，1个px在dpr为1的设备上会用1个物理像素来显示，在dpr为2的设备上会用2*2个物理像素来显示，这样dpr高的优势就体现不出来了，我设备比他的好，你给我的体验是一样的，可能有些用户不爽，我们可以区分对待，对于高dpr的设备，用物理像素更多的高清图片来替代，也就是2x图，3x图等等。</p><p><strong>什么是2x图片？</strong></p><p>2x图片是指比原图尺寸大一倍的图片<br>这样在css尺寸不变的情况下，就能用到更多的物理像素来显示图片。</p><h3 id="二、适配问题"><a href="#二、适配问题" class="headerlink" title="二、适配问题"></a>二、适配问题</h3><p>考虑移动端适配问题的时候，不需要管物理像素以及dpr等，只管css像素。只跟下图中的逻辑分辨率有关。</p><p><strong>为什么需要做移动端适配？</strong></p><p>因为不同的手机，每一行能显示的css像素总数是不同的。<br>比如<br>iphone5能显示的css像素尺寸为320 x 568<br>iphone6能显示的css像素尺寸为375 x 667</p><p>如果宽度写死为320px，在iphone5下是占满整行的，但是在iphone6下确没有满整行。</p><p>rem就是解决这个问题的，rem不是具体的px，rem具体显示多少像素，是根据根元素的font-size来计算的，比如说你设置了1.2rem，根元素的font-size是100px，那么这个元素动态算出来的px数就是120px。</p><h5 id="适配方法"><a href="#适配方法" class="headerlink" title="适配方法"></a>适配方法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> doc = <span class="hljs-variable language_">window</span>.<span class="hljs-property">document</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> baseWidth = <span class="hljs-number">750</span> <span class="hljs-comment">// 这里是根据设计稿的尺寸来的</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> documentHTML = doc.<span class="hljs-property">documentElement</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> pixelRatio = <span class="hljs-number">2</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setRootFont</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> docWidth = documentHTML.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">width</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> scale = docWidth / baseWidth</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> setSize = scale * <span class="hljs-number">100</span></span><br><span class="language-javascript">      documentHTML.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = setSize + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> realSize = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-property">fontSize</span>, <span class="hljs-number">10</span>)</span><br><span class="language-javascript">      <span class="hljs-comment">// android webview 里 html font-size 因设置系统字体大小受到影响</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (realSize != <span class="hljs-built_in">parseFloat</span>(setSize.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">4</span>), <span class="hljs-number">10</span>)) &#123;</span><br><span class="language-javascript">        setSize = (setSize * setSize) / realSize</span><br><span class="language-javascript">        documentHTML.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = setSize + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 设置data-dpr属性，留作的css hack之用</span></span><br><span class="language-javascript">      pixelRatio = <span class="hljs-variable language_">global</span>.<span class="hljs-property">devicePixelRatio</span> === <span class="hljs-number">3</span> ? <span class="hljs-number">3</span> : <span class="hljs-number">2</span></span><br><span class="language-javascript">      documentHTML.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-dpr&#x27;</span>, pixelRatio)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">setRootFont</span>()</span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, setRootFont, <span class="hljs-literal">false</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>工程中加入postcss-pxtorem</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> postcss-pxtorem -D<br></code></pre></td></tr></table></figure><p>项目中增加配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">extraPostCSSPlugins: [<br>    <span class="hljs-built_in">pxtorem</span>(&#123;<br>        rootValue: <span class="hljs-number">100</span>,<br>        propWhiteList: [],<br>    &#125;),<br>],<br></code></pre></td></tr></table></figure><p>配置项参考<br><a href="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem</a></p><p>上面的baseWidth是根据设计稿的尺寸来的设置的，如果设计稿是750，那么就设置为750，这样设计稿上如果是300px的元素，css样式也直接写300px，通过postcss-pxtorem插件，自动转化为3rem。<br>如果在ihone6下，font-size: 50px<br>计算之后的实际像素为</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><span class="hljs-comment">rem * 50px = 150px</span><br></code></pre></td></tr></table></figure><p>150px在iphone6屏幕下差不多占一半宽，而300px在设计稿上也差不多占一半宽</p><h4 id="像素比和宽度比"><a href="#像素比和宽度比" class="headerlink" title="像素比和宽度比"></a>像素比和宽度比</h4><p>像素比：dpr是设备像素比，也就是css的设备无关像素px和物理像素的比</p><p>宽度比：开发适配的设备的宽度（现在一般是iphone6），和实际的设备的宽度的比</p><p>总的来说，可以一句话来总结，<strong>像素比实现高清，宽度比实现适配</strong></p><p><strong>如何在高清屏幕下实现1px像素？</strong></p><p>通常可以设置元素after或before伪元素为1px，并使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">1</span>/devicePixelRatio)<br></code></pre></td></tr></table></figure><p>来进行单方向的缩放实现1个物理像素的边框或内容。</p><p>此外对于字体，我们也可以设置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">0</span>.<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>来显示小于12px的文字</p><p>如果页面内容因为高清屏而导致模糊，则可以使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">-webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased<br></code></pre></td></tr></table></figure><p>来尝试修复</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.jianshu.com/p/1b69f0df78f3?from=timeline">px、物理像素、rem、rpx的关系</a></p><p><a href="https://www.cnblogs.com/jingwhale/p/5741567.html">从设备像素比到移动适配</a></p><p><a href="https://www.jianshu.com/p/360edb9e4ddc">物理像素和逻辑像素</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序内嵌H5页面生成分享图片并下载的坑</title>
    <link href="/2019/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%E5%B5%8CH5%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90%E5%88%86%E4%BA%AB%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%9D%91.html"/>
    <url>/2019/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%E5%B5%8CH5%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90%E5%88%86%E4%BA%AB%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%9D%91.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>最近传化产品大佬又在搞事情，<br>在微信小程序内嵌H5的页面上实现分享搜索结果的功能，将车辆定位的搜索结果页生成图片并附带上二维码分享出去。我一听，这好说，不就是分享图片保存图片的功能么。</p><p>整理一下需求：<br>点击分享定位按钮，弹出层，将当前搜索结果页面截图</p><p>点击保存按钮，将图片保存到本地</p><h3 id="2-方案"><a href="#2-方案" class="headerlink" title="2.方案"></a>2.方案</h3><p>根据需求，定了我的基本方案<br>html -&gt; canvas -&gt; image -&gt; a[download]</p><ul><li>html2canvas.js：可将 htmldom 转为 canvas 元素。<a href="https://github.com/niklasvh/html2canvas">传送门</a></li><li>canvasAPI：toDataUrl() 可将 canvas 转为 base64 格式</li><li>创建 a[download] 标签触发 click 事件实现下载</li></ul><h3 id="3-采坑表演"><a href="#3-采坑表演" class="headerlink" title="3.采坑表演"></a>3.采坑表演</h3><p>首先我们用到了html2canvas.js<br>根据官网介绍是通过js将DOM节点遍历一遍，然后基于DOM元素和样式来绘制canvas。有些样式可能无法理解，所以最后出来的结果有可能不大一样。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// v0.5.0</span><br>html2canvas(element, options).then(<span class="hljs-function"><span class="hljs-params">canvas</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 现在你已经拿到了canvas DOM元素    </span><br>&#125;);<br><br><span class="hljs-comment">// v1.0.0</span><br>html2canvas(element, &#123;...options&#125;).then(<span class="hljs-function"><span class="hljs-params">canvas</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 现在你已经拿到了canvas DOM元素    </span><br>&#125;);<br></code></pre></td></tr></table></figure><p>基本流程大概是：</p><ol><li>递归遍历每个节点。</li><li>考虑节点的层级问题。</li><li>从底层开始画到canvas上。（跟浏览器本身的渲染很像）</li></ol><p>原先存在图片模糊的问题，在官方1.0版本上已经修复。<br>先获取设备像素比，并根据比例创建尺寸更大的 canvas。如二倍屏就是二倍</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据window.devicePixelRatio获取像素比</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DPR</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.devicePixelRatio &amp;&amp; <span class="hljs-built_in">window</span>.devicePixelRatio &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.devicePixelRatio;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绘制canvas</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawCanvas</span>(<span class="hljs-params">selector</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取想要转换的 DOM 节点</span><br>    <span class="hljs-keyword">const</span> dom = <span class="hljs-built_in">document</span>.querySelector(selector);<br>    <span class="hljs-keyword">const</span> box = <span class="hljs-built_in">window</span>.getComputedStyle(dom);<br>    <span class="hljs-comment">// DOM 节点计算后宽高</span><br>    <span class="hljs-keyword">const</span> width = parseValue(box.width);<br>    <span class="hljs-keyword">const</span> height = parseValue(box.height);<br>    <span class="hljs-comment">// 获取像素比</span><br>    <span class="hljs-keyword">const</span> scaleBy = DPR();<br>    <span class="hljs-comment">// 创建自定义 canvas 元素</span><br>    <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><br>    <span class="hljs-comment">// 设定 canvas 元素属性宽高为 DOM 节点宽高 * 像素比</span><br>    canvas.width = width * scaleBy;<br>    canvas.height = height * scaleBy;<br>    <span class="hljs-comment">// 设定 canvas css宽高为 DOM 节点宽高</span><br>    canvas.style.width = <span class="hljs-string">`<span class="hljs-subst">$&#123;width&#125;</span>px`</span>;<br>    canvas.style.height = <span class="hljs-string">`<span class="hljs-subst">$&#123;height&#125;</span>px`</span>;<br>    <span class="hljs-comment">// 获取画笔</span><br>    <span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br>    <span class="hljs-comment">// 将所有绘制内容放大像素比倍</span><br>    context.scale(scaleBy, scaleBy);<br><br>    <span class="hljs-comment">// 将自定义 canvas 作为配置项传入，开始绘制</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> html2canvas(dom, &#123;canvas&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1生成的截图里面，地图显示不出来"><a href="#3-1生成的截图里面，地图显示不出来" class="headerlink" title="3.1生成的截图里面，地图显示不出来"></a>3.1生成的截图里面，地图显示不出来</h3><p>排查后发现是地图的图片跨域了，因为我们地图用的是百度地图，所以肯定跨域了。  </p><p>canvas是可以绘制跨域的图片，但是此时的canvas是受到<strong>污染</strong>的，污染状态下的canvas是无法通过toDataUrl()来生成图片的。</p><p>解决方案：</p><p>方案 | 尝试 | 结局 | 分析原因<br>—|—|—|—|—<br><a href="https://www.jianshu.com/p/3f6fd4f6dd70">方案一</a> | 一般出现跨域, 只需要在图片设置这个属性: crossorigin&#x3D;”anonymous”允许跨域即可 | 惨败 | 你设置crossOrigin&#x3D;”anonymous”是表明你想跨域获取这张图片，好用在canvas.toDataURL()上，但是服务端不一定同意啊，服务端添加了access…这个字段并且value是*或者你网站的域名才行，否则就认为你无权用，结果就是无法显示<br><a href="https://github.com/niklasvh/html2canvas/issues/1674">方案二</a> | 通过传入html2canvas的配置项中增加{ useCORS: true, useTainted: false } | 惨败 | 看了下html2canvas源码，也是通过设置crossOrigin&#x3D;”anonymous”来实现图片跨域，失败原因同上<br>方案三 | 前端写一个node中间层来进行服务器转发 | 暂未尝试 | 考虑百度地图的图片是实时变化加载的，获取具体跨域图片的url地址难度较大<br>最终方案 | 不用百度地图作为背景，改为用一张静态图片 | 勉强交付 </p><h3 id="3-2保存图片"><a href="#3-2保存图片" class="headerlink" title="3.2保存图片"></a>3.2保存图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在本地进行文件保存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  &#123;<span class="hljs-type">String</span>&#125; data     要保存到本地的图片数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  &#123;<span class="hljs-type">String</span>&#125; filename 文件名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">saveFile</span>(<span class="hljs-params">data, filename</span>) &#123;<br>    <span class="hljs-keyword">const</span> save_link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElementNS</span>(<span class="hljs-string">&#x27;http://www.w3.org/1999/xhtml&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    save_link.<span class="hljs-property">href</span> = data;<br>    save_link.<span class="hljs-property">download</span> = filename;<br><br>    <span class="hljs-keyword">const</span> event = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;MouseEvents&#x27;</span>);<br>    event.<span class="hljs-title function_">initMouseEvent</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-variable language_">window</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>    save_link.<span class="hljs-title function_">dispatchEvent</span>(event);<br>&#125;<br></code></pre></td></tr></table></figure><p>然而微信点击之后，没反应…<br>然后就去翻微信的<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115">jssdk</a></p><ol><li>下载图片接口downloadImage，仅支持由uploadImage接口上传的图片</li><li>uploadImage接口，仅支持由chooseImage接口选择相册里的图片</li><li>chooseImage接口，是从本地相册选择图片</li><li>那么问题来了，图片都在相册了还需要我们干啥？</li></ol><h3 id="4-交付"><a href="#4-交付" class="headerlink" title="4.交付"></a>4.交付</h3><p>最终的妥协方案：</p><ul><li>用户搜索车辆定位，查询出结果</li><li>点击分享按钮，页面出现一个弹出框，弹出框背景为一张本地静态地图的图片，弹出框上加上二维码以及搜索结果</li><li>通过html2canvas，将当前弹框部分生成一张base64图片</li><li>微信中用户可长按页面上的图片调起 actionSheet 识别或保存图片</li></ul><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><p>因为第一次尝试在微信小程序内嵌H5的项目里做分享功能，所以需求阶段也不知道这个方案可不可行。一旦涉及到微信，就有可能出现一些之前考虑不到的问题和限制，所以，不管是产品经理还是程序员都要尽可能地多多了解。知道在微信中，能干什么，不能干什么，降低开发和反复沟通的成本。  </p><p>希望以上内容能够对大家以后的开发有所帮助。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yeoman自定义脚手架使用心得</title>
    <link href="/2018/10/yeoman%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97.html"/>
    <url>/2018/10/yeoman%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97.html</url>
    
    <content type="html"><![CDATA[<p>首先安装yo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> yo -g<br></code></pre></td></tr></table></figure><p>安装mkdirp<br>用于创建多层目录</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> mkdirp<br></code></pre></td></tr></table></figure><p>全局安装yeoman提供的写脚手架的脚手架 generator-generator</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> generator-generator -g<br></code></pre></td></tr></table></figure><p>创建一个目录用于存放generator</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> generator<br><span class="hljs-built_in">cd</span> generator<br></code></pre></td></tr></table></figure><p>下载generator模板</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yo generator</span><br></code></pre></td></tr></table></figure><blockquote><p>假设我要写一个 Generator 叫做 yzw-pc-web，根据Yeoman 的规定，你需要将这个 node 模块的名字命名为 generator-*，所以我命名为 generator-yzw-pc-web。keywords必须写成“yeoman-generator”。</p></blockquote><p>回车添加一些脚手架信息</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">your generator name? generator-yzw-pc-web<br><span class="hljs-keyword">package</span> <span class="hljs-title">keywords? yeoman-generator  </span><br></code></pre></td></tr></table></figure><p>这个keywords一定要写</p><p>下载generator模板载成功后你可以在当前目录中找到generator-yzw-pc-web文件夹。<br>我们得到的generator目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── generators/<br>│ └── app/<br>│ ├── index<span class="hljs-selector-class">.js</span><br>│ └── templates/<br>│ └── dummyfile<span class="hljs-selector-class">.txt</span><br>├── <span class="hljs-selector-class">.editorconfig</span><br>├── <span class="hljs-selector-class">.gitattributes</span><br>├── <span class="hljs-selector-class">.gitignore</span><br>├── <span class="hljs-selector-class">.eslintrc</span><br>├── <span class="hljs-selector-class">.travis</span><span class="hljs-selector-class">.yml</span><br>├── <span class="hljs-selector-class">.yo-rc</span><span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── gulpfile<span class="hljs-selector-class">.js</span><br>├── README<span class="hljs-selector-class">.md</span><br>├── LICENSE<br>└── test/<br>└── app.js<br></code></pre></td></tr></table></figure><p>它并没有全局安装到node模块中，运行以下命令就可以在全局中使用。</p><p>npm link将本地项目放到本地全局的node_modules中，这样本地就能通过npm install generator-yzw-pc-web来安装这个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> generator-yzw-pc-web<br>npm <span class="hljs-built_in">link</span><br></code></pre></td></tr></table></figure><h4 id="往generator-yzw-pc-web里添加内容"><a href="#往generator-yzw-pc-web里添加内容" class="headerlink" title="往generator-yzw-pc-web里添加内容"></a>往generator-yzw-pc-web里添加内容</h4><p>进入generator-yzw-pc-web&#x2F;generators&#x2F;app&#x2F;templates目录下创建package.json</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stata">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;&lt;%= appname %&gt;&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&lt;%= description %&gt;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;</span><span class="hljs-keyword">Error</span>: <span class="hljs-keyword">no</span> <span class="hljs-keyword">test</span> specified\<span class="hljs-string">&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;^3.3.1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;loadash&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;cool&quot;</span>: <span class="hljs-string">&quot;&lt;%= cool %&gt;&quot;</span>,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&lt;%= username %&gt;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;&lt;%= projectLicense %&gt;&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们的generator生成什么样的基础工程，目录结构，是否自动安装依赖模块等等都是在index.js文件完成的。可以先浏览下里面内容，然后把里面的内容删掉照着下面步骤来。</p><p>打开generator-yzw-pc-web&#x2F;generators&#x2F;app&#x2F;index.js</p><p>首先加入依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>); <span class="hljs-comment">// 引入Node.js中的path</span><br><span class="hljs-keyword">const</span> mkdirp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mkdirp&#x27;</span>); <span class="hljs-comment">// 引入mkdirp</span><br></code></pre></td></tr></table></figure><ol><li>继承generator<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Generator</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;yeoman-generator&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Generator</span> &#123;<br><span class="hljs-comment">//以下大部分内容将会写在里面</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>构造函数<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(args, opts)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    super(args, opts);</span></span><br><span class="hljs-comment"><span class="hljs-function">    // args是在命令行中直接传递的。 如:yo yzw-pc-web webapp,接受键值对的条件。</span></span><br><span class="hljs-comment"><span class="hljs-function">    this.log(&#x27;args&#x27;, args);</span></span><br><span class="hljs-comment"><span class="hljs-function">    // opts和args很相似,但是opts是作为命令行标识使用的,如yo yzw-pc-web webapp --coffee。</span></span><br><span class="hljs-comment"><span class="hljs-function">    this.log(&#x27;opts&#x27;, opts.coffee);</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br></code></pre></td></tr></table></figure>args是在命令行中直接传递的。 如:yo yzw-pc-web webapp,接受键值对的条件。</li></ol><p>opts和args很相似,但是opts是作为命令行标识使用的,如yo yzw-pc-web webapp</p><p>运行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yo yzw-pc-web webpack <span class="hljs-comment">--coffee</span><br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">args</span> [ <span class="hljs-string">&#x27;webpack&#x27;</span> ]<br>opts <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>初始化函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">initializing</span>(<span class="hljs-params"></span>)   &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = &#123;&#125;;      <span class="hljs-comment">//定义这个后面会用到</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初始化完成&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>promoting块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//promts是问题集合，在调用this.promt使其在运行yo的时候提出来</span><br>  prompting() &#123;<br>    <span class="hljs-comment">// Have Yeoman greet the user.</span><br>    <span class="hljs-keyword">this</span>.log(<br>      yosay(`Welcome to the terrific $&#123;chalk.red(<span class="hljs-string">&#x27;generator-yzw-pc-web&#x27;</span>)&#125; generator!`)<br>    );<br><br>    <span class="hljs-keyword">const</span> prompts = [<br>      &#123;<br>        type: <span class="hljs-string">&#x27;confirm&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;someAnswer&#x27;</span>,<br>        message: <span class="hljs-string">&#x27;Would you like to enable this option?&#x27;</span>,<br>        default: <span class="hljs-literal">true</span><br>      &#125;, &#123;<br>        type    : <span class="hljs-string">&#x27;input&#x27;</span>,<br>        name    : <span class="hljs-string">&#x27;appname&#x27;</span>,<br>        message : <span class="hljs-string">&#x27;give Your project a name&#x27;</span>,<br>        default : <span class="hljs-keyword">this</span>.appname     <span class="hljs-comment">//appname是内置对象，代表工程名，这里就是上一级的目录名</span><br>      &#125;, &#123;<br>        type    : <span class="hljs-string">&#x27;confirm&#x27;</span>,<br>        name    : <span class="hljs-string">&#x27;cool&#x27;</span>,<br>        message : <span class="hljs-string">&#x27;Would you like to enable the Cool feature?&#x27;</span><br>      &#125;,<br>      &#123;<br>        type: <span class="hljs-string">&#x27;input&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;projectDesc&#x27;</span>,<br>        message: <span class="hljs-string">&#x27;Please input project description:&#x27;</span><br>      &#125;,<br>      &#123;<br>        type: <span class="hljs-string">&#x27;list&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;projectLicense&#x27;</span>,<br>        message: <span class="hljs-string">&#x27;Please choose license:&#x27;</span>,<br>        choices: [<span class="hljs-string">&#x27;MIT&#x27;</span>, <span class="hljs-string">&#x27;ISC&#x27;</span>, <span class="hljs-string">&#x27;Apache-2.0&#x27;</span>, <span class="hljs-string">&#x27;AGPL-3.0&#x27;</span>]<br>      &#125;,<br>      &#123;<br>         type    : <span class="hljs-string">&#x27;input&#x27;</span>,<br>         name    : <span class="hljs-string">&#x27;username&#x27;</span>,<br>         message : <span class="hljs-string">&#x27;What\&#x27;s your GitHub username&#x27;</span>,    <span class="hljs-comment">//里面的单引号需要转义</span><br>         store   : <span class="hljs-literal">true</span><br>      &#125;<br>    ];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.prompt(prompts).then(props =&gt; &#123;<br>      <span class="hljs-comment">// To access props later use this.props.someAnswer;</span><br>      <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&#x27;appname ：&#x27;</span>, props.appname);<br>      <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&#x27;cool feature ：&#x27;</span>, props.cool);<br>      <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&#x27;username ：&#x27;</span>, props.username);<br>      <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&#x27;projectDesc ：&#x27;</span>, props.projectDesc);<br>      <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&#x27;projectLicense ：&#x27;</span>, props.projectLicense);<br><br>      <span class="hljs-comment">//最后将用户输入的数据存在this.props中，以方便后面调用。</span><br>      <span class="hljs-keyword">this</span>.props = props;<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>default块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">defaults () &#123;           <span class="hljs-comment">//判断工程名同名文件夹是否存在，不存在则自动创建</span><br>    <span class="hljs-keyword">if</span> (path.basename(<span class="hljs-keyword">this</span>.destinationPath()) !== <span class="hljs-keyword">this</span>.props.appname) &#123;<br>      <span class="hljs-keyword">this</span>.log(<br>        <span class="hljs-string">&#x27;Your generator must be inside a folder named &#x27;</span> + <span class="hljs-keyword">this</span>.props.appname + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>        <span class="hljs-string">&#x27;I\&#x27;ll automatically create this folder.&#x27;</span><br>      );<br>      <span class="hljs-comment">//mkdirp是我们引用的模块，用来创建文件夹,此时没有设置项目根目录，则在当前目录创建</span><br>      mkdirp(<span class="hljs-keyword">this</span>.props.appname);<br>      <span class="hljs-comment">//this.destinationRoot则是设置要创建的工程的根目录为工程名文件夹。</span><br>      <span class="hljs-keyword">this</span>.destinationRoot(<span class="hljs-keyword">this</span>.destinationPath(<span class="hljs-keyword">this</span>.props.appname));<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>writing<br>基于项目中generator&#x2F;generator-yzw-pc-web&#x2F;generators&#x2F;app&#x2F;templates来拷贝文件到项目工程中</p></li></ol><p>generator的this.fs暴露出所有的文件方法,通过<a href="https://github.com/sboudrias/mem-fs-editor">mem-fs-editor</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">writing() &#123;<br>    <span class="hljs-comment">//在根目录下创建文件夹</span><br>    mkdirp(<span class="hljs-string">&#x27;lib/1&#x27;</span>);<br><br>    <span class="hljs-comment">// 复制templates目录中的index.html到目标目录（先在templates里创建index.html文件）</span><br>    <span class="hljs-comment">// 会自动生成src目录</span><br>    <span class="hljs-keyword">this</span>.fs.copyTpl(<br>      <span class="hljs-keyword">this</span>.templatePath(<span class="hljs-string">&#x27;src/index.html&#x27;</span>),<br>      <span class="hljs-keyword">this</span>.destinationPath(<span class="hljs-string">&#x27;src/index.html&#x27;</span>),<br>      &#123; title: <span class="hljs-string">&#x27;Templating with Yeoman&#x27;</span> &#125;<br>    );<br><br>    <span class="hljs-keyword">this</span>.fs.copy(<br>      <span class="hljs-keyword">this</span>.templatePath(<span class="hljs-string">&#x27;dummyfile.txt&#x27;</span>),<br>      <span class="hljs-keyword">this</span>.destinationPath(<span class="hljs-string">&#x27;dummyfile.txt&#x27;</span>)<br>    );<br>    <span class="hljs-keyword">this</span>.fs.copy(<br>      <span class="hljs-keyword">this</span>.templatePath(<span class="hljs-string">&#x27;common&#x27;</span>),<br>      <span class="hljs-keyword">this</span>.destinationPath(<span class="hljs-string">&#x27;common&#x27;</span>)<br>    );<br>    <span class="hljs-keyword">this</span>.fs.copyTpl(<br>      <span class="hljs-keyword">this</span>.templatePath(<span class="hljs-string">&#x27;package.json&#x27;</span>),<br>      <span class="hljs-keyword">this</span>.destinationPath(<span class="hljs-string">&#x27;package.json&#x27;</span>),<br>      &#123;<br>        appname: <span class="hljs-keyword">this</span>.props.appname,<br>        cool: <span class="hljs-keyword">this</span>.props.cool,<br>        username: <span class="hljs-keyword">this</span>.props.username,<br>        description: <span class="hljs-keyword">this</span>.props.projectDesc,<br>        projectLicense: <span class="hljs-keyword">this</span>.props.projectLicense<br>      &#125;<br>    );<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>install<br>工程目录搭建的时候就会自动安装package.json里的依赖包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">install</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 执行安装包，需要templates/package.json</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">installDependencies</span>();<br>    <span class="hljs-comment">//使用npm安装依赖lodash</span><br>    <span class="hljs-comment">// this.npmInstall([&#x27;lodash&#x27;], &#123; &#x27;save-dev&#x27;: true &#125;);</span><br>  &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="实际项目中使用脚手架"><a href="#实际项目中使用脚手架" class="headerlink" title="实际项目中使用脚手架"></a>实际项目中使用脚手架</h4><p>进入项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> projects<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">yo</span> yzw-web-<span class="hljs-built_in">pc</span><br></code></pre></td></tr></table></figure><blockquote><p>这里不包含前面的generator-</p></blockquote><p>则会在projects目录下生成项目目录，你可以进入目录查看结果。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.jianshu.com/p/2d4fd316c31e">yeoman generator自定义编写</a><br><a href="https://www.jianshu.com/p/0d111fea5206?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">yeoman-generator 入门教程</a><br><a href="https://github.com/sboudrias/mem-fs-editor">mem-fs-editor</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>babel使用心得</title>
    <link href="/2018/10/babel%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97.html"/>
    <url>/2018/10/babel%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97.html</url>
    
    <content type="html"><![CDATA[<p>本文主要研究babel插件transform-react-jsx的使用</p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为了便于说明，首先我们来定义两个概念。</p><ol><li>转译插件，转译插件是用来转译单一功能的插件，比如transform-es2015-arrow-functions，这个插件只负责转译es2015新增的箭头函数。</li><li>转译器，转译器是一系列转译插件的集合。比如babel-preset-es2015就包含了es2015新增语法的所有转译插件，比如包含transform-es2015-arrow-functions（es2015箭头函数转译插件）、transform-es2015-classes(es2015 class类转译插件)等。</li></ol><p>大体上babel的转译器分为3类：</p><ol><li>语法转译器，这些转译器只负责转译js最新的语法，并不负责转译js新增的api和全局对象。这类转译器包括babel-preset-env、babel-preset-es2015、babel-preset-es2016、babel-preset-es2017、babel-preset-latest等，以后肯定还会有新的转译器加入，不过你只要理解转译器就是一堆转译插件的集合就可以了。</li><li>补丁转译器，这些转译器只负责转译js最新的api和全局对象。比如浏览器不支持String新增的String.padStart方法和Promise全局对象。通过babel-profill转译，我们可以通过其他代码来让浏览器实现类似String.padStart和Promise的功能。</li><li>jsx和flow插件，这类转译器用来转译JSX语法和移除类型声明的，使用Rect的时候你将用到它，转译器名称为babel-preset-react</li></ol><p>另外你可以对babel已有的转译器进行改造或者创建新的转译器。<br>如何创建babel转译器可以点<a href="https://babeljs.io/docs/en/plugins">这里</a></p><h4 id="插一下题外话关于babel-preset-react"><a href="#插一下题外话关于babel-preset-react" class="headerlink" title="插一下题外话关于babel-preset-react"></a>插一下题外话关于babel-preset-react</h4><p>下载github里的babel项目，里面的packages目录下包含了很多的babel转移器和插件</p><h5 id="一、babel-x2F-packages里面包括了转译插件transform-react-jsx"><a href="#一、babel-x2F-packages里面包括了转译插件transform-react-jsx" class="headerlink" title="一、babel&#x2F;packages里面包括了转译插件transform-react-jsx"></a>一、babel&#x2F;packages里面包括了转译插件transform-react-jsx</h5><p>在目录babel-plugin-transform-react-jsx下</p><p>其中package.json</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">@babel</span>/plugin-transform-react-jsx&quot;</span><br></code></pre></td></tr></table></figure><p>所以引用或者安装这个转译插件，可以通过</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install --save-dev @babel/plugin-transform-react-jsx<br></code></pre></td></tr></table></figure><p>参考<a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-jsx">github</a></p><p>安装后显示的package.json</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;<span class="hljs-variable">@babel</span>/plugin-transform-react-jsx&quot;</span>: <span class="hljs-string">&quot;^7.0.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是<a href="https://www.npmjs.com/package/babel-plugin-transform-react-jsx">npm</a>里的安装是通过</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install <span class="hljs-attr">--save-dev</span> babel-plugin-<span class="hljs-attribute">transform</span>-react-jsx<br></code></pre></td></tr></table></figure><p>安装后显示的package.json</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;devDependencies&quot;: &#123;<br>    &quot;babel-plugin-<span class="hljs-attribute">transform</span>-react-jsx&quot;: <span class="hljs-string">&quot;^6.24.1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对比了一下，两者代码虽然不一致，实现的功能是一致的</p><p>唯一的区别就是<br>npm安装的可以单独作为插件使用，而github安装的则不行，主要因为版本的问题，因为@babel&#x2F;<a href="mailto:&#x70;&#x6c;&#x75;&#103;&#105;&#110;&#45;&#x74;&#114;&#x61;&#x6e;&#115;&#102;&#111;&#114;&#x6d;&#x2d;&#114;&#101;&#x61;&#x63;&#116;&#x2d;&#106;&#x73;&#120;&#x40;&#55;&#46;&#x30;&#46;&#48;">&#x70;&#x6c;&#x75;&#103;&#105;&#110;&#45;&#x74;&#114;&#x61;&#x6e;&#115;&#102;&#111;&#114;&#x6d;&#x2d;&#114;&#101;&#x61;&#x63;&#116;&#x2d;&#106;&#x73;&#120;&#x40;&#55;&#46;&#x30;&#46;&#48;</a>需要<a href="mailto:&#98;&#x61;&#98;&#x65;&#108;&#x2d;&#99;&#111;&#x72;&#101;&#x40;&#55;&#46;&#x30;&#46;&#48;">&#98;&#x61;&#98;&#x65;&#108;&#x2d;&#99;&#111;&#x72;&#101;&#x40;&#55;&#46;&#x30;&#46;&#48;</a>支持，而目前项目里是<a href="mailto:&#98;&#97;&#98;&#101;&#108;&#45;&#99;&#111;&#114;&#x65;&#x40;&#54;&#46;&#x32;&#54;&#x2e;&#x33;">&#98;&#97;&#98;&#101;&#108;&#45;&#99;&#111;&#114;&#x65;&#x40;&#54;&#46;&#x32;&#54;&#x2e;&#x33;</a></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;<span class="hljs-variable">@babel</span>/plugin-transform-react-jsx&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>:[<span class="hljs-string">&quot;transform-react-jsx&quot;</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>经过实测发现以下这种形式会报错</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>:[<span class="hljs-string">&quot;transform-react-jsx&quot;</span>, &#123;<br>    <span class="hljs-string">&quot;pragma&quot;</span>: <span class="hljs-string">&quot;dom&quot;</span><br>  &#125;]<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="二、babel-x2F-packages里面还包括了转译器babel-preset-react"><a href="#二、babel-x2F-packages里面还包括了转译器babel-preset-react" class="headerlink" title="二、babel&#x2F;packages里面还包括了转译器babel-preset-react"></a>二、babel&#x2F;packages里面还包括了转译器babel-preset-react</h5><p>在目录babel-preset-react下</p><p>打开目录中.&#x2F;src&#x2F;index.js</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">declare</span> &#125; <span class="hljs-keyword">from</span> &quot;@babel/helper-plugin-utils&quot;;<br><span class="hljs-keyword">import</span> transformReactJSX <span class="hljs-keyword">from</span> &quot;@babel/plugin-transform-react-jsx&quot;;<br><span class="hljs-keyword">import</span> transformReactDisplayName <span class="hljs-keyword">from</span> &quot;@babel/plugin-transform-react-display-name&quot;;<br><span class="hljs-keyword">import</span> transformReactJSXSource <span class="hljs-keyword">from</span> &quot;@babel/plugin-transform-react-jsx-source&quot;;<br><span class="hljs-keyword">import</span> transformReactJSXSelf <span class="hljs-keyword">from</span> &quot;@babel/plugin-transform-react-jsx-self&quot;;<br></code></pre></td></tr></table></figure><p>可以看到引用了一些转译插件，其中就包括了转译插件transform-react-jsx</p><h4 id="本地安装babel命令行工具"><a href="#本地安装babel命令行工具" class="headerlink" title="本地安装babel命令行工具"></a>本地安装babel命令行工具</h4><p>babel命令行工具可以全局安装也可以本地安装，官方文档推荐本地安装，原因有2点；</p><ol><li><p>本地安装不同的项目可以使用不同版本的babel，你也可以单独对某个项目的babel进行升级等操作</p></li><li><p>每个项目单独安装的意味着对计算机环境没有依赖，便于移植</p></li></ol><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> babel-cli<br></code></pre></td></tr></table></figure><h4 id="在命令行中调用babel"><a href="#在命令行中调用babel" class="headerlink" title="在命令行中调用babel"></a>在命令行中调用babel</h4><p>修改package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel src -d lib&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>这里需要解释babel src -d lib这个命令的意思。这个命令目的是把src文件夹下的文件都转译，转译后的文件放到lib目录下。</p><h4 id="配置-babelrc文件"><a href="#配置-babelrc文件" class="headerlink" title="配置.babelrc文件"></a>配置.babelrc文件</h4><p>.babelrc用于配置除回调以外的所有babel api 选项。例如plugins和presets。plugins用于配置我们转译所需要的插件，presets用于配置我们所需要的转译器。</p><p>.babelrc不是必须的，我们在.babelrc中配置的选项都可以通过命令行添加，比如在命令行执行babel src -d lib –presets&#x3D;env等价于在.babelrc中配置”presets”:[“env”]。当然.babelrc要明显方便很多。</p><p>babel在转译代码的过程中会自动读取当前目录.babelrc配置文件，如果当前目录没有的话就遍历整个目录树去寻找，直到找到.babelrc文件或者含有”babel”字段的package.json文件，然后使用这些配置选项来转译代码。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>:[<span class="hljs-string">&quot;env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>转译器就是一堆转译插件的集合。babel转译器很多，但是我们常用的就那几个。如果要转译新版本的js的话，只需要使用babel-presets-env这一个转译器就可以了。</p><h3 id="在webpack中使用babel"><a href="#在webpack中使用babel" class="headerlink" title="在webpack中使用babel"></a>在webpack中使用babel</h3><h4 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> webpack webpack-cli<br></code></pre></td></tr></table></figure><h4 id="安装babel-plugin-transform-react-jsx和babel-loader"><a href="#安装babel-plugin-transform-react-jsx和babel-loader" class="headerlink" title="安装babel-plugin-transform-react-jsx和babel-loader"></a>安装babel-plugin-transform-react-jsx和babel-loader</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install --save-dev babel-preset-env babel-loader@<span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这里需要指定下babel-loader版本，因为版本太高会报错</p><p>此时的package.json如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;babel-cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.26.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-plugin-transform-react-jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.24.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.1.2&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h4 id="在根目录下创建webpack-config-js文件"><a href="#在根目录下创建webpack-config-js文件" class="headerlink" title="在根目录下创建webpack.config.js文件"></a>在根目录下创建webpack.config.js文件</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua">var <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/vd.js&#x27;</span>,<br>  <span class="hljs-built_in">output</span>: &#123;<br>    <span class="hljs-built_in">path</span>: <span class="hljs-built_in">path</span>.resolve(__dirname,<span class="hljs-string">&quot;lib&quot;</span>),<br>    filename: <span class="hljs-string">&#x27;vd.compiled.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    <span class="hljs-built_in">loaders</span>: [&#123;<br>      test: /\.js$/,<br>      exclude: /node_modules/,<br>      loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span><br>      // query:&#123;<br>      //   plugins: [<span class="hljs-string">&quot;transform-react-jsx&quot;</span>]<br>      //   presets:[<span class="hljs-string">&quot;env&quot;</span>] // 需要先npm install <span class="hljs-comment">--save-dev babel-preset-env</span><br>      // &#125;<br>    &#125;]<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>entry为入口文件，我们选择当前目录下，src文件夹下的person.js文件作为入口。output为输出选项，path为输出的目录，filename为输出文件名。query选项为.babelrc中的配置选项。在webpack中设置了query字段后，就不再需要.babelrc文件了。</p><h4 id="运行webpack"><a href="#运行webpack" class="headerlink" title="运行webpack"></a>运行webpack</h4><p>在命令行中执行webpack，webpack会自动读取webpack.config.js文件中的配置。然后对我们配置的文件进行转译。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">webpack</span><br></code></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><p>babel常用的转译器是babel-preset-env。</p></li><li><p>常用的配置选项是plugins和presets</p></li><li><p>常用的使用场景是在webpack中</p></li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/huangzhaoyang8888/article/details/80705363">babel从入门到入门</a><br><a href="https://segmentfault.com/a/1190000016129036">你不知道的Virtual DOM（一）：Virtual Dom介绍</a><br><a href="https://www.npmjs.com/package/babel-plugin-transform-react-jsx">npm - babel-plugin-transform-react-jsx</a><br><a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-jsx">github - @babel&#x2F;plugin-transform-react-jsx</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本地通过webpack搭建react环境</title>
    <link href="/2018/10/%E6%9C%AC%E5%9C%B0%E9%80%9A%E8%BF%87webpack%E6%90%AD%E5%BB%BAreact%E7%8E%AF%E5%A2%83.html"/>
    <url>/2018/10/%E6%9C%AC%E5%9C%B0%E9%80%9A%E8%BF%87webpack%E6%90%AD%E5%BB%BAreact%E7%8E%AF%E5%A2%83.html</url>
    
    <content type="html"><![CDATA[<h4 id="安装webpack和webpack-dev-server"><a href="#安装webpack和webpack-dev-server" class="headerlink" title="安装webpack和webpack-dev-server"></a>安装webpack和webpack-dev-server</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm i webpack -D<br>npm i webpack-dev-server -D<br></code></pre></td></tr></table></figure><blockquote><p>说明1: devDependencies是开发依赖，只会在打包过程中用到，不会包含到最后的代码中<br>说明2: 如果想安装指定版本的webpack，使用npm install –save-dev webpack@&lt;版本号&gt;格式</p></blockquote><h4 id="修改package-json"><a href="#修改package-json" class="headerlink" title="修改package.json"></a>修改package.json</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;a&quot;</span> :<span class="hljs-string">&quot;webpack --config ./build/webpack.dev.conf.js&quot;</span>,<br>   <span class="hljs-string">&quot;b&quot;</span> :<span class="hljs-string">&quot;webpack-dev-server --config ./build/webpack.dev.conf.js&quot;</span>,<br>   <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;</span><span class="hljs-keyword">Error</span>: <span class="hljs-keyword">no</span> <span class="hljs-keyword">test</span> specified\<span class="hljs-string">&quot; &amp;&amp; exit 1&quot;</span><br> &#125;,<br></code></pre></td></tr></table></figure><h4 id="devServer常用配置"><a href="#devServer常用配置" class="headerlink" title="devServer常用配置"></a>devServer常用配置</h4><p>&#x2F;build&#x2F;webpack.dev.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPluginConfig</span>=&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hello,零和壹在线课堂&#x27;</span>, <span class="hljs-comment">// html5文件中&lt;title&gt;部分</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;front.html&#x27;</span>, <span class="hljs-comment">// 默认是index.html，服务器中设置的首页是index.html，如果这里改成其它名字，那么devServer.index改为和它一样</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/template/daqi.html&#x27;</span>, <span class="hljs-comment">// 如果觉得插件默认生成的hmtl5文件不合要求，可以指定一个模板，模板文件如果不存在，会报错，默认是在项目根目录下找模板文件，才模板为样板，将打包的js文件注入到body结尾处</span><br>    <span class="hljs-attr">inject</span>:<span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-comment">// true|body|head|false，四种值，默认为true,true和body相同,是将js注入到body结束标签前,head将打包的js文件放在head结束前,false是不注入，这时得要手工在html中加js</span><br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main&#x27;</span>, <span class="hljs-comment">//main.js中的js可以省略，前面的./不能省</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&#x27;../dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;./dist/app-[hash].js&#x27;</span>,<br>        <span class="hljs-attr">hashDigestLength</span>: <span class="hljs-number">8</span> <span class="hljs-comment">// 默认hash长度20，限制8个字节</span><br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(<span class="hljs-title class_">HtmlWebpackPluginConfig</span>)], <span class="hljs-comment">//先不配置插件，看看效果</span><br>    <span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;../dist&quot;</span>), <span class="hljs-comment">//网站的根目录为 根目录/dist</span><br>      <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>, <span class="hljs-comment">//端口改为9000</span><br>      <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-comment">//指定使用一个 host。默认是 localhost。如果你希望服务器外部可访问，指定如下：0.0.0.0，外部需要通过本地ip地址来访问</span><br>      <span class="hljs-attr">open</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">// 自动打开浏览器</span><br>      <span class="hljs-attr">index</span>:<span class="hljs-string">&#x27;front.html&#x27;</span>, <span class="hljs-comment">// 与HtmlWebpackPlugin中配置filename一样</span><br>      <span class="hljs-attr">inline</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">// 默认为true, 意思是，在打包时会注入一段代码到最后的js文件中，用来监视页面的改动而自动刷新页面,当为false时，网页自动刷新的模式是iframe，也就是将模板页放在一个frame中</span><br>      <span class="hljs-attr">hot</span>:<span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">compress</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">//Gizp压缩，需要服务器开启</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="创建好项目目录"><a href="#创建好项目目录" class="headerlink" title="创建好项目目录"></a>创建好项目目录</h4><p>项目根目录<br>│   package.json<br>├───node_modules<br>│       └╌╌ 下面是npm包<br>├───dist<br>│     └╌╌╌╌╌logo.jpg<br>├───build<br>│   ├╌╌╌╌╌ build.js<br>│   ├╌╌╌╌╌ webpack.base.conf.js<br>│   ├╌╌╌╌╌ webpack.dev.conf.js<br>│   └╌╌╌╌╌ webpack.prod.conf.js<br>├───src<br>│   ├╌╌╌╌╌ main.js<br>│   └╌╌╌╌╌tmp<br>│         ├╌╌╌╌╌home.js<br>│         ├╌╌╌╌╌about.js<br>│         └╌╌╌╌╌contact.js<br>│   └╌╌╌╌╌template<br>│         └╌╌╌╌╌daqi.html &#x2F;&#x2F; 为hmtl插件的模板<br>│   └╌╌╌╌╌images<br>│         └╌╌╌╌╌logo.jpg  </p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> a<br></code></pre></td></tr></table></figure><p>会在dist目录下生成实际的页面</p><h4 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> b<br></code></pre></td></tr></table></figure><p>不会在dist目录下生成实际的页面，会在内存中生成</p><h4 id="使用HtmlWebpackPlugin插件生成首页"><a href="#使用HtmlWebpackPlugin插件生成首页" class="headerlink" title="使用HtmlWebpackPlugin插件生成首页"></a>使用HtmlWebpackPlugin插件生成首页</h4><p><strong>安装html-webpack-plugin插件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm i html-webpack-plugin -D<br></code></pre></td></tr></table></figure><h4 id="加入react"><a href="#加入react" class="headerlink" title="加入react"></a>加入react</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>直接在模板页面引入了三个库： react.min.js 、react-dom.min.js 和 babel.min.js</p><ul><li>react.min.js - React 的核心库</li><li>react-dom.min.js - 提供与 DOM 相关的功能</li><li>babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello React!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(</span><br><span class="language-javascript">    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)</span><br><span class="language-javascript">);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意这里的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ol><li>npm install –save react 安装react。</li><li>npm install –save react-dom 安装react-dom。</li></ol><p>如果直接修改入口文件的main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> b<br></code></pre></td></tr></table></figure><p>命令行会报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>in ./src/main.js<br>Module parse failed: Unexpected token (10:11)<br></code></pre></td></tr></table></figure><p>原因是需要安装babel来编译jsx</p><ol start="3"><li>npm install –save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0 安装babel相关的包。（必需， 否则react中的语法会报错）</li></ol><blockquote><p>注意dependencies和devDependencies对应的就是–save和–save-dev<br>–save和–save-dev的区别(也就是dependencies和devDependencies的区别)：</p><ul><li>–save： 项目上线运行仍然要用到的东西，比如react， 上线后仍然需要。</li><li>–save-dev： 仅开发阶段所需要，比如webpack， 仅开发的阶段需要，项目上线之后并不需要。</li></ul></blockquote><h5 id="修改webpack配置webpack-dev-conf-js"><a href="#修改webpack配置webpack-dev-conf-js" class="headerlink" title="修改webpack配置webpack.dev.conf.js"></a>修改webpack配置webpack.dev.conf.js</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">loaders: [<br>      &#123;<br>        test: /\.jsx?$/,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        exclude: <span class="hljs-string">&#x27;/node_modules/&#x27;</span>,<br>        query: &#123;<br>          presets: [<br>            <span class="hljs-string">&#x27;es2015&#x27;</span>, <span class="hljs-string">&#x27;stage-0&#x27;</span>, <span class="hljs-string">&#x27;react&#x27;</span><br>          ]<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>loaders中的test, loader, exclude：</p><p>分别表示对于怎样的文件，用什么loader来处理， 除开哪些文件。图中的loader的意思是，对于node_modules以外的后缀名为js或者jsx的文件， 用babel-loader来处理。</p><p>至于为什么是后缀名为js或者jsx，这里是个正则，x后面跟的问号表示x出现0次或者1次。$表示结尾。</p><p>我们用babel-loader来处理后缀名为js或者jsx的文件，但是没有指明按照怎样的转码规则来处理这些文件，所以这里的presets指明的就是转码规则。</p><blockquote><p>es2015: 用来编译es6语法<br>stage-0: 用来编译一些es7语法（还没定下来）<br>react: 用来编译react的语法</p></blockquote><p>除了在上面使用query.presets之外，也可以在根目录下配置.babelrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> .babelrc<br></code></pre></td></tr></table></figure><p>创建babel的配置文件。在文件中写入：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>, <span class="hljs-string">&quot;stage-0&quot;</span>, <span class="hljs-string">&quot;react&quot;</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>执行打包</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> b<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Module build failed: Error: Cannot find module <span class="hljs-string">&#x27;@babel/core&#x27;</span><br> babel-loader@<span class="hljs-number">8</span> requires Babel <span class="hljs-number">7</span>.x (the package <span class="hljs-string">&#x27;@babel/core&#x27;</span>). If yo<span class="hljs-string">u&#x27;d like to use Babel 6.x (&#x27;</span>babel-core<span class="hljs-string">&#x27;), you should install &#x27;</span>babel-loader@<span class="hljs-number">7</span><span class="hljs-string">&#x27;.</span><br></code></pre></td></tr></table></figure><p> 是因为babel-loader版本过高<br> 当前是”babel-loader”: “^8.0.4”<br> 改为”babel-loader”: “^7.1.2”<br> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i<br><span class="hljs-built_in">npm</span> run b<br></code></pre></td></tr></table></figure></p><p> 大功告成。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://segmentfault.com/a/1190000012536871#articleHeader2">webpack从零开始第1课:安装webpack和webpack-dev-server</a><br><a href="https://segmentfault.com/a/1190000013396072">webpack-dev-server配置项</a><br><a href="https://webpack.docschina.org/api/cli/">webpack命令行各参数的用法</a><br><a href="https://webpack.docschina.org/configuration/dev-server/">webpack-dev-server的配置</a><br><a href="http://www.runoob.com/react/react-install.html">react安装-菜鸟教程</a><br><a href="https://segmentfault.com/a/1190000012029340">Webpack + React学习笔记(一) —— 准备</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VI命令行工具使用</title>
    <link href="/2018/09/VI%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html"/>
    <url>/2018/09/VI%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<p><a href="http://man.linuxde.net/vi">vi命令</a></p><p>vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。</p><p>从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。</p><p>通过</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">vi <span class="hljs-keyword">test</span><span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><p>Esc：从编辑模式切换到命令模式；<br>a：在当前字符后添加文本；<br>A：在行末添加文本；<br>i：在当前字符前插入文本；<br>I：在行首插入文本；<br>o：在当前行后面插入一空行；<br>O：在当前行前面插入一空行；<br>:wq：在命令模式下，执行存盘退出操作；</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
